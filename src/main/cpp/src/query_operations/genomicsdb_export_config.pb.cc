// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_export_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genomicsdb_export_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ColumnRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnRangeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnRangeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportConfiguration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_genomicsdb_5fexport_5fconfig_2eproto() {
  protobuf_AddDesc_genomicsdb_5fexport_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "genomicsdb_export_config.proto");
  GOOGLE_CHECK(file != NULL);
  ColumnRange_descriptor_ = file->message_type(0);
  static const int ColumnRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, high_),
  };
  ColumnRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnRange_descriptor_,
      ColumnRange::default_instance_,
      ColumnRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnRange));
  ColumnRangeList_descriptor_ = file->message_type(1);
  static const int ColumnRangeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRangeList, range_list_),
  };
  ColumnRangeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnRangeList_descriptor_,
      ColumnRangeList::default_instance_,
      ColumnRangeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRangeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRangeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnRangeList));
  ExportConfiguration_descriptor_ = file->message_type(2);
  static const int ExportConfiguration_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportConfiguration, tiledb_workspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportConfiguration, tiledb_array_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportConfiguration, reference_genome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportConfiguration, query_column_ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportConfiguration, attributes_),
  };
  ExportConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExportConfiguration_descriptor_,
      ExportConfiguration::default_instance_,
      ExportConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExportConfiguration));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_genomicsdb_5fexport_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnRange_descriptor_, &ColumnRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnRangeList_descriptor_, &ColumnRangeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExportConfiguration_descriptor_, &ExportConfiguration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_genomicsdb_5fexport_5fconfig_2eproto() {
  delete ColumnRange::default_instance_;
  delete ColumnRange_reflection_;
  delete ColumnRangeList::default_instance_;
  delete ColumnRangeList_reflection_;
  delete ExportConfiguration::default_instance_;
  delete ExportConfiguration_reflection_;
}

void protobuf_AddDesc_genomicsdb_5fexport_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036genomicsdb_export_config.proto\"(\n\013Colu"
    "mnRange\022\013\n\003low\030\001 \002(\003\022\014\n\004high\030\002 \002(\003\"3\n\017Co"
    "lumnRangeList\022 \n\nrange_list\030\001 \003(\0132\014.Colu"
    "mnRange\"\247\001\n\023ExportConfiguration\022\030\n\020tiled"
    "b_workspace\030\001 \002(\t\022\031\n\021tiledb_array_name\030\002"
    " \002(\t\022\030\n\020reference_genome\030\003 \002(\t\022-\n\023query_"
    "column_ranges\030\004 \003(\0132\020.ColumnRangeList\022\022\n"
    "\nattributes\030\005 \003(\t", 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomicsdb_export_config.proto", &protobuf_RegisterTypes);
  ColumnRange::default_instance_ = new ColumnRange();
  ColumnRangeList::default_instance_ = new ColumnRangeList();
  ExportConfiguration::default_instance_ = new ExportConfiguration();
  ColumnRange::default_instance_->InitAsDefaultInstance();
  ColumnRangeList::default_instance_->InitAsDefaultInstance();
  ExportConfiguration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_genomicsdb_5fexport_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_genomicsdb_5fexport_5fconfig_2eproto {
  StaticDescriptorInitializer_genomicsdb_5fexport_5fconfig_2eproto() {
    protobuf_AddDesc_genomicsdb_5fexport_5fconfig_2eproto();
  }
} static_descriptor_initializer_genomicsdb_5fexport_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ColumnRange::kLowFieldNumber;
const int ColumnRange::kHighFieldNumber;
#endif  // !_MSC_VER

ColumnRange::ColumnRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnRange::InitAsDefaultInstance() {
}

ColumnRange::ColumnRange(const ColumnRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnRange::SharedCtor() {
  _cached_size_ = 0;
  low_ = GOOGLE_LONGLONG(0);
  high_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnRange::~ColumnRange() {
  SharedDtor();
}

void ColumnRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnRange_descriptor_;
}

const ColumnRange& ColumnRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fexport_5fconfig_2eproto();
  return *default_instance_;
}

ColumnRange* ColumnRange::default_instance_ = NULL;

ColumnRange* ColumnRange::New() const {
  return new ColumnRange;
}

void ColumnRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    low_ = GOOGLE_LONGLONG(0);
    high_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 low = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_high;
        break;
      }

      // required int64 high = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 low = 1;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->low(), output);
  }

  // required int64 high = 2;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->high(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 low = 1;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->low(), target);
  }

  // required int64 high = 2;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->high(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 low = 1;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->low());
    }

    // required int64 high = 2;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->high());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnRange::MergeFrom(const ColumnRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnRange::CopyFrom(const ColumnRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ColumnRange::Swap(ColumnRange* other) {
  if (other != this) {
    std::swap(low_, other->low_);
    std::swap(high_, other->high_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnRange_descriptor_;
  metadata.reflection = ColumnRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnRangeList::kRangeListFieldNumber;
#endif  // !_MSC_VER

ColumnRangeList::ColumnRangeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnRangeList::InitAsDefaultInstance() {
}

ColumnRangeList::ColumnRangeList(const ColumnRangeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnRangeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnRangeList::~ColumnRangeList() {
  SharedDtor();
}

void ColumnRangeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnRangeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnRangeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnRangeList_descriptor_;
}

const ColumnRangeList& ColumnRangeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fexport_5fconfig_2eproto();
  return *default_instance_;
}

ColumnRangeList* ColumnRangeList::default_instance_ = NULL;

ColumnRangeList* ColumnRangeList::New() const {
  return new ColumnRangeList;
}

void ColumnRangeList::Clear() {
  range_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnRangeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ColumnRange range_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_range_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnRangeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ColumnRange range_list = 1;
  for (int i = 0; i < this->range_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->range_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnRangeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ColumnRange range_list = 1;
  for (int i = 0; i < this->range_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->range_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnRangeList::ByteSize() const {
  int total_size = 0;

  // repeated .ColumnRange range_list = 1;
  total_size += 1 * this->range_list_size();
  for (int i = 0; i < this->range_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnRangeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnRangeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnRangeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnRangeList::MergeFrom(const ColumnRangeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_list_.MergeFrom(from.range_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnRangeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnRangeList::CopyFrom(const ColumnRangeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRangeList::IsInitialized() const {

  for (int i = 0; i < range_list_size(); i++) {
    if (!this->range_list(i).IsInitialized()) return false;
  }
  return true;
}

void ColumnRangeList::Swap(ColumnRangeList* other) {
  if (other != this) {
    range_list_.Swap(&other->range_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnRangeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnRangeList_descriptor_;
  metadata.reflection = ColumnRangeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExportConfiguration::kTiledbWorkspaceFieldNumber;
const int ExportConfiguration::kTiledbArrayNameFieldNumber;
const int ExportConfiguration::kReferenceGenomeFieldNumber;
const int ExportConfiguration::kQueryColumnRangesFieldNumber;
const int ExportConfiguration::kAttributesFieldNumber;
#endif  // !_MSC_VER

ExportConfiguration::ExportConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExportConfiguration::InitAsDefaultInstance() {
}

ExportConfiguration::ExportConfiguration(const ExportConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExportConfiguration::SharedCtor() {
  _cached_size_ = 0;
  tiledb_workspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tiledb_array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reference_genome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExportConfiguration::~ExportConfiguration() {
  SharedDtor();
}

void ExportConfiguration::SharedDtor() {
  if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
    delete tiledb_workspace_;
  }
  if (tiledb_array_name_ != &::google::protobuf::internal::kEmptyString) {
    delete tiledb_array_name_;
  }
  if (reference_genome_ != &::google::protobuf::internal::kEmptyString) {
    delete reference_genome_;
  }
  if (this != default_instance_) {
  }
}

void ExportConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportConfiguration_descriptor_;
}

const ExportConfiguration& ExportConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fexport_5fconfig_2eproto();
  return *default_instance_;
}

ExportConfiguration* ExportConfiguration::default_instance_ = NULL;

ExportConfiguration* ExportConfiguration::New() const {
  return new ExportConfiguration;
}

void ExportConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tiledb_workspace()) {
      if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
        tiledb_workspace_->clear();
      }
    }
    if (has_tiledb_array_name()) {
      if (tiledb_array_name_ != &::google::protobuf::internal::kEmptyString) {
        tiledb_array_name_->clear();
      }
    }
    if (has_reference_genome()) {
      if (reference_genome_ != &::google::protobuf::internal::kEmptyString) {
        reference_genome_->clear();
      }
    }
  }
  query_column_ranges_.Clear();
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExportConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tiledb_workspace = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiledb_workspace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiledb_workspace().data(), this->tiledb_workspace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tiledb_array_name;
        break;
      }

      // required string tiledb_array_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiledb_array_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiledb_array_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiledb_array_name().data(), this->tiledb_array_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reference_genome;
        break;
      }

      // required string reference_genome = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reference_genome:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_genome()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reference_genome().data(), this->reference_genome().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query_column_ranges;
        break;
      }

      // repeated .ColumnRangeList query_column_ranges = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_column_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_column_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query_column_ranges;
        if (input->ExpectTag(42)) goto parse_attributes;
        break;
      }

      // repeated string attributes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributes(this->attributes_size() - 1).data(),
            this->attributes(this->attributes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExportConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tiledb_workspace = 1;
  if (has_tiledb_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_workspace().data(), this->tiledb_workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tiledb_workspace(), output);
  }

  // required string tiledb_array_name = 2;
  if (has_tiledb_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_array_name().data(), this->tiledb_array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tiledb_array_name(), output);
  }

  // required string reference_genome = 3;
  if (has_reference_genome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reference_genome().data(), this->reference_genome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reference_genome(), output);
  }

  // repeated .ColumnRangeList query_column_ranges = 4;
  for (int i = 0; i < this->query_column_ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->query_column_ranges(i), output);
  }

  // repeated string attributes = 5;
  for (int i = 0; i < this->attributes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->attributes(i).data(), this->attributes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->attributes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExportConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tiledb_workspace = 1;
  if (has_tiledb_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_workspace().data(), this->tiledb_workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tiledb_workspace(), target);
  }

  // required string tiledb_array_name = 2;
  if (has_tiledb_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_array_name().data(), this->tiledb_array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tiledb_array_name(), target);
  }

  // required string reference_genome = 3;
  if (has_reference_genome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reference_genome().data(), this->reference_genome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_genome(), target);
  }

  // repeated .ColumnRangeList query_column_ranges = 4;
  for (int i = 0; i < this->query_column_ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->query_column_ranges(i), target);
  }

  // repeated string attributes = 5;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributes(i).data(), this->attributes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->attributes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExportConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tiledb_workspace = 1;
    if (has_tiledb_workspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiledb_workspace());
    }

    // required string tiledb_array_name = 2;
    if (has_tiledb_array_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiledb_array_name());
    }

    // required string reference_genome = 3;
    if (has_reference_genome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reference_genome());
    }

  }
  // repeated .ColumnRangeList query_column_ranges = 4;
  total_size += 1 * this->query_column_ranges_size();
  for (int i = 0; i < this->query_column_ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query_column_ranges(i));
  }

  // repeated string attributes = 5;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExportConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExportConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExportConfiguration::MergeFrom(const ExportConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_column_ranges_.MergeFrom(from.query_column_ranges_);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tiledb_workspace()) {
      set_tiledb_workspace(from.tiledb_workspace());
    }
    if (from.has_tiledb_array_name()) {
      set_tiledb_array_name(from.tiledb_array_name());
    }
    if (from.has_reference_genome()) {
      set_reference_genome(from.reference_genome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExportConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportConfiguration::CopyFrom(const ExportConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < query_column_ranges_size(); i++) {
    if (!this->query_column_ranges(i).IsInitialized()) return false;
  }
  return true;
}

void ExportConfiguration::Swap(ExportConfiguration* other) {
  if (other != this) {
    std::swap(tiledb_workspace_, other->tiledb_workspace_);
    std::swap(tiledb_array_name_, other->tiledb_array_name_);
    std::swap(reference_genome_, other->reference_genome_);
    query_column_ranges_.Swap(&other->query_column_ranges_);
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExportConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportConfiguration_descriptor_;
  metadata.reflection = ExportConfiguration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
