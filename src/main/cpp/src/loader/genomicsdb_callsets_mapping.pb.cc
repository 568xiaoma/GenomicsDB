// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_callsets_mapping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genomicsdb_callsets_mapping.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SampleIDToTileDBIDMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SampleIDToTileDBIDMap> {
} _SampleIDToTileDBIDMap_default_instance_;
class CallsetMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CallsetMap> {
} _CallsetMap_default_instance_;

namespace protobuf_genomicsdb_5fcallsets_5fmapping_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, sample_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, tiledb_row_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, sample_vcf_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, stream_name_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallsetMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallsetMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallsetMap, callset_map_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(SampleIDToTileDBIDMap)},
  { 12, 17, sizeof(CallsetMap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampleIDToTileDBIDMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CallsetMap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "genomicsdb_callsets_mapping.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _SampleIDToTileDBIDMap_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CallsetMap_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SampleIDToTileDBIDMap_default_instance_.DefaultConstruct();
  _CallsetMap_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!genomicsdb_callsets_mapping.proto\"u\n\025S"
      "ampleIDToTileDBIDMap\022\023\n\013sample_name\030\001 \002("
      "\t\022\030\n\020tiledb_row_index\030\002 \002(\003\022\030\n\020sample_vc"
      "f_index\030\003 \002(\005\022\023\n\013stream_name\030\004 \001(\t\"9\n\nCa"
      "llsetMap\022+\n\013callset_map\030\001 \003(\0132\026.SampleID"
      "ToTileDBIDMapB2\n\024com.intel.genomicsdbB\032G"
      "enomicsDBCallsetsMapProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomicsdb_callsets_mapping.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_genomicsdb_5fcallsets_5fmapping_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleIDToTileDBIDMap::kSampleNameFieldNumber;
const int SampleIDToTileDBIDMap::kTiledbRowIndexFieldNumber;
const int SampleIDToTileDBIDMap::kSampleVcfIndexFieldNumber;
const int SampleIDToTileDBIDMap::kStreamNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleIDToTileDBIDMap::SampleIDToTileDBIDMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleIDToTileDBIDMap)
}
SampleIDToTileDBIDMap::SampleIDToTileDBIDMap(const SampleIDToTileDBIDMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sample_name()) {
    sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  stream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_name()) {
    stream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_name_);
  }
  ::memcpy(&tiledb_row_index_, &from.tiledb_row_index_,
    reinterpret_cast<char*>(&sample_vcf_index_) -
    reinterpret_cast<char*>(&tiledb_row_index_) + sizeof(sample_vcf_index_));
  // @@protoc_insertion_point(copy_constructor:SampleIDToTileDBIDMap)
}

void SampleIDToTileDBIDMap::SharedCtor() {
  _cached_size_ = 0;
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tiledb_row_index_, 0, reinterpret_cast<char*>(&sample_vcf_index_) -
    reinterpret_cast<char*>(&tiledb_row_index_) + sizeof(sample_vcf_index_));
}

SampleIDToTileDBIDMap::~SampleIDToTileDBIDMap() {
  // @@protoc_insertion_point(destructor:SampleIDToTileDBIDMap)
  SharedDtor();
}

void SampleIDToTileDBIDMap::SharedDtor() {
  sample_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SampleIDToTileDBIDMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleIDToTileDBIDMap::descriptor() {
  protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::file_level_metadata[0].descriptor;
}

const SampleIDToTileDBIDMap& SampleIDToTileDBIDMap::default_instance() {
  protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampleIDToTileDBIDMap* SampleIDToTileDBIDMap::New(::google::protobuf::Arena* arena) const {
  SampleIDToTileDBIDMap* n = new SampleIDToTileDBIDMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleIDToTileDBIDMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SampleIDToTileDBIDMap)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sample_name()) {
      GOOGLE_DCHECK(!sample_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sample_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_stream_name()) {
      GOOGLE_DCHECK(!stream_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stream_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&tiledb_row_index_, 0, reinterpret_cast<char*>(&sample_vcf_index_) -
      reinterpret_cast<char*>(&tiledb_row_index_) + sizeof(sample_vcf_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SampleIDToTileDBIDMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleIDToTileDBIDMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sample_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sample_name().data(), this->sample_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SampleIDToTileDBIDMap.sample_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 tiledb_row_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_tiledb_row_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tiledb_row_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sample_vcf_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_sample_vcf_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_vcf_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SampleIDToTileDBIDMap.stream_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleIDToTileDBIDMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleIDToTileDBIDMap)
  return false;
#undef DO_
}

void SampleIDToTileDBIDMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleIDToTileDBIDMap)
  // required string sample_name = 1;
  if (has_sample_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SampleIDToTileDBIDMap.sample_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sample_name(), output);
  }

  // required int64 tiledb_row_index = 2;
  if (has_tiledb_row_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tiledb_row_index(), output);
  }

  // required int32 sample_vcf_index = 3;
  if (has_sample_vcf_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sample_vcf_index(), output);
  }

  // optional string stream_name = 4;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SampleIDToTileDBIDMap.stream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stream_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SampleIDToTileDBIDMap)
}

::google::protobuf::uint8* SampleIDToTileDBIDMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SampleIDToTileDBIDMap)
  // required string sample_name = 1;
  if (has_sample_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SampleIDToTileDBIDMap.sample_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sample_name(), target);
  }

  // required int64 tiledb_row_index = 2;
  if (has_tiledb_row_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tiledb_row_index(), target);
  }

  // required int32 sample_vcf_index = 3;
  if (has_sample_vcf_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sample_vcf_index(), target);
  }

  // optional string stream_name = 4;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SampleIDToTileDBIDMap.stream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stream_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SampleIDToTileDBIDMap)
  return target;
}

size_t SampleIDToTileDBIDMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SampleIDToTileDBIDMap)
  size_t total_size = 0;

  if (has_sample_name()) {
    // required string sample_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  if (has_tiledb_row_index()) {
    // required int64 tiledb_row_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tiledb_row_index());
  }

  if (has_sample_vcf_index()) {
    // required int32 sample_vcf_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_vcf_index());
  }

  return total_size;
}
size_t SampleIDToTileDBIDMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SampleIDToTileDBIDMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string sample_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());

    // required int64 tiledb_row_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tiledb_row_index());

    // required int32 sample_vcf_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_vcf_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string stream_name = 4;
  if (has_stream_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleIDToTileDBIDMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SampleIDToTileDBIDMap)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleIDToTileDBIDMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleIDToTileDBIDMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SampleIDToTileDBIDMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SampleIDToTileDBIDMap)
    MergeFrom(*source);
  }
}

void SampleIDToTileDBIDMap::MergeFrom(const SampleIDToTileDBIDMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SampleIDToTileDBIDMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_sample_name()) {
      set_has_sample_name();
      sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
    }
    if (from.has_stream_name()) {
      set_has_stream_name();
      stream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_name_);
    }
    if (from.has_tiledb_row_index()) {
      set_tiledb_row_index(from.tiledb_row_index());
    }
    if (from.has_sample_vcf_index()) {
      set_sample_vcf_index(from.sample_vcf_index());
    }
  }
}

void SampleIDToTileDBIDMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SampleIDToTileDBIDMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleIDToTileDBIDMap::CopyFrom(const SampleIDToTileDBIDMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SampleIDToTileDBIDMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleIDToTileDBIDMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void SampleIDToTileDBIDMap::Swap(SampleIDToTileDBIDMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleIDToTileDBIDMap::InternalSwap(SampleIDToTileDBIDMap* other) {
  sample_name_.Swap(&other->sample_name_);
  stream_name_.Swap(&other->stream_name_);
  std::swap(tiledb_row_index_, other->tiledb_row_index_);
  std::swap(sample_vcf_index_, other->sample_vcf_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleIDToTileDBIDMap::GetMetadata() const {
  protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleIDToTileDBIDMap

// required string sample_name = 1;
bool SampleIDToTileDBIDMap::has_sample_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SampleIDToTileDBIDMap::set_has_sample_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SampleIDToTileDBIDMap::clear_has_sample_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SampleIDToTileDBIDMap::clear_sample_name() {
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sample_name();
}
const ::std::string& SampleIDToTileDBIDMap::sample_name() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.sample_name)
  return sample_name_.GetNoArena();
}
void SampleIDToTileDBIDMap::set_sample_name(const ::std::string& value) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.sample_name)
}
#if LANG_CXX11
void SampleIDToTileDBIDMap::set_sample_name(::std::string&& value) {
  set_has_sample_name();
  sample_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SampleIDToTileDBIDMap.sample_name)
}
#endif
void SampleIDToTileDBIDMap::set_sample_name(const char* value) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SampleIDToTileDBIDMap.sample_name)
}
void SampleIDToTileDBIDMap::set_sample_name(const char* value, size_t size) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SampleIDToTileDBIDMap.sample_name)
}
::std::string* SampleIDToTileDBIDMap::mutable_sample_name() {
  set_has_sample_name();
  // @@protoc_insertion_point(field_mutable:SampleIDToTileDBIDMap.sample_name)
  return sample_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SampleIDToTileDBIDMap::release_sample_name() {
  // @@protoc_insertion_point(field_release:SampleIDToTileDBIDMap.sample_name)
  clear_has_sample_name();
  return sample_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleIDToTileDBIDMap::set_allocated_sample_name(::std::string* sample_name) {
  if (sample_name != NULL) {
    set_has_sample_name();
  } else {
    clear_has_sample_name();
  }
  sample_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample_name);
  // @@protoc_insertion_point(field_set_allocated:SampleIDToTileDBIDMap.sample_name)
}

// required int64 tiledb_row_index = 2;
bool SampleIDToTileDBIDMap::has_tiledb_row_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SampleIDToTileDBIDMap::set_has_tiledb_row_index() {
  _has_bits_[0] |= 0x00000004u;
}
void SampleIDToTileDBIDMap::clear_has_tiledb_row_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void SampleIDToTileDBIDMap::clear_tiledb_row_index() {
  tiledb_row_index_ = GOOGLE_LONGLONG(0);
  clear_has_tiledb_row_index();
}
::google::protobuf::int64 SampleIDToTileDBIDMap::tiledb_row_index() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.tiledb_row_index)
  return tiledb_row_index_;
}
void SampleIDToTileDBIDMap::set_tiledb_row_index(::google::protobuf::int64 value) {
  set_has_tiledb_row_index();
  tiledb_row_index_ = value;
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.tiledb_row_index)
}

// required int32 sample_vcf_index = 3;
bool SampleIDToTileDBIDMap::has_sample_vcf_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SampleIDToTileDBIDMap::set_has_sample_vcf_index() {
  _has_bits_[0] |= 0x00000008u;
}
void SampleIDToTileDBIDMap::clear_has_sample_vcf_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void SampleIDToTileDBIDMap::clear_sample_vcf_index() {
  sample_vcf_index_ = 0;
  clear_has_sample_vcf_index();
}
::google::protobuf::int32 SampleIDToTileDBIDMap::sample_vcf_index() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.sample_vcf_index)
  return sample_vcf_index_;
}
void SampleIDToTileDBIDMap::set_sample_vcf_index(::google::protobuf::int32 value) {
  set_has_sample_vcf_index();
  sample_vcf_index_ = value;
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.sample_vcf_index)
}

// optional string stream_name = 4;
bool SampleIDToTileDBIDMap::has_stream_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SampleIDToTileDBIDMap::set_has_stream_name() {
  _has_bits_[0] |= 0x00000002u;
}
void SampleIDToTileDBIDMap::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void SampleIDToTileDBIDMap::clear_stream_name() {
  stream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_name();
}
const ::std::string& SampleIDToTileDBIDMap::stream_name() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.stream_name)
  return stream_name_.GetNoArena();
}
void SampleIDToTileDBIDMap::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.stream_name)
}
#if LANG_CXX11
void SampleIDToTileDBIDMap::set_stream_name(::std::string&& value) {
  set_has_stream_name();
  stream_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SampleIDToTileDBIDMap.stream_name)
}
#endif
void SampleIDToTileDBIDMap::set_stream_name(const char* value) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SampleIDToTileDBIDMap.stream_name)
}
void SampleIDToTileDBIDMap::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SampleIDToTileDBIDMap.stream_name)
}
::std::string* SampleIDToTileDBIDMap::mutable_stream_name() {
  set_has_stream_name();
  // @@protoc_insertion_point(field_mutable:SampleIDToTileDBIDMap.stream_name)
  return stream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SampleIDToTileDBIDMap::release_stream_name() {
  // @@protoc_insertion_point(field_release:SampleIDToTileDBIDMap.stream_name)
  clear_has_stream_name();
  return stream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleIDToTileDBIDMap::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name != NULL) {
    set_has_stream_name();
  } else {
    clear_has_stream_name();
  }
  stream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_name);
  // @@protoc_insertion_point(field_set_allocated:SampleIDToTileDBIDMap.stream_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallsetMap::kCallsetMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallsetMap::CallsetMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CallsetMap)
}
CallsetMap::CallsetMap(const CallsetMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      callset_map_(from.callset_map_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CallsetMap)
}

void CallsetMap::SharedCtor() {
  _cached_size_ = 0;
}

CallsetMap::~CallsetMap() {
  // @@protoc_insertion_point(destructor:CallsetMap)
  SharedDtor();
}

void CallsetMap::SharedDtor() {
}

void CallsetMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallsetMap::descriptor() {
  protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::file_level_metadata[1].descriptor;
}

const CallsetMap& CallsetMap::default_instance() {
  protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::InitDefaults();
  return *internal_default_instance();
}

CallsetMap* CallsetMap::New(::google::protobuf::Arena* arena) const {
  CallsetMap* n = new CallsetMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallsetMap::Clear() {
// @@protoc_insertion_point(message_clear_start:CallsetMap)
  callset_map_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CallsetMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CallsetMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SampleIDToTileDBIDMap callset_map = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_callset_map()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CallsetMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CallsetMap)
  return false;
#undef DO_
}

void CallsetMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CallsetMap)
  // repeated .SampleIDToTileDBIDMap callset_map = 1;
  for (unsigned int i = 0, n = this->callset_map_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->callset_map(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CallsetMap)
}

::google::protobuf::uint8* CallsetMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CallsetMap)
  // repeated .SampleIDToTileDBIDMap callset_map = 1;
  for (unsigned int i = 0, n = this->callset_map_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->callset_map(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CallsetMap)
  return target;
}

size_t CallsetMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CallsetMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SampleIDToTileDBIDMap callset_map = 1;
  {
    unsigned int count = this->callset_map_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callset_map(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallsetMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CallsetMap)
  GOOGLE_DCHECK_NE(&from, this);
  const CallsetMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallsetMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CallsetMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CallsetMap)
    MergeFrom(*source);
  }
}

void CallsetMap::MergeFrom(const CallsetMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CallsetMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  callset_map_.MergeFrom(from.callset_map_);
}

void CallsetMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CallsetMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallsetMap::CopyFrom(const CallsetMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CallsetMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallsetMap::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->callset_map())) return false;
  return true;
}

void CallsetMap::Swap(CallsetMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallsetMap::InternalSwap(CallsetMap* other) {
  callset_map_.UnsafeArenaSwap(&other->callset_map_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallsetMap::GetMetadata() const {
  protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallsetMap

// repeated .SampleIDToTileDBIDMap callset_map = 1;
int CallsetMap::callset_map_size() const {
  return callset_map_.size();
}
void CallsetMap::clear_callset_map() {
  callset_map_.Clear();
}
const ::SampleIDToTileDBIDMap& CallsetMap::callset_map(int index) const {
  // @@protoc_insertion_point(field_get:CallsetMap.callset_map)
  return callset_map_.Get(index);
}
::SampleIDToTileDBIDMap* CallsetMap::mutable_callset_map(int index) {
  // @@protoc_insertion_point(field_mutable:CallsetMap.callset_map)
  return callset_map_.Mutable(index);
}
::SampleIDToTileDBIDMap* CallsetMap::add_callset_map() {
  // @@protoc_insertion_point(field_add:CallsetMap.callset_map)
  return callset_map_.Add();
}
::google::protobuf::RepeatedPtrField< ::SampleIDToTileDBIDMap >*
CallsetMap::mutable_callset_map() {
  // @@protoc_insertion_point(field_mutable_list:CallsetMap.callset_map)
  return &callset_map_;
}
const ::google::protobuf::RepeatedPtrField< ::SampleIDToTileDBIDMap >&
CallsetMap::callset_map() const {
  // @@protoc_insertion_point(field_list:CallsetMap.callset_map)
  return callset_map_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
