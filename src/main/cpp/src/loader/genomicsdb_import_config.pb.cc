// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_import_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genomicsdb_import_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TileDBConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TileDBConfig> {
} _TileDBConfig_default_instance_;
class PartitionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Partition> {
} _Partition_default_instance_;
class ImportConfigurationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImportConfiguration> {
} _ImportConfiguration_default_instance_;

namespace protobuf_genomicsdb_5fimport_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileDBConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileDBConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileDBConfig, tiledb_workspace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileDBConfig, tiledb_array_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileDBConfig, compress_tiledb_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileDBConfig, num_cells_per_tile_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, tiledb_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, vcf_file_name_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, row_based_partitioning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, produce_combined_vcf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, produce_tiledb_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, column_partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, vid_mapping_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, callset_mapping_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, size_per_column_partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, treat_deletions_as_intervals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, num_parallel_vcf_files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, delete_and_create_tiledb_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, do_ping_pong_buffering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, offload_vcf_output_processing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, discard_vcf_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, segment_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, tiledb_config_),
  3,
  4,
  8,
  ~0u,
  0,
  1,
  7,
  9,
  12,
  5,
  10,
  11,
  6,
  13,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(TileDBConfig)},
  { 12, 19, sizeof(Partition)},
  { 22, 41, sizeof(ImportConfiguration)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TileDBConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Partition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImportConfiguration_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "genomicsdb_import_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _TileDBConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Partition_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ImportConfiguration_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TileDBConfig_default_instance_.DefaultConstruct();
  _Partition_default_instance_.DefaultConstruct();
  _ImportConfiguration_default_instance_.DefaultConstruct();
  _Partition_default_instance_.get_mutable()->tiledb_config_ = const_cast< ::TileDBConfig*>(
      ::TileDBConfig::internal_default_instance());
  _ImportConfiguration_default_instance_.get_mutable()->tiledb_config_ = const_cast< ::TileDBConfig*>(
      ::TileDBConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\036genomicsdb_import_config.proto\"\212\001\n\014Til"
      "eDBConfig\022\030\n\020tiledb_workspace\030\001 \001(\t\022\031\n\021t"
      "iledb_array_name\030\002 \001(\t\022#\n\025compress_tiled"
      "b_array\030\003 \001(\010:\004true\022 \n\022num_cells_per_til"
      "e\030\004 \001(\003:\0041000\"W\n\tPartition\022\r\n\005begin\030\001 \002("
      "\003\022$\n\rtiledb_config\030\002 \001(\0132\r.TileDBConfig\022"
      "\025\n\rvcf_file_name\030\003 \001(\t\"\305\004\n\023ImportConfigu"
      "ration\022%\n\026row_based_partitioning\030\001 \002(\010:\005"
      "false\022#\n\024produce_combined_vcf\030\002 \001(\010:\005fal"
      "se\022\"\n\024produce_tiledb_array\030\003 \001(\010:\004true\022%"
      "\n\021column_partitions\030\004 \003(\0132\n.Partition\022\030\n"
      "\020vid_mapping_file\030\005 \001(\t\022\034\n\024callset_mappi"
      "ng_file\030\006 \001(\t\022\'\n\031size_per_column_partiti"
      "on\030\007 \001(\003:\0043000\022*\n\034treat_deletions_as_int"
      "ervals\030\010 \001(\010:\004true\022!\n\026num_parallel_vcf_f"
      "iles\030\t \001(\005:\0011\022-\n\036delete_and_create_tiled"
      "b_array\030\n \001(\010:\005false\022$\n\026do_ping_pong_buf"
      "fering\030\013 \001(\010:\004true\022+\n\035offload_vcf_output"
      "_processing\030\014 \001(\010:\004true\022\037\n\021discard_vcf_i"
      "ndex\030\r \001(\010:\004true\022\036\n\014segment_size\030\016 \001(\003:\010"
      "10485760\022$\n\rtiledb_config\030\017 \001(\0132\r.TileDB"
      "ConfigB5\n\024com.intel.genomicsdbB\035Genomics"
      "DBImportConfiguration"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomicsdb_import_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_genomicsdb_5fimport_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileDBConfig::kTiledbWorkspaceFieldNumber;
const int TileDBConfig::kTiledbArrayNameFieldNumber;
const int TileDBConfig::kCompressTiledbArrayFieldNumber;
const int TileDBConfig::kNumCellsPerTileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileDBConfig::TileDBConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fimport_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TileDBConfig)
}
TileDBConfig::TileDBConfig(const TileDBConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tiledb_workspace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tiledb_workspace()) {
    tiledb_workspace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tiledb_workspace_);
  }
  tiledb_array_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tiledb_array_name()) {
    tiledb_array_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tiledb_array_name_);
  }
  ::memcpy(&compress_tiledb_array_, &from.compress_tiledb_array_,
    reinterpret_cast<char*>(&num_cells_per_tile_) -
    reinterpret_cast<char*>(&compress_tiledb_array_) + sizeof(num_cells_per_tile_));
  // @@protoc_insertion_point(copy_constructor:TileDBConfig)
}

void TileDBConfig::SharedCtor() {
  _cached_size_ = 0;
  tiledb_workspace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tiledb_array_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compress_tiledb_array_ = true;
  num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
}

TileDBConfig::~TileDBConfig() {
  // @@protoc_insertion_point(destructor:TileDBConfig)
  SharedDtor();
}

void TileDBConfig::SharedDtor() {
  tiledb_workspace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tiledb_array_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TileDBConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileDBConfig::descriptor() {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fimport_5fconfig_2eproto::file_level_metadata[0].descriptor;
}

const TileDBConfig& TileDBConfig::default_instance() {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TileDBConfig* TileDBConfig::New(::google::protobuf::Arena* arena) const {
  TileDBConfig* n = new TileDBConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TileDBConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:TileDBConfig)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_tiledb_workspace()) {
      GOOGLE_DCHECK(!tiledb_workspace_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tiledb_workspace_.UnsafeRawStringPointer())->clear();
    }
    if (has_tiledb_array_name()) {
      GOOGLE_DCHECK(!tiledb_array_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tiledb_array_name_.UnsafeRawStringPointer())->clear();
    }
    compress_tiledb_array_ = true;
    num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TileDBConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TileDBConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tiledb_workspace = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiledb_workspace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tiledb_workspace().data(), this->tiledb_workspace().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TileDBConfig.tiledb_workspace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tiledb_array_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiledb_array_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tiledb_array_name().data(), this->tiledb_array_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TileDBConfig.tiledb_array_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compress_tiledb_array = 3 [default = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_compress_tiledb_array();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compress_tiledb_array_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_cells_per_tile = 4 [default = 1000];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_num_cells_per_tile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cells_per_tile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TileDBConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TileDBConfig)
  return false;
#undef DO_
}

void TileDBConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TileDBConfig)
  // optional string tiledb_workspace = 1;
  if (has_tiledb_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tiledb_workspace().data(), this->tiledb_workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TileDBConfig.tiledb_workspace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tiledb_workspace(), output);
  }

  // optional string tiledb_array_name = 2;
  if (has_tiledb_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tiledb_array_name().data(), this->tiledb_array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TileDBConfig.tiledb_array_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tiledb_array_name(), output);
  }

  // optional bool compress_tiledb_array = 3 [default = true];
  if (has_compress_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->compress_tiledb_array(), output);
  }

  // optional int64 num_cells_per_tile = 4 [default = 1000];
  if (has_num_cells_per_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_cells_per_tile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TileDBConfig)
}

::google::protobuf::uint8* TileDBConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TileDBConfig)
  // optional string tiledb_workspace = 1;
  if (has_tiledb_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tiledb_workspace().data(), this->tiledb_workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TileDBConfig.tiledb_workspace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tiledb_workspace(), target);
  }

  // optional string tiledb_array_name = 2;
  if (has_tiledb_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tiledb_array_name().data(), this->tiledb_array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TileDBConfig.tiledb_array_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tiledb_array_name(), target);
  }

  // optional bool compress_tiledb_array = 3 [default = true];
  if (has_compress_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->compress_tiledb_array(), target);
  }

  // optional int64 num_cells_per_tile = 4 [default = 1000];
  if (has_num_cells_per_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_cells_per_tile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TileDBConfig)
  return target;
}

size_t TileDBConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TileDBConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string tiledb_workspace = 1;
    if (has_tiledb_workspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiledb_workspace());
    }

    // optional string tiledb_array_name = 2;
    if (has_tiledb_array_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiledb_array_name());
    }

    // optional bool compress_tiledb_array = 3 [default = true];
    if (has_compress_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional int64 num_cells_per_tile = 4 [default = 1000];
    if (has_num_cells_per_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_cells_per_tile());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileDBConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TileDBConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TileDBConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TileDBConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TileDBConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TileDBConfig)
    MergeFrom(*source);
  }
}

void TileDBConfig::MergeFrom(const TileDBConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TileDBConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_tiledb_workspace()) {
      set_has_tiledb_workspace();
      tiledb_workspace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tiledb_workspace_);
    }
    if (from.has_tiledb_array_name()) {
      set_has_tiledb_array_name();
      tiledb_array_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tiledb_array_name_);
    }
    if (from.has_compress_tiledb_array()) {
      set_compress_tiledb_array(from.compress_tiledb_array());
    }
    if (from.has_num_cells_per_tile()) {
      set_num_cells_per_tile(from.num_cells_per_tile());
    }
  }
}

void TileDBConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TileDBConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileDBConfig::CopyFrom(const TileDBConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TileDBConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileDBConfig::IsInitialized() const {
  return true;
}

void TileDBConfig::Swap(TileDBConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileDBConfig::InternalSwap(TileDBConfig* other) {
  tiledb_workspace_.Swap(&other->tiledb_workspace_);
  tiledb_array_name_.Swap(&other->tiledb_array_name_);
  std::swap(compress_tiledb_array_, other->compress_tiledb_array_);
  std::swap(num_cells_per_tile_, other->num_cells_per_tile_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileDBConfig::GetMetadata() const {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fimport_5fconfig_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TileDBConfig

// optional string tiledb_workspace = 1;
bool TileDBConfig::has_tiledb_workspace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TileDBConfig::set_has_tiledb_workspace() {
  _has_bits_[0] |= 0x00000001u;
}
void TileDBConfig::clear_has_tiledb_workspace() {
  _has_bits_[0] &= ~0x00000001u;
}
void TileDBConfig::clear_tiledb_workspace() {
  tiledb_workspace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tiledb_workspace();
}
const ::std::string& TileDBConfig::tiledb_workspace() const {
  // @@protoc_insertion_point(field_get:TileDBConfig.tiledb_workspace)
  return tiledb_workspace_.GetNoArena();
}
void TileDBConfig::set_tiledb_workspace(const ::std::string& value) {
  set_has_tiledb_workspace();
  tiledb_workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TileDBConfig.tiledb_workspace)
}
#if LANG_CXX11
void TileDBConfig::set_tiledb_workspace(::std::string&& value) {
  set_has_tiledb_workspace();
  tiledb_workspace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TileDBConfig.tiledb_workspace)
}
#endif
void TileDBConfig::set_tiledb_workspace(const char* value) {
  set_has_tiledb_workspace();
  tiledb_workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TileDBConfig.tiledb_workspace)
}
void TileDBConfig::set_tiledb_workspace(const char* value, size_t size) {
  set_has_tiledb_workspace();
  tiledb_workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TileDBConfig.tiledb_workspace)
}
::std::string* TileDBConfig::mutable_tiledb_workspace() {
  set_has_tiledb_workspace();
  // @@protoc_insertion_point(field_mutable:TileDBConfig.tiledb_workspace)
  return tiledb_workspace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TileDBConfig::release_tiledb_workspace() {
  // @@protoc_insertion_point(field_release:TileDBConfig.tiledb_workspace)
  clear_has_tiledb_workspace();
  return tiledb_workspace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TileDBConfig::set_allocated_tiledb_workspace(::std::string* tiledb_workspace) {
  if (tiledb_workspace != NULL) {
    set_has_tiledb_workspace();
  } else {
    clear_has_tiledb_workspace();
  }
  tiledb_workspace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tiledb_workspace);
  // @@protoc_insertion_point(field_set_allocated:TileDBConfig.tiledb_workspace)
}

// optional string tiledb_array_name = 2;
bool TileDBConfig::has_tiledb_array_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TileDBConfig::set_has_tiledb_array_name() {
  _has_bits_[0] |= 0x00000002u;
}
void TileDBConfig::clear_has_tiledb_array_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void TileDBConfig::clear_tiledb_array_name() {
  tiledb_array_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tiledb_array_name();
}
const ::std::string& TileDBConfig::tiledb_array_name() const {
  // @@protoc_insertion_point(field_get:TileDBConfig.tiledb_array_name)
  return tiledb_array_name_.GetNoArena();
}
void TileDBConfig::set_tiledb_array_name(const ::std::string& value) {
  set_has_tiledb_array_name();
  tiledb_array_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TileDBConfig.tiledb_array_name)
}
#if LANG_CXX11
void TileDBConfig::set_tiledb_array_name(::std::string&& value) {
  set_has_tiledb_array_name();
  tiledb_array_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TileDBConfig.tiledb_array_name)
}
#endif
void TileDBConfig::set_tiledb_array_name(const char* value) {
  set_has_tiledb_array_name();
  tiledb_array_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TileDBConfig.tiledb_array_name)
}
void TileDBConfig::set_tiledb_array_name(const char* value, size_t size) {
  set_has_tiledb_array_name();
  tiledb_array_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TileDBConfig.tiledb_array_name)
}
::std::string* TileDBConfig::mutable_tiledb_array_name() {
  set_has_tiledb_array_name();
  // @@protoc_insertion_point(field_mutable:TileDBConfig.tiledb_array_name)
  return tiledb_array_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TileDBConfig::release_tiledb_array_name() {
  // @@protoc_insertion_point(field_release:TileDBConfig.tiledb_array_name)
  clear_has_tiledb_array_name();
  return tiledb_array_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TileDBConfig::set_allocated_tiledb_array_name(::std::string* tiledb_array_name) {
  if (tiledb_array_name != NULL) {
    set_has_tiledb_array_name();
  } else {
    clear_has_tiledb_array_name();
  }
  tiledb_array_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tiledb_array_name);
  // @@protoc_insertion_point(field_set_allocated:TileDBConfig.tiledb_array_name)
}

// optional bool compress_tiledb_array = 3 [default = true];
bool TileDBConfig::has_compress_tiledb_array() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TileDBConfig::set_has_compress_tiledb_array() {
  _has_bits_[0] |= 0x00000004u;
}
void TileDBConfig::clear_has_compress_tiledb_array() {
  _has_bits_[0] &= ~0x00000004u;
}
void TileDBConfig::clear_compress_tiledb_array() {
  compress_tiledb_array_ = true;
  clear_has_compress_tiledb_array();
}
bool TileDBConfig::compress_tiledb_array() const {
  // @@protoc_insertion_point(field_get:TileDBConfig.compress_tiledb_array)
  return compress_tiledb_array_;
}
void TileDBConfig::set_compress_tiledb_array(bool value) {
  set_has_compress_tiledb_array();
  compress_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:TileDBConfig.compress_tiledb_array)
}

// optional int64 num_cells_per_tile = 4 [default = 1000];
bool TileDBConfig::has_num_cells_per_tile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TileDBConfig::set_has_num_cells_per_tile() {
  _has_bits_[0] |= 0x00000008u;
}
void TileDBConfig::clear_has_num_cells_per_tile() {
  _has_bits_[0] &= ~0x00000008u;
}
void TileDBConfig::clear_num_cells_per_tile() {
  num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  clear_has_num_cells_per_tile();
}
::google::protobuf::int64 TileDBConfig::num_cells_per_tile() const {
  // @@protoc_insertion_point(field_get:TileDBConfig.num_cells_per_tile)
  return num_cells_per_tile_;
}
void TileDBConfig::set_num_cells_per_tile(::google::protobuf::int64 value) {
  set_has_num_cells_per_tile();
  num_cells_per_tile_ = value;
  // @@protoc_insertion_point(field_set:TileDBConfig.num_cells_per_tile)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Partition::kBeginFieldNumber;
const int Partition::kTiledbConfigFieldNumber;
const int Partition::kVcfFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Partition::Partition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fimport_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Partition)
}
Partition::Partition(const Partition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vcf_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vcf_file_name()) {
    vcf_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vcf_file_name_);
  }
  if (from.has_tiledb_config()) {
    tiledb_config_ = new ::TileDBConfig(*from.tiledb_config_);
  } else {
    tiledb_config_ = NULL;
  }
  begin_ = from.begin_;
  // @@protoc_insertion_point(copy_constructor:Partition)
}

void Partition::SharedCtor() {
  _cached_size_ = 0;
  vcf_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tiledb_config_, 0, reinterpret_cast<char*>(&begin_) -
    reinterpret_cast<char*>(&tiledb_config_) + sizeof(begin_));
}

Partition::~Partition() {
  // @@protoc_insertion_point(destructor:Partition)
  SharedDtor();
}

void Partition::SharedDtor() {
  vcf_file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tiledb_config_;
  }
}

void Partition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Partition::descriptor() {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fimport_5fconfig_2eproto::file_level_metadata[1].descriptor;
}

const Partition& Partition::default_instance() {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Partition* Partition::New(::google::protobuf::Arena* arena) const {
  Partition* n = new Partition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Partition::Clear() {
// @@protoc_insertion_point(message_clear_start:Partition)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_vcf_file_name()) {
      GOOGLE_DCHECK(!vcf_file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vcf_file_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tiledb_config()) {
      GOOGLE_DCHECK(tiledb_config_ != NULL);
      tiledb_config_->::TileDBConfig::Clear();
    }
  }
  begin_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Partition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Partition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 begin = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TileDBConfig tiledb_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tiledb_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vcf_file_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vcf_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vcf_file_name().data(), this->vcf_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Partition.vcf_file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Partition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Partition)
  return false;
#undef DO_
}

void Partition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Partition)
  // required int64 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // optional .TileDBConfig tiledb_config = 2;
  if (has_tiledb_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tiledb_config_, output);
  }

  // optional string vcf_file_name = 3;
  if (has_vcf_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vcf_file_name().data(), this->vcf_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Partition.vcf_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vcf_file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Partition)
}

::google::protobuf::uint8* Partition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Partition)
  // required int64 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin(), target);
  }

  // optional .TileDBConfig tiledb_config = 2;
  if (has_tiledb_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tiledb_config_, false, target);
  }

  // optional string vcf_file_name = 3;
  if (has_vcf_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vcf_file_name().data(), this->vcf_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Partition.vcf_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vcf_file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Partition)
  return target;
}

size_t Partition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Partition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 begin = 1;
  if (has_begin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string vcf_file_name = 3;
    if (has_vcf_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vcf_file_name());
    }

    // optional .TileDBConfig tiledb_config = 2;
    if (has_tiledb_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tiledb_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Partition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Partition)
  GOOGLE_DCHECK_NE(&from, this);
  const Partition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Partition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Partition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Partition)
    MergeFrom(*source);
  }
}

void Partition::MergeFrom(const Partition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Partition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_vcf_file_name()) {
      set_has_vcf_file_name();
      vcf_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vcf_file_name_);
    }
    if (from.has_tiledb_config()) {
      mutable_tiledb_config()->::TileDBConfig::MergeFrom(from.tiledb_config());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
  }
}

void Partition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Partition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Partition::CopyFrom(const Partition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Partition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void Partition::Swap(Partition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Partition::InternalSwap(Partition* other) {
  vcf_file_name_.Swap(&other->vcf_file_name_);
  std::swap(tiledb_config_, other->tiledb_config_);
  std::swap(begin_, other->begin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Partition::GetMetadata() const {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fimport_5fconfig_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Partition

// required int64 begin = 1;
bool Partition::has_begin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Partition::set_has_begin() {
  _has_bits_[0] |= 0x00000004u;
}
void Partition::clear_has_begin() {
  _has_bits_[0] &= ~0x00000004u;
}
void Partition::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
::google::protobuf::int64 Partition::begin() const {
  // @@protoc_insertion_point(field_get:Partition.begin)
  return begin_;
}
void Partition::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:Partition.begin)
}

// optional .TileDBConfig tiledb_config = 2;
bool Partition::has_tiledb_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Partition::set_has_tiledb_config() {
  _has_bits_[0] |= 0x00000002u;
}
void Partition::clear_has_tiledb_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void Partition::clear_tiledb_config() {
  if (tiledb_config_ != NULL) tiledb_config_->::TileDBConfig::Clear();
  clear_has_tiledb_config();
}
const ::TileDBConfig& Partition::tiledb_config() const {
  // @@protoc_insertion_point(field_get:Partition.tiledb_config)
  return tiledb_config_ != NULL ? *tiledb_config_
                         : *::TileDBConfig::internal_default_instance();
}
::TileDBConfig* Partition::mutable_tiledb_config() {
  set_has_tiledb_config();
  if (tiledb_config_ == NULL) {
    tiledb_config_ = new ::TileDBConfig;
  }
  // @@protoc_insertion_point(field_mutable:Partition.tiledb_config)
  return tiledb_config_;
}
::TileDBConfig* Partition::release_tiledb_config() {
  // @@protoc_insertion_point(field_release:Partition.tiledb_config)
  clear_has_tiledb_config();
  ::TileDBConfig* temp = tiledb_config_;
  tiledb_config_ = NULL;
  return temp;
}
void Partition::set_allocated_tiledb_config(::TileDBConfig* tiledb_config) {
  delete tiledb_config_;
  tiledb_config_ = tiledb_config;
  if (tiledb_config) {
    set_has_tiledb_config();
  } else {
    clear_has_tiledb_config();
  }
  // @@protoc_insertion_point(field_set_allocated:Partition.tiledb_config)
}

// optional string vcf_file_name = 3;
bool Partition::has_vcf_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Partition::set_has_vcf_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Partition::clear_has_vcf_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Partition::clear_vcf_file_name() {
  vcf_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vcf_file_name();
}
const ::std::string& Partition::vcf_file_name() const {
  // @@protoc_insertion_point(field_get:Partition.vcf_file_name)
  return vcf_file_name_.GetNoArena();
}
void Partition::set_vcf_file_name(const ::std::string& value) {
  set_has_vcf_file_name();
  vcf_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Partition.vcf_file_name)
}
#if LANG_CXX11
void Partition::set_vcf_file_name(::std::string&& value) {
  set_has_vcf_file_name();
  vcf_file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Partition.vcf_file_name)
}
#endif
void Partition::set_vcf_file_name(const char* value) {
  set_has_vcf_file_name();
  vcf_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Partition.vcf_file_name)
}
void Partition::set_vcf_file_name(const char* value, size_t size) {
  set_has_vcf_file_name();
  vcf_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Partition.vcf_file_name)
}
::std::string* Partition::mutable_vcf_file_name() {
  set_has_vcf_file_name();
  // @@protoc_insertion_point(field_mutable:Partition.vcf_file_name)
  return vcf_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Partition::release_vcf_file_name() {
  // @@protoc_insertion_point(field_release:Partition.vcf_file_name)
  clear_has_vcf_file_name();
  return vcf_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Partition::set_allocated_vcf_file_name(::std::string* vcf_file_name) {
  if (vcf_file_name != NULL) {
    set_has_vcf_file_name();
  } else {
    clear_has_vcf_file_name();
  }
  vcf_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vcf_file_name);
  // @@protoc_insertion_point(field_set_allocated:Partition.vcf_file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportConfiguration::kRowBasedPartitioningFieldNumber;
const int ImportConfiguration::kProduceCombinedVcfFieldNumber;
const int ImportConfiguration::kProduceTiledbArrayFieldNumber;
const int ImportConfiguration::kColumnPartitionsFieldNumber;
const int ImportConfiguration::kVidMappingFileFieldNumber;
const int ImportConfiguration::kCallsetMappingFileFieldNumber;
const int ImportConfiguration::kSizePerColumnPartitionFieldNumber;
const int ImportConfiguration::kTreatDeletionsAsIntervalsFieldNumber;
const int ImportConfiguration::kNumParallelVcfFilesFieldNumber;
const int ImportConfiguration::kDeleteAndCreateTiledbArrayFieldNumber;
const int ImportConfiguration::kDoPingPongBufferingFieldNumber;
const int ImportConfiguration::kOffloadVcfOutputProcessingFieldNumber;
const int ImportConfiguration::kDiscardVcfIndexFieldNumber;
const int ImportConfiguration::kSegmentSizeFieldNumber;
const int ImportConfiguration::kTiledbConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportConfiguration::ImportConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fimport_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImportConfiguration)
}
ImportConfiguration::ImportConfiguration(const ImportConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      column_partitions_(from.column_partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vid_mapping_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vid_mapping_file()) {
    vid_mapping_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_mapping_file_);
  }
  callset_mapping_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_callset_mapping_file()) {
    callset_mapping_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callset_mapping_file_);
  }
  if (from.has_tiledb_config()) {
    tiledb_config_ = new ::TileDBConfig(*from.tiledb_config_);
  } else {
    tiledb_config_ = NULL;
  }
  ::memcpy(&row_based_partitioning_, &from.row_based_partitioning_,
    reinterpret_cast<char*>(&segment_size_) -
    reinterpret_cast<char*>(&row_based_partitioning_) + sizeof(segment_size_));
  // @@protoc_insertion_point(copy_constructor:ImportConfiguration)
}

void ImportConfiguration::SharedCtor() {
  _cached_size_ = 0;
  vid_mapping_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callset_mapping_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tiledb_config_, 0, reinterpret_cast<char*>(&delete_and_create_tiledb_array_) -
    reinterpret_cast<char*>(&tiledb_config_) + sizeof(delete_and_create_tiledb_array_));
  discard_vcf_index_ = true;
  size_per_column_partition_ = GOOGLE_LONGLONG(3000);
  produce_tiledb_array_ = true;
  treat_deletions_as_intervals_ = true;
  do_ping_pong_buffering_ = true;
  offload_vcf_output_processing_ = true;
  num_parallel_vcf_files_ = 1;
  segment_size_ = GOOGLE_LONGLONG(10485760);
}

ImportConfiguration::~ImportConfiguration() {
  // @@protoc_insertion_point(destructor:ImportConfiguration)
  SharedDtor();
}

void ImportConfiguration::SharedDtor() {
  vid_mapping_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callset_mapping_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tiledb_config_;
  }
}

void ImportConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportConfiguration::descriptor() {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fimport_5fconfig_2eproto::file_level_metadata[2].descriptor;
}

const ImportConfiguration& ImportConfiguration::default_instance() {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImportConfiguration* ImportConfiguration::New(::google::protobuf::Arena* arena) const {
  ImportConfiguration* n = new ImportConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:ImportConfiguration)
  column_partitions_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_vid_mapping_file()) {
      GOOGLE_DCHECK(!vid_mapping_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vid_mapping_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_callset_mapping_file()) {
      GOOGLE_DCHECK(!callset_mapping_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*callset_mapping_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_tiledb_config()) {
      GOOGLE_DCHECK(tiledb_config_ != NULL);
      tiledb_config_->::TileDBConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&row_based_partitioning_, 0, reinterpret_cast<char*>(&delete_and_create_tiledb_array_) -
      reinterpret_cast<char*>(&row_based_partitioning_) + sizeof(delete_and_create_tiledb_array_));
    discard_vcf_index_ = true;
    size_per_column_partition_ = GOOGLE_LONGLONG(3000);
  }
  if (_has_bits_[8 / 32] & 16128u) {
    produce_tiledb_array_ = true;
    treat_deletions_as_intervals_ = true;
    do_ping_pong_buffering_ = true;
    offload_vcf_output_processing_ = true;
    num_parallel_vcf_files_ = 1;
    segment_size_ = GOOGLE_LONGLONG(10485760);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImportConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImportConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool row_based_partitioning = 1 [default = false];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_row_based_partitioning();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_based_partitioning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool produce_combined_vcf = 2 [default = false];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_produce_combined_vcf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &produce_combined_vcf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool produce_tiledb_array = 3 [default = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_produce_tiledb_array();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &produce_tiledb_array_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Partition column_partitions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_column_partitions()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional string vid_mapping_file = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid_mapping_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vid_mapping_file().data(), this->vid_mapping_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ImportConfiguration.vid_mapping_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string callset_mapping_file = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callset_mapping_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callset_mapping_file().data(), this->callset_mapping_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ImportConfiguration.callset_mapping_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 size_per_column_partition = 7 [default = 3000];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(56u)) {
          set_has_size_per_column_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_per_column_partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool treat_deletions_as_intervals = 8 [default = true];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(64u)) {
          set_has_treat_deletions_as_intervals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &treat_deletions_as_intervals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_parallel_vcf_files = 9 [default = 1];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(72u)) {
          set_has_num_parallel_vcf_files();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_parallel_vcf_files_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delete_and_create_tiledb_array = 10 [default = false];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(80u)) {
          set_has_delete_and_create_tiledb_array();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_and_create_tiledb_array_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool do_ping_pong_buffering = 11 [default = true];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(88u)) {
          set_has_do_ping_pong_buffering();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_ping_pong_buffering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool offload_vcf_output_processing = 12 [default = true];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(96u)) {
          set_has_offload_vcf_output_processing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offload_vcf_output_processing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool discard_vcf_index = 13 [default = true];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(104u)) {
          set_has_discard_vcf_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_vcf_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 segment_size = 14 [default = 10485760];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(112u)) {
          set_has_segment_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &segment_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TileDBConfig tiledb_config = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tiledb_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImportConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImportConfiguration)
  return false;
#undef DO_
}

void ImportConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImportConfiguration)
  // required bool row_based_partitioning = 1 [default = false];
  if (has_row_based_partitioning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->row_based_partitioning(), output);
  }

  // optional bool produce_combined_vcf = 2 [default = false];
  if (has_produce_combined_vcf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->produce_combined_vcf(), output);
  }

  // optional bool produce_tiledb_array = 3 [default = true];
  if (has_produce_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->produce_tiledb_array(), output);
  }

  // repeated .Partition column_partitions = 4;
  for (unsigned int i = 0, n = this->column_partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->column_partitions(i), output);
  }

  // optional string vid_mapping_file = 5;
  if (has_vid_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid_mapping_file().data(), this->vid_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImportConfiguration.vid_mapping_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->vid_mapping_file(), output);
  }

  // optional string callset_mapping_file = 6;
  if (has_callset_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callset_mapping_file().data(), this->callset_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImportConfiguration.callset_mapping_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->callset_mapping_file(), output);
  }

  // optional int64 size_per_column_partition = 7 [default = 3000];
  if (has_size_per_column_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->size_per_column_partition(), output);
  }

  // optional bool treat_deletions_as_intervals = 8 [default = true];
  if (has_treat_deletions_as_intervals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->treat_deletions_as_intervals(), output);
  }

  // optional int32 num_parallel_vcf_files = 9 [default = 1];
  if (has_num_parallel_vcf_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_parallel_vcf_files(), output);
  }

  // optional bool delete_and_create_tiledb_array = 10 [default = false];
  if (has_delete_and_create_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->delete_and_create_tiledb_array(), output);
  }

  // optional bool do_ping_pong_buffering = 11 [default = true];
  if (has_do_ping_pong_buffering()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->do_ping_pong_buffering(), output);
  }

  // optional bool offload_vcf_output_processing = 12 [default = true];
  if (has_offload_vcf_output_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->offload_vcf_output_processing(), output);
  }

  // optional bool discard_vcf_index = 13 [default = true];
  if (has_discard_vcf_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->discard_vcf_index(), output);
  }

  // optional int64 segment_size = 14 [default = 10485760];
  if (has_segment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->segment_size(), output);
  }

  // optional .TileDBConfig tiledb_config = 15;
  if (has_tiledb_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->tiledb_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImportConfiguration)
}

::google::protobuf::uint8* ImportConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImportConfiguration)
  // required bool row_based_partitioning = 1 [default = false];
  if (has_row_based_partitioning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->row_based_partitioning(), target);
  }

  // optional bool produce_combined_vcf = 2 [default = false];
  if (has_produce_combined_vcf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->produce_combined_vcf(), target);
  }

  // optional bool produce_tiledb_array = 3 [default = true];
  if (has_produce_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->produce_tiledb_array(), target);
  }

  // repeated .Partition column_partitions = 4;
  for (unsigned int i = 0, n = this->column_partitions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->column_partitions(i), false, target);
  }

  // optional string vid_mapping_file = 5;
  if (has_vid_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid_mapping_file().data(), this->vid_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImportConfiguration.vid_mapping_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->vid_mapping_file(), target);
  }

  // optional string callset_mapping_file = 6;
  if (has_callset_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callset_mapping_file().data(), this->callset_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImportConfiguration.callset_mapping_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->callset_mapping_file(), target);
  }

  // optional int64 size_per_column_partition = 7 [default = 3000];
  if (has_size_per_column_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->size_per_column_partition(), target);
  }

  // optional bool treat_deletions_as_intervals = 8 [default = true];
  if (has_treat_deletions_as_intervals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->treat_deletions_as_intervals(), target);
  }

  // optional int32 num_parallel_vcf_files = 9 [default = 1];
  if (has_num_parallel_vcf_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_parallel_vcf_files(), target);
  }

  // optional bool delete_and_create_tiledb_array = 10 [default = false];
  if (has_delete_and_create_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->delete_and_create_tiledb_array(), target);
  }

  // optional bool do_ping_pong_buffering = 11 [default = true];
  if (has_do_ping_pong_buffering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->do_ping_pong_buffering(), target);
  }

  // optional bool offload_vcf_output_processing = 12 [default = true];
  if (has_offload_vcf_output_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->offload_vcf_output_processing(), target);
  }

  // optional bool discard_vcf_index = 13 [default = true];
  if (has_discard_vcf_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->discard_vcf_index(), target);
  }

  // optional int64 segment_size = 14 [default = 10485760];
  if (has_segment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->segment_size(), target);
  }

  // optional .TileDBConfig tiledb_config = 15;
  if (has_tiledb_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->tiledb_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImportConfiguration)
  return target;
}

size_t ImportConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImportConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool row_based_partitioning = 1 [default = false];
  if (has_row_based_partitioning()) {
    total_size += 1 + 1;
  }
  // repeated .Partition column_partitions = 4;
  {
    unsigned int count = this->column_partitions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column_partitions(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string vid_mapping_file = 5;
    if (has_vid_mapping_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid_mapping_file());
    }

    // optional string callset_mapping_file = 6;
    if (has_callset_mapping_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callset_mapping_file());
    }

    // optional .TileDBConfig tiledb_config = 15;
    if (has_tiledb_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tiledb_config_);
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional bool produce_combined_vcf = 2 [default = false];
    if (has_produce_combined_vcf()) {
      total_size += 1 + 1;
    }

    // optional bool delete_and_create_tiledb_array = 10 [default = false];
    if (has_delete_and_create_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional bool discard_vcf_index = 13 [default = true];
    if (has_discard_vcf_index()) {
      total_size += 1 + 1;
    }

    // optional int64 size_per_column_partition = 7 [default = 3000];
    if (has_size_per_column_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size_per_column_partition());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool produce_tiledb_array = 3 [default = true];
    if (has_produce_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional bool treat_deletions_as_intervals = 8 [default = true];
    if (has_treat_deletions_as_intervals()) {
      total_size += 1 + 1;
    }

    // optional bool do_ping_pong_buffering = 11 [default = true];
    if (has_do_ping_pong_buffering()) {
      total_size += 1 + 1;
    }

    // optional bool offload_vcf_output_processing = 12 [default = true];
    if (has_offload_vcf_output_processing()) {
      total_size += 1 + 1;
    }

    // optional int32 num_parallel_vcf_files = 9 [default = 1];
    if (has_num_parallel_vcf_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_parallel_vcf_files());
    }

    // optional int64 segment_size = 14 [default = 10485760];
    if (has_segment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->segment_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImportConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImportConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImportConfiguration)
    MergeFrom(*source);
  }
}

void ImportConfiguration::MergeFrom(const ImportConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImportConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_partitions_.MergeFrom(from.column_partitions_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_vid_mapping_file()) {
      set_has_vid_mapping_file();
      vid_mapping_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_mapping_file_);
    }
    if (from.has_callset_mapping_file()) {
      set_has_callset_mapping_file();
      callset_mapping_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callset_mapping_file_);
    }
    if (from.has_tiledb_config()) {
      mutable_tiledb_config()->::TileDBConfig::MergeFrom(from.tiledb_config());
    }
    if (from.has_row_based_partitioning()) {
      set_row_based_partitioning(from.row_based_partitioning());
    }
    if (from.has_produce_combined_vcf()) {
      set_produce_combined_vcf(from.produce_combined_vcf());
    }
    if (from.has_delete_and_create_tiledb_array()) {
      set_delete_and_create_tiledb_array(from.delete_and_create_tiledb_array());
    }
    if (from.has_discard_vcf_index()) {
      set_discard_vcf_index(from.discard_vcf_index());
    }
    if (from.has_size_per_column_partition()) {
      set_size_per_column_partition(from.size_per_column_partition());
    }
  }
  if (from._has_bits_[8 / 32] & 16128u) {
    if (from.has_produce_tiledb_array()) {
      set_produce_tiledb_array(from.produce_tiledb_array());
    }
    if (from.has_treat_deletions_as_intervals()) {
      set_treat_deletions_as_intervals(from.treat_deletions_as_intervals());
    }
    if (from.has_do_ping_pong_buffering()) {
      set_do_ping_pong_buffering(from.do_ping_pong_buffering());
    }
    if (from.has_offload_vcf_output_processing()) {
      set_offload_vcf_output_processing(from.offload_vcf_output_processing());
    }
    if (from.has_num_parallel_vcf_files()) {
      set_num_parallel_vcf_files(from.num_parallel_vcf_files());
    }
    if (from.has_segment_size()) {
      set_segment_size(from.segment_size());
    }
  }
}

void ImportConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImportConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportConfiguration::CopyFrom(const ImportConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImportConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->column_partitions())) return false;
  return true;
}

void ImportConfiguration::Swap(ImportConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportConfiguration::InternalSwap(ImportConfiguration* other) {
  column_partitions_.UnsafeArenaSwap(&other->column_partitions_);
  vid_mapping_file_.Swap(&other->vid_mapping_file_);
  callset_mapping_file_.Swap(&other->callset_mapping_file_);
  std::swap(tiledb_config_, other->tiledb_config_);
  std::swap(row_based_partitioning_, other->row_based_partitioning_);
  std::swap(produce_combined_vcf_, other->produce_combined_vcf_);
  std::swap(delete_and_create_tiledb_array_, other->delete_and_create_tiledb_array_);
  std::swap(discard_vcf_index_, other->discard_vcf_index_);
  std::swap(size_per_column_partition_, other->size_per_column_partition_);
  std::swap(produce_tiledb_array_, other->produce_tiledb_array_);
  std::swap(treat_deletions_as_intervals_, other->treat_deletions_as_intervals_);
  std::swap(do_ping_pong_buffering_, other->do_ping_pong_buffering_);
  std::swap(offload_vcf_output_processing_, other->offload_vcf_output_processing_);
  std::swap(num_parallel_vcf_files_, other->num_parallel_vcf_files_);
  std::swap(segment_size_, other->segment_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportConfiguration::GetMetadata() const {
  protobuf_genomicsdb_5fimport_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fimport_5fconfig_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportConfiguration

// required bool row_based_partitioning = 1 [default = false];
bool ImportConfiguration::has_row_based_partitioning() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImportConfiguration::set_has_row_based_partitioning() {
  _has_bits_[0] |= 0x00000008u;
}
void ImportConfiguration::clear_has_row_based_partitioning() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImportConfiguration::clear_row_based_partitioning() {
  row_based_partitioning_ = false;
  clear_has_row_based_partitioning();
}
bool ImportConfiguration::row_based_partitioning() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.row_based_partitioning)
  return row_based_partitioning_;
}
void ImportConfiguration::set_row_based_partitioning(bool value) {
  set_has_row_based_partitioning();
  row_based_partitioning_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.row_based_partitioning)
}

// optional bool produce_combined_vcf = 2 [default = false];
bool ImportConfiguration::has_produce_combined_vcf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImportConfiguration::set_has_produce_combined_vcf() {
  _has_bits_[0] |= 0x00000010u;
}
void ImportConfiguration::clear_has_produce_combined_vcf() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImportConfiguration::clear_produce_combined_vcf() {
  produce_combined_vcf_ = false;
  clear_has_produce_combined_vcf();
}
bool ImportConfiguration::produce_combined_vcf() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.produce_combined_vcf)
  return produce_combined_vcf_;
}
void ImportConfiguration::set_produce_combined_vcf(bool value) {
  set_has_produce_combined_vcf();
  produce_combined_vcf_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.produce_combined_vcf)
}

// optional bool produce_tiledb_array = 3 [default = true];
bool ImportConfiguration::has_produce_tiledb_array() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImportConfiguration::set_has_produce_tiledb_array() {
  _has_bits_[0] |= 0x00000100u;
}
void ImportConfiguration::clear_has_produce_tiledb_array() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImportConfiguration::clear_produce_tiledb_array() {
  produce_tiledb_array_ = true;
  clear_has_produce_tiledb_array();
}
bool ImportConfiguration::produce_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.produce_tiledb_array)
  return produce_tiledb_array_;
}
void ImportConfiguration::set_produce_tiledb_array(bool value) {
  set_has_produce_tiledb_array();
  produce_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.produce_tiledb_array)
}

// repeated .Partition column_partitions = 4;
int ImportConfiguration::column_partitions_size() const {
  return column_partitions_.size();
}
void ImportConfiguration::clear_column_partitions() {
  column_partitions_.Clear();
}
const ::Partition& ImportConfiguration::column_partitions(int index) const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.column_partitions)
  return column_partitions_.Get(index);
}
::Partition* ImportConfiguration::mutable_column_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.column_partitions)
  return column_partitions_.Mutable(index);
}
::Partition* ImportConfiguration::add_column_partitions() {
  // @@protoc_insertion_point(field_add:ImportConfiguration.column_partitions)
  return column_partitions_.Add();
}
::google::protobuf::RepeatedPtrField< ::Partition >*
ImportConfiguration::mutable_column_partitions() {
  // @@protoc_insertion_point(field_mutable_list:ImportConfiguration.column_partitions)
  return &column_partitions_;
}
const ::google::protobuf::RepeatedPtrField< ::Partition >&
ImportConfiguration::column_partitions() const {
  // @@protoc_insertion_point(field_list:ImportConfiguration.column_partitions)
  return column_partitions_;
}

// optional string vid_mapping_file = 5;
bool ImportConfiguration::has_vid_mapping_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImportConfiguration::set_has_vid_mapping_file() {
  _has_bits_[0] |= 0x00000001u;
}
void ImportConfiguration::clear_has_vid_mapping_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImportConfiguration::clear_vid_mapping_file() {
  vid_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid_mapping_file();
}
const ::std::string& ImportConfiguration::vid_mapping_file() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.vid_mapping_file)
  return vid_mapping_file_.GetNoArena();
}
void ImportConfiguration::set_vid_mapping_file(const ::std::string& value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImportConfiguration.vid_mapping_file)
}
#if LANG_CXX11
void ImportConfiguration::set_vid_mapping_file(::std::string&& value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImportConfiguration.vid_mapping_file)
}
#endif
void ImportConfiguration::set_vid_mapping_file(const char* value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImportConfiguration.vid_mapping_file)
}
void ImportConfiguration::set_vid_mapping_file(const char* value, size_t size) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImportConfiguration.vid_mapping_file)
}
::std::string* ImportConfiguration::mutable_vid_mapping_file() {
  set_has_vid_mapping_file();
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.vid_mapping_file)
  return vid_mapping_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImportConfiguration::release_vid_mapping_file() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.vid_mapping_file)
  clear_has_vid_mapping_file();
  return vid_mapping_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportConfiguration::set_allocated_vid_mapping_file(::std::string* vid_mapping_file) {
  if (vid_mapping_file != NULL) {
    set_has_vid_mapping_file();
  } else {
    clear_has_vid_mapping_file();
  }
  vid_mapping_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid_mapping_file);
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.vid_mapping_file)
}

// optional string callset_mapping_file = 6;
bool ImportConfiguration::has_callset_mapping_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImportConfiguration::set_has_callset_mapping_file() {
  _has_bits_[0] |= 0x00000002u;
}
void ImportConfiguration::clear_has_callset_mapping_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImportConfiguration::clear_callset_mapping_file() {
  callset_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callset_mapping_file();
}
const ::std::string& ImportConfiguration::callset_mapping_file() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.callset_mapping_file)
  return callset_mapping_file_.GetNoArena();
}
void ImportConfiguration::set_callset_mapping_file(const ::std::string& value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImportConfiguration.callset_mapping_file)
}
#if LANG_CXX11
void ImportConfiguration::set_callset_mapping_file(::std::string&& value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImportConfiguration.callset_mapping_file)
}
#endif
void ImportConfiguration::set_callset_mapping_file(const char* value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImportConfiguration.callset_mapping_file)
}
void ImportConfiguration::set_callset_mapping_file(const char* value, size_t size) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImportConfiguration.callset_mapping_file)
}
::std::string* ImportConfiguration::mutable_callset_mapping_file() {
  set_has_callset_mapping_file();
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.callset_mapping_file)
  return callset_mapping_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImportConfiguration::release_callset_mapping_file() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.callset_mapping_file)
  clear_has_callset_mapping_file();
  return callset_mapping_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportConfiguration::set_allocated_callset_mapping_file(::std::string* callset_mapping_file) {
  if (callset_mapping_file != NULL) {
    set_has_callset_mapping_file();
  } else {
    clear_has_callset_mapping_file();
  }
  callset_mapping_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callset_mapping_file);
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.callset_mapping_file)
}

// optional int64 size_per_column_partition = 7 [default = 3000];
bool ImportConfiguration::has_size_per_column_partition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImportConfiguration::set_has_size_per_column_partition() {
  _has_bits_[0] |= 0x00000080u;
}
void ImportConfiguration::clear_has_size_per_column_partition() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImportConfiguration::clear_size_per_column_partition() {
  size_per_column_partition_ = GOOGLE_LONGLONG(3000);
  clear_has_size_per_column_partition();
}
::google::protobuf::int64 ImportConfiguration::size_per_column_partition() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.size_per_column_partition)
  return size_per_column_partition_;
}
void ImportConfiguration::set_size_per_column_partition(::google::protobuf::int64 value) {
  set_has_size_per_column_partition();
  size_per_column_partition_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.size_per_column_partition)
}

// optional bool treat_deletions_as_intervals = 8 [default = true];
bool ImportConfiguration::has_treat_deletions_as_intervals() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImportConfiguration::set_has_treat_deletions_as_intervals() {
  _has_bits_[0] |= 0x00000200u;
}
void ImportConfiguration::clear_has_treat_deletions_as_intervals() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImportConfiguration::clear_treat_deletions_as_intervals() {
  treat_deletions_as_intervals_ = true;
  clear_has_treat_deletions_as_intervals();
}
bool ImportConfiguration::treat_deletions_as_intervals() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.treat_deletions_as_intervals)
  return treat_deletions_as_intervals_;
}
void ImportConfiguration::set_treat_deletions_as_intervals(bool value) {
  set_has_treat_deletions_as_intervals();
  treat_deletions_as_intervals_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.treat_deletions_as_intervals)
}

// optional int32 num_parallel_vcf_files = 9 [default = 1];
bool ImportConfiguration::has_num_parallel_vcf_files() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ImportConfiguration::set_has_num_parallel_vcf_files() {
  _has_bits_[0] |= 0x00001000u;
}
void ImportConfiguration::clear_has_num_parallel_vcf_files() {
  _has_bits_[0] &= ~0x00001000u;
}
void ImportConfiguration::clear_num_parallel_vcf_files() {
  num_parallel_vcf_files_ = 1;
  clear_has_num_parallel_vcf_files();
}
::google::protobuf::int32 ImportConfiguration::num_parallel_vcf_files() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.num_parallel_vcf_files)
  return num_parallel_vcf_files_;
}
void ImportConfiguration::set_num_parallel_vcf_files(::google::protobuf::int32 value) {
  set_has_num_parallel_vcf_files();
  num_parallel_vcf_files_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.num_parallel_vcf_files)
}

// optional bool delete_and_create_tiledb_array = 10 [default = false];
bool ImportConfiguration::has_delete_and_create_tiledb_array() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImportConfiguration::set_has_delete_and_create_tiledb_array() {
  _has_bits_[0] |= 0x00000020u;
}
void ImportConfiguration::clear_has_delete_and_create_tiledb_array() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImportConfiguration::clear_delete_and_create_tiledb_array() {
  delete_and_create_tiledb_array_ = false;
  clear_has_delete_and_create_tiledb_array();
}
bool ImportConfiguration::delete_and_create_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.delete_and_create_tiledb_array)
  return delete_and_create_tiledb_array_;
}
void ImportConfiguration::set_delete_and_create_tiledb_array(bool value) {
  set_has_delete_and_create_tiledb_array();
  delete_and_create_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.delete_and_create_tiledb_array)
}

// optional bool do_ping_pong_buffering = 11 [default = true];
bool ImportConfiguration::has_do_ping_pong_buffering() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImportConfiguration::set_has_do_ping_pong_buffering() {
  _has_bits_[0] |= 0x00000400u;
}
void ImportConfiguration::clear_has_do_ping_pong_buffering() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImportConfiguration::clear_do_ping_pong_buffering() {
  do_ping_pong_buffering_ = true;
  clear_has_do_ping_pong_buffering();
}
bool ImportConfiguration::do_ping_pong_buffering() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.do_ping_pong_buffering)
  return do_ping_pong_buffering_;
}
void ImportConfiguration::set_do_ping_pong_buffering(bool value) {
  set_has_do_ping_pong_buffering();
  do_ping_pong_buffering_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.do_ping_pong_buffering)
}

// optional bool offload_vcf_output_processing = 12 [default = true];
bool ImportConfiguration::has_offload_vcf_output_processing() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImportConfiguration::set_has_offload_vcf_output_processing() {
  _has_bits_[0] |= 0x00000800u;
}
void ImportConfiguration::clear_has_offload_vcf_output_processing() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImportConfiguration::clear_offload_vcf_output_processing() {
  offload_vcf_output_processing_ = true;
  clear_has_offload_vcf_output_processing();
}
bool ImportConfiguration::offload_vcf_output_processing() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.offload_vcf_output_processing)
  return offload_vcf_output_processing_;
}
void ImportConfiguration::set_offload_vcf_output_processing(bool value) {
  set_has_offload_vcf_output_processing();
  offload_vcf_output_processing_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.offload_vcf_output_processing)
}

// optional bool discard_vcf_index = 13 [default = true];
bool ImportConfiguration::has_discard_vcf_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImportConfiguration::set_has_discard_vcf_index() {
  _has_bits_[0] |= 0x00000040u;
}
void ImportConfiguration::clear_has_discard_vcf_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImportConfiguration::clear_discard_vcf_index() {
  discard_vcf_index_ = true;
  clear_has_discard_vcf_index();
}
bool ImportConfiguration::discard_vcf_index() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.discard_vcf_index)
  return discard_vcf_index_;
}
void ImportConfiguration::set_discard_vcf_index(bool value) {
  set_has_discard_vcf_index();
  discard_vcf_index_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.discard_vcf_index)
}

// optional int64 segment_size = 14 [default = 10485760];
bool ImportConfiguration::has_segment_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ImportConfiguration::set_has_segment_size() {
  _has_bits_[0] |= 0x00002000u;
}
void ImportConfiguration::clear_has_segment_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void ImportConfiguration::clear_segment_size() {
  segment_size_ = GOOGLE_LONGLONG(10485760);
  clear_has_segment_size();
}
::google::protobuf::int64 ImportConfiguration::segment_size() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.segment_size)
  return segment_size_;
}
void ImportConfiguration::set_segment_size(::google::protobuf::int64 value) {
  set_has_segment_size();
  segment_size_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.segment_size)
}

// optional .TileDBConfig tiledb_config = 15;
bool ImportConfiguration::has_tiledb_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImportConfiguration::set_has_tiledb_config() {
  _has_bits_[0] |= 0x00000004u;
}
void ImportConfiguration::clear_has_tiledb_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImportConfiguration::clear_tiledb_config() {
  if (tiledb_config_ != NULL) tiledb_config_->::TileDBConfig::Clear();
  clear_has_tiledb_config();
}
const ::TileDBConfig& ImportConfiguration::tiledb_config() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.tiledb_config)
  return tiledb_config_ != NULL ? *tiledb_config_
                         : *::TileDBConfig::internal_default_instance();
}
::TileDBConfig* ImportConfiguration::mutable_tiledb_config() {
  set_has_tiledb_config();
  if (tiledb_config_ == NULL) {
    tiledb_config_ = new ::TileDBConfig;
  }
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.tiledb_config)
  return tiledb_config_;
}
::TileDBConfig* ImportConfiguration::release_tiledb_config() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.tiledb_config)
  clear_has_tiledb_config();
  ::TileDBConfig* temp = tiledb_config_;
  tiledb_config_ = NULL;
  return temp;
}
void ImportConfiguration::set_allocated_tiledb_config(::TileDBConfig* tiledb_config) {
  delete tiledb_config_;
  tiledb_config_ = tiledb_config;
  if (tiledb_config) {
    set_has_tiledb_config();
  } else {
    clear_has_tiledb_config();
  }
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.tiledb_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
