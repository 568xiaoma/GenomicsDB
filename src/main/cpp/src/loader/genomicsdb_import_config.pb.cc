// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_import_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genomicsdb_import_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace intel {
namespace genomicsdb {

namespace {

const ::google::protobuf::Descriptor* Partition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Partition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportConfiguration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto() {
  protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "genomicsdb_import_config.proto");
  GOOGLE_CHECK(file != NULL);
  Partition_descriptor_ = file->message_type(0);
  static const int Partition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, tiledb_workspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, tiledb_array_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, vcf_file_name_),
  };
  Partition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Partition_descriptor_,
      Partition::default_instance_,
      Partition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Partition));
  ImportConfiguration_descriptor_ = file->message_type(1);
  static const int ImportConfiguration_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, tiledb_workspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, row_based_partitioning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, produce_combined_vcf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, produce_tiledb_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, vid_mapping_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, callset_mapping_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, size_per_column_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, treat_deletions_as_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, num_parallel_vcf_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, delete_and_create_tiledb_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, do_ping_pong_buffering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, offload_vcf_output_processing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, discard_vcf_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, compress_tiledb_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, segment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, num_cells_per_tile_),
  };
  ImportConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImportConfiguration_descriptor_,
      ImportConfiguration::default_instance_,
      ImportConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImportConfiguration));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Partition_descriptor_, &Partition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImportConfiguration_descriptor_, &ImportConfiguration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto() {
  delete Partition::default_instance_;
  delete Partition_reflection_;
  delete ImportConfiguration::default_instance_;
  delete ImportConfiguration_reflection_;
}

void protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036genomicsdb_import_config.proto\022\024com.in"
    "tel.genomicsdb\"f\n\tPartition\022\r\n\005begin\030\001 \002"
    "(\003\022\030\n\020tiledb_workspace\030\002 \001(\t\022\031\n\021tiledb_a"
    "rray_name\030\003 \001(\t\022\025\n\rvcf_file_name\030\004 \001(\t\"\216"
    "\005\n\023ImportConfiguration\022\030\n\020tiledb_workspa"
    "ce\030\001 \002(\t\022%\n\026row_based_partitioning\030\002 \002(\010"
    ":\005false\022#\n\024produce_combined_vcf\030\003 \001(\010:\005f"
    "alse\022\"\n\024produce_tiledb_array\030\004 \001(\010:\004true"
    "\0223\n\npartitions\030\005 \003(\0132\037.com.intel.genomic"
    "sdb.Partition\022\030\n\020vid_mapping_file\030\006 \001(\t\022"
    "\034\n\024callset_mapping_file\030\007 \001(\t\022\'\n\031size_pe"
    "r_column_partition\030\010 \001(\003:\0043000\022*\n\034treat_"
    "deletions_as_intervals\030\t \001(\010:\004true\022!\n\026nu"
    "m_parallel_vcf_files\030\n \001(\005:\0011\022-\n\036delete_"
    "and_create_tiledb_array\030\013 \001(\010:\005false\022$\n\026"
    "do_ping_pong_buffering\030\014 \001(\010:\004true\022+\n\035of"
    "fload_vcf_output_processing\030\r \001(\010:\004true\022"
    "\037\n\021discard_vcf_index\030\016 \001(\010:\004true\022#\n\025comp"
    "ress_tiledb_array\030\017 \001(\010:\004true\022\036\n\014segment"
    "_size\030\020 \001(\003:\01010485760\022 \n\022num_cells_per_t"
    "ile\030\021 \001(\003:\0041000B\037B\035GenomicsDBImportConfi"
    "guration", 848);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomicsdb_import_config.proto", &protobuf_RegisterTypes);
  Partition::default_instance_ = new Partition();
  ImportConfiguration::default_instance_ = new ImportConfiguration();
  Partition::default_instance_->InitAsDefaultInstance();
  ImportConfiguration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_genomicsdb_5fimport_5fconfig_2eproto {
  StaticDescriptorInitializer_genomicsdb_5fimport_5fconfig_2eproto() {
    protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  }
} static_descriptor_initializer_genomicsdb_5fimport_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Partition::kBeginFieldNumber;
const int Partition::kTiledbWorkspaceFieldNumber;
const int Partition::kTiledbArrayNameFieldNumber;
const int Partition::kVcfFileNameFieldNumber;
#endif  // !_MSC_VER

Partition::Partition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Partition::InitAsDefaultInstance() {
}

Partition::Partition(const Partition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Partition::SharedCtor() {
  _cached_size_ = 0;
  begin_ = GOOGLE_LONGLONG(0);
  tiledb_workspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tiledb_array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vcf_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Partition::~Partition() {
  SharedDtor();
}

void Partition::SharedDtor() {
  if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
    delete tiledb_workspace_;
  }
  if (tiledb_array_name_ != &::google::protobuf::internal::kEmptyString) {
    delete tiledb_array_name_;
  }
  if (vcf_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete vcf_file_name_;
  }
  if (this != default_instance_) {
  }
}

void Partition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Partition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Partition_descriptor_;
}

const Partition& Partition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  return *default_instance_;
}

Partition* Partition::default_instance_ = NULL;

Partition* Partition::New() const {
  return new Partition;
}

void Partition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = GOOGLE_LONGLONG(0);
    if (has_tiledb_workspace()) {
      if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
        tiledb_workspace_->clear();
      }
    }
    if (has_tiledb_array_name()) {
      if (tiledb_array_name_ != &::google::protobuf::internal::kEmptyString) {
        tiledb_array_name_->clear();
      }
    }
    if (has_vcf_file_name()) {
      if (vcf_file_name_ != &::google::protobuf::internal::kEmptyString) {
        vcf_file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Partition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tiledb_workspace;
        break;
      }

      // optional string tiledb_workspace = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiledb_workspace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiledb_workspace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiledb_workspace().data(), this->tiledb_workspace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tiledb_array_name;
        break;
      }

      // optional string tiledb_array_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiledb_array_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiledb_array_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiledb_array_name().data(), this->tiledb_array_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vcf_file_name;
        break;
      }

      // optional string vcf_file_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vcf_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vcf_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vcf_file_name().data(), this->vcf_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Partition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // optional string tiledb_workspace = 2;
  if (has_tiledb_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_workspace().data(), this->tiledb_workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tiledb_workspace(), output);
  }

  // optional string tiledb_array_name = 3;
  if (has_tiledb_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_array_name().data(), this->tiledb_array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tiledb_array_name(), output);
  }

  // optional string vcf_file_name = 4;
  if (has_vcf_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vcf_file_name().data(), this->vcf_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->vcf_file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Partition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin(), target);
  }

  // optional string tiledb_workspace = 2;
  if (has_tiledb_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_workspace().data(), this->tiledb_workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tiledb_workspace(), target);
  }

  // optional string tiledb_array_name = 3;
  if (has_tiledb_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_array_name().data(), this->tiledb_array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tiledb_array_name(), target);
  }

  // optional string vcf_file_name = 4;
  if (has_vcf_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vcf_file_name().data(), this->vcf_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vcf_file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Partition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin());
    }

    // optional string tiledb_workspace = 2;
    if (has_tiledb_workspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiledb_workspace());
    }

    // optional string tiledb_array_name = 3;
    if (has_tiledb_array_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiledb_array_name());
    }

    // optional string vcf_file_name = 4;
    if (has_vcf_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vcf_file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Partition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Partition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Partition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Partition::MergeFrom(const Partition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_tiledb_workspace()) {
      set_tiledb_workspace(from.tiledb_workspace());
    }
    if (from.has_tiledb_array_name()) {
      set_tiledb_array_name(from.tiledb_array_name());
    }
    if (from.has_vcf_file_name()) {
      set_vcf_file_name(from.vcf_file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Partition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Partition::CopyFrom(const Partition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Partition::Swap(Partition* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(tiledb_workspace_, other->tiledb_workspace_);
    std::swap(tiledb_array_name_, other->tiledb_array_name_);
    std::swap(vcf_file_name_, other->vcf_file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Partition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Partition_descriptor_;
  metadata.reflection = Partition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImportConfiguration::kTiledbWorkspaceFieldNumber;
const int ImportConfiguration::kRowBasedPartitioningFieldNumber;
const int ImportConfiguration::kProduceCombinedVcfFieldNumber;
const int ImportConfiguration::kProduceTiledbArrayFieldNumber;
const int ImportConfiguration::kPartitionsFieldNumber;
const int ImportConfiguration::kVidMappingFileFieldNumber;
const int ImportConfiguration::kCallsetMappingFileFieldNumber;
const int ImportConfiguration::kSizePerColumnPartitionFieldNumber;
const int ImportConfiguration::kTreatDeletionsAsIntervalsFieldNumber;
const int ImportConfiguration::kNumParallelVcfFilesFieldNumber;
const int ImportConfiguration::kDeleteAndCreateTiledbArrayFieldNumber;
const int ImportConfiguration::kDoPingPongBufferingFieldNumber;
const int ImportConfiguration::kOffloadVcfOutputProcessingFieldNumber;
const int ImportConfiguration::kDiscardVcfIndexFieldNumber;
const int ImportConfiguration::kCompressTiledbArrayFieldNumber;
const int ImportConfiguration::kSegmentSizeFieldNumber;
const int ImportConfiguration::kNumCellsPerTileFieldNumber;
#endif  // !_MSC_VER

ImportConfiguration::ImportConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImportConfiguration::InitAsDefaultInstance() {
}

ImportConfiguration::ImportConfiguration(const ImportConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImportConfiguration::SharedCtor() {
  _cached_size_ = 0;
  tiledb_workspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  row_based_partitioning_ = false;
  produce_combined_vcf_ = false;
  produce_tiledb_array_ = true;
  vid_mapping_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  callset_mapping_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_per_column_partition_ = GOOGLE_LONGLONG(3000);
  treat_deletions_as_intervals_ = true;
  num_parallel_vcf_files_ = 1;
  delete_and_create_tiledb_array_ = false;
  do_ping_pong_buffering_ = true;
  offload_vcf_output_processing_ = true;
  discard_vcf_index_ = true;
  compress_tiledb_array_ = true;
  segment_size_ = GOOGLE_LONGLONG(10485760);
  num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportConfiguration::~ImportConfiguration() {
  SharedDtor();
}

void ImportConfiguration::SharedDtor() {
  if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
    delete tiledb_workspace_;
  }
  if (vid_mapping_file_ != &::google::protobuf::internal::kEmptyString) {
    delete vid_mapping_file_;
  }
  if (callset_mapping_file_ != &::google::protobuf::internal::kEmptyString) {
    delete callset_mapping_file_;
  }
  if (this != default_instance_) {
  }
}

void ImportConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportConfiguration_descriptor_;
}

const ImportConfiguration& ImportConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  return *default_instance_;
}

ImportConfiguration* ImportConfiguration::default_instance_ = NULL;

ImportConfiguration* ImportConfiguration::New() const {
  return new ImportConfiguration;
}

void ImportConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tiledb_workspace()) {
      if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
        tiledb_workspace_->clear();
      }
    }
    row_based_partitioning_ = false;
    produce_combined_vcf_ = false;
    produce_tiledb_array_ = true;
    if (has_vid_mapping_file()) {
      if (vid_mapping_file_ != &::google::protobuf::internal::kEmptyString) {
        vid_mapping_file_->clear();
      }
    }
    if (has_callset_mapping_file()) {
      if (callset_mapping_file_ != &::google::protobuf::internal::kEmptyString) {
        callset_mapping_file_->clear();
      }
    }
    size_per_column_partition_ = GOOGLE_LONGLONG(3000);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    treat_deletions_as_intervals_ = true;
    num_parallel_vcf_files_ = 1;
    delete_and_create_tiledb_array_ = false;
    do_ping_pong_buffering_ = true;
    offload_vcf_output_processing_ = true;
    discard_vcf_index_ = true;
    compress_tiledb_array_ = true;
    segment_size_ = GOOGLE_LONGLONG(10485760);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImportConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tiledb_workspace = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiledb_workspace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiledb_workspace().data(), this->tiledb_workspace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row_based_partitioning;
        break;
      }

      // required bool row_based_partitioning = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_based_partitioning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_based_partitioning_)));
          set_has_row_based_partitioning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_produce_combined_vcf;
        break;
      }

      // optional bool produce_combined_vcf = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produce_combined_vcf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &produce_combined_vcf_)));
          set_has_produce_combined_vcf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_produce_tiledb_array;
        break;
      }

      // optional bool produce_tiledb_array = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produce_tiledb_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &produce_tiledb_array_)));
          set_has_produce_tiledb_array();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_partitions;
        break;
      }

      // repeated .com.intel.genomicsdb.Partition partitions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partitions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_partitions;
        if (input->ExpectTag(50)) goto parse_vid_mapping_file;
        break;
      }

      // optional string vid_mapping_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vid_mapping_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid_mapping_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vid_mapping_file().data(), this->vid_mapping_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_callset_mapping_file;
        break;
      }

      // optional string callset_mapping_file = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callset_mapping_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callset_mapping_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callset_mapping_file().data(), this->callset_mapping_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_size_per_column_partition;
        break;
      }

      // optional int64 size_per_column_partition = 8 [default = 3000];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_per_column_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_per_column_partition_)));
          set_has_size_per_column_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_treat_deletions_as_intervals;
        break;
      }

      // optional bool treat_deletions_as_intervals = 9 [default = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treat_deletions_as_intervals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &treat_deletions_as_intervals_)));
          set_has_treat_deletions_as_intervals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_num_parallel_vcf_files;
        break;
      }

      // optional int32 num_parallel_vcf_files = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_parallel_vcf_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_parallel_vcf_files_)));
          set_has_num_parallel_vcf_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_delete_and_create_tiledb_array;
        break;
      }

      // optional bool delete_and_create_tiledb_array = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_and_create_tiledb_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_and_create_tiledb_array_)));
          set_has_delete_and_create_tiledb_array();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_do_ping_pong_buffering;
        break;
      }

      // optional bool do_ping_pong_buffering = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_ping_pong_buffering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_ping_pong_buffering_)));
          set_has_do_ping_pong_buffering();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_offload_vcf_output_processing;
        break;
      }

      // optional bool offload_vcf_output_processing = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offload_vcf_output_processing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offload_vcf_output_processing_)));
          set_has_offload_vcf_output_processing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_discard_vcf_index;
        break;
      }

      // optional bool discard_vcf_index = 14 [default = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_vcf_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_vcf_index_)));
          set_has_discard_vcf_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_compress_tiledb_array;
        break;
      }

      // optional bool compress_tiledb_array = 15 [default = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compress_tiledb_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compress_tiledb_array_)));
          set_has_compress_tiledb_array();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_segment_size;
        break;
      }

      // optional int64 segment_size = 16 [default = 10485760];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_segment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &segment_size_)));
          set_has_segment_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_num_cells_per_tile;
        break;
      }

      // optional int64 num_cells_per_tile = 17 [default = 1000];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cells_per_tile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cells_per_tile_)));
          set_has_num_cells_per_tile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImportConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tiledb_workspace = 1;
  if (has_tiledb_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_workspace().data(), this->tiledb_workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tiledb_workspace(), output);
  }

  // required bool row_based_partitioning = 2 [default = false];
  if (has_row_based_partitioning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->row_based_partitioning(), output);
  }

  // optional bool produce_combined_vcf = 3 [default = false];
  if (has_produce_combined_vcf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->produce_combined_vcf(), output);
  }

  // optional bool produce_tiledb_array = 4 [default = true];
  if (has_produce_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->produce_tiledb_array(), output);
  }

  // repeated .com.intel.genomicsdb.Partition partitions = 5;
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->partitions(i), output);
  }

  // optional string vid_mapping_file = 6;
  if (has_vid_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid_mapping_file().data(), this->vid_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->vid_mapping_file(), output);
  }

  // optional string callset_mapping_file = 7;
  if (has_callset_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callset_mapping_file().data(), this->callset_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->callset_mapping_file(), output);
  }

  // optional int64 size_per_column_partition = 8 [default = 3000];
  if (has_size_per_column_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->size_per_column_partition(), output);
  }

  // optional bool treat_deletions_as_intervals = 9 [default = true];
  if (has_treat_deletions_as_intervals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->treat_deletions_as_intervals(), output);
  }

  // optional int32 num_parallel_vcf_files = 10 [default = 1];
  if (has_num_parallel_vcf_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_parallel_vcf_files(), output);
  }

  // optional bool delete_and_create_tiledb_array = 11 [default = false];
  if (has_delete_and_create_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->delete_and_create_tiledb_array(), output);
  }

  // optional bool do_ping_pong_buffering = 12 [default = true];
  if (has_do_ping_pong_buffering()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->do_ping_pong_buffering(), output);
  }

  // optional bool offload_vcf_output_processing = 13 [default = true];
  if (has_offload_vcf_output_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->offload_vcf_output_processing(), output);
  }

  // optional bool discard_vcf_index = 14 [default = true];
  if (has_discard_vcf_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->discard_vcf_index(), output);
  }

  // optional bool compress_tiledb_array = 15 [default = true];
  if (has_compress_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->compress_tiledb_array(), output);
  }

  // optional int64 segment_size = 16 [default = 10485760];
  if (has_segment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->segment_size(), output);
  }

  // optional int64 num_cells_per_tile = 17 [default = 1000];
  if (has_num_cells_per_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->num_cells_per_tile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImportConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tiledb_workspace = 1;
  if (has_tiledb_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiledb_workspace().data(), this->tiledb_workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tiledb_workspace(), target);
  }

  // required bool row_based_partitioning = 2 [default = false];
  if (has_row_based_partitioning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->row_based_partitioning(), target);
  }

  // optional bool produce_combined_vcf = 3 [default = false];
  if (has_produce_combined_vcf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->produce_combined_vcf(), target);
  }

  // optional bool produce_tiledb_array = 4 [default = true];
  if (has_produce_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->produce_tiledb_array(), target);
  }

  // repeated .com.intel.genomicsdb.Partition partitions = 5;
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->partitions(i), target);
  }

  // optional string vid_mapping_file = 6;
  if (has_vid_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid_mapping_file().data(), this->vid_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vid_mapping_file(), target);
  }

  // optional string callset_mapping_file = 7;
  if (has_callset_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callset_mapping_file().data(), this->callset_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->callset_mapping_file(), target);
  }

  // optional int64 size_per_column_partition = 8 [default = 3000];
  if (has_size_per_column_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->size_per_column_partition(), target);
  }

  // optional bool treat_deletions_as_intervals = 9 [default = true];
  if (has_treat_deletions_as_intervals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->treat_deletions_as_intervals(), target);
  }

  // optional int32 num_parallel_vcf_files = 10 [default = 1];
  if (has_num_parallel_vcf_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_parallel_vcf_files(), target);
  }

  // optional bool delete_and_create_tiledb_array = 11 [default = false];
  if (has_delete_and_create_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->delete_and_create_tiledb_array(), target);
  }

  // optional bool do_ping_pong_buffering = 12 [default = true];
  if (has_do_ping_pong_buffering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->do_ping_pong_buffering(), target);
  }

  // optional bool offload_vcf_output_processing = 13 [default = true];
  if (has_offload_vcf_output_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->offload_vcf_output_processing(), target);
  }

  // optional bool discard_vcf_index = 14 [default = true];
  if (has_discard_vcf_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->discard_vcf_index(), target);
  }

  // optional bool compress_tiledb_array = 15 [default = true];
  if (has_compress_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->compress_tiledb_array(), target);
  }

  // optional int64 segment_size = 16 [default = 10485760];
  if (has_segment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->segment_size(), target);
  }

  // optional int64 num_cells_per_tile = 17 [default = 1000];
  if (has_num_cells_per_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->num_cells_per_tile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImportConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tiledb_workspace = 1;
    if (has_tiledb_workspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiledb_workspace());
    }

    // required bool row_based_partitioning = 2 [default = false];
    if (has_row_based_partitioning()) {
      total_size += 1 + 1;
    }

    // optional bool produce_combined_vcf = 3 [default = false];
    if (has_produce_combined_vcf()) {
      total_size += 1 + 1;
    }

    // optional bool produce_tiledb_array = 4 [default = true];
    if (has_produce_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional string vid_mapping_file = 6;
    if (has_vid_mapping_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid_mapping_file());
    }

    // optional string callset_mapping_file = 7;
    if (has_callset_mapping_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callset_mapping_file());
    }

    // optional int64 size_per_column_partition = 8 [default = 3000];
    if (has_size_per_column_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size_per_column_partition());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool treat_deletions_as_intervals = 9 [default = true];
    if (has_treat_deletions_as_intervals()) {
      total_size += 1 + 1;
    }

    // optional int32 num_parallel_vcf_files = 10 [default = 1];
    if (has_num_parallel_vcf_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_parallel_vcf_files());
    }

    // optional bool delete_and_create_tiledb_array = 11 [default = false];
    if (has_delete_and_create_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional bool do_ping_pong_buffering = 12 [default = true];
    if (has_do_ping_pong_buffering()) {
      total_size += 1 + 1;
    }

    // optional bool offload_vcf_output_processing = 13 [default = true];
    if (has_offload_vcf_output_processing()) {
      total_size += 1 + 1;
    }

    // optional bool discard_vcf_index = 14 [default = true];
    if (has_discard_vcf_index()) {
      total_size += 1 + 1;
    }

    // optional bool compress_tiledb_array = 15 [default = true];
    if (has_compress_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional int64 segment_size = 16 [default = 10485760];
    if (has_segment_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->segment_size());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 num_cells_per_tile = 17 [default = 1000];
    if (has_num_cells_per_tile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_cells_per_tile());
    }

  }
  // repeated .com.intel.genomicsdb.Partition partitions = 5;
  total_size += 1 * this->partitions_size();
  for (int i = 0; i < this->partitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partitions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImportConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImportConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImportConfiguration::MergeFrom(const ImportConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tiledb_workspace()) {
      set_tiledb_workspace(from.tiledb_workspace());
    }
    if (from.has_row_based_partitioning()) {
      set_row_based_partitioning(from.row_based_partitioning());
    }
    if (from.has_produce_combined_vcf()) {
      set_produce_combined_vcf(from.produce_combined_vcf());
    }
    if (from.has_produce_tiledb_array()) {
      set_produce_tiledb_array(from.produce_tiledb_array());
    }
    if (from.has_vid_mapping_file()) {
      set_vid_mapping_file(from.vid_mapping_file());
    }
    if (from.has_callset_mapping_file()) {
      set_callset_mapping_file(from.callset_mapping_file());
    }
    if (from.has_size_per_column_partition()) {
      set_size_per_column_partition(from.size_per_column_partition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_treat_deletions_as_intervals()) {
      set_treat_deletions_as_intervals(from.treat_deletions_as_intervals());
    }
    if (from.has_num_parallel_vcf_files()) {
      set_num_parallel_vcf_files(from.num_parallel_vcf_files());
    }
    if (from.has_delete_and_create_tiledb_array()) {
      set_delete_and_create_tiledb_array(from.delete_and_create_tiledb_array());
    }
    if (from.has_do_ping_pong_buffering()) {
      set_do_ping_pong_buffering(from.do_ping_pong_buffering());
    }
    if (from.has_offload_vcf_output_processing()) {
      set_offload_vcf_output_processing(from.offload_vcf_output_processing());
    }
    if (from.has_discard_vcf_index()) {
      set_discard_vcf_index(from.discard_vcf_index());
    }
    if (from.has_compress_tiledb_array()) {
      set_compress_tiledb_array(from.compress_tiledb_array());
    }
    if (from.has_segment_size()) {
      set_segment_size(from.segment_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_num_cells_per_tile()) {
      set_num_cells_per_tile(from.num_cells_per_tile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImportConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportConfiguration::CopyFrom(const ImportConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < partitions_size(); i++) {
    if (!this->partitions(i).IsInitialized()) return false;
  }
  return true;
}

void ImportConfiguration::Swap(ImportConfiguration* other) {
  if (other != this) {
    std::swap(tiledb_workspace_, other->tiledb_workspace_);
    std::swap(row_based_partitioning_, other->row_based_partitioning_);
    std::swap(produce_combined_vcf_, other->produce_combined_vcf_);
    std::swap(produce_tiledb_array_, other->produce_tiledb_array_);
    partitions_.Swap(&other->partitions_);
    std::swap(vid_mapping_file_, other->vid_mapping_file_);
    std::swap(callset_mapping_file_, other->callset_mapping_file_);
    std::swap(size_per_column_partition_, other->size_per_column_partition_);
    std::swap(treat_deletions_as_intervals_, other->treat_deletions_as_intervals_);
    std::swap(num_parallel_vcf_files_, other->num_parallel_vcf_files_);
    std::swap(delete_and_create_tiledb_array_, other->delete_and_create_tiledb_array_);
    std::swap(do_ping_pong_buffering_, other->do_ping_pong_buffering_);
    std::swap(offload_vcf_output_processing_, other->offload_vcf_output_processing_);
    std::swap(discard_vcf_index_, other->discard_vcf_index_);
    std::swap(compress_tiledb_array_, other->compress_tiledb_array_);
    std::swap(segment_size_, other->segment_size_);
    std::swap(num_cells_per_tile_, other->num_cells_per_tile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImportConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportConfiguration_descriptor_;
  metadata.reflection = ImportConfiguration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace genomicsdb
}  // namespace intel
}  // namespace com

// @@protoc_insertion_point(global_scope)
