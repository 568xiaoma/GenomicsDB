// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_vid_mapping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genomicsdb_vid_mapping.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class LengthDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Length> {
} _Length_default_instance_;
class InfoFieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoField> {
} _InfoField_default_instance_;
class ChromosomeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chromosome> {
} _Chromosome_default_instance_;
class VidMappingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VidMapping> {
} _VidMapping_default_instance_;

namespace protobuf_genomicsdb_5fvid_5fmapping_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Length, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Length, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Length, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Length, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, vcf_field_class_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, length_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, tiledb_column_offset_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidMapping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidMapping, infofields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidMapping, chromosomes_),
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Length)},
  { 8, 16, sizeof(InfoField)},
  { 20, 27, sizeof(Chromosome)},
  { 30, 36, sizeof(VidMapping)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Length_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Chromosome_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VidMapping_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "genomicsdb_vid_mapping.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Length_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  Length::_default_name_.Shutdown();
  _InfoField_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  InfoField::_default_type_.Shutdown();
  _Chromosome_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _VidMapping_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  Length::_default_name_.DefaultConstruct();
  *Length::_default_name_.get_mutable() = ::std::string("length", 6);
  _Length_default_instance_.DefaultConstruct();
  InfoField::_default_type_.DefaultConstruct();
  *InfoField::_default_type_.get_mutable() = ::std::string("int", 3);
  _InfoField_default_instance_.DefaultConstruct();
  _Chromosome_default_instance_.DefaultConstruct();
  _VidMapping_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\034genomicsdb_vid_mapping.proto\"-\n\006Length"
      "\022\024\n\004name\030\001 \002(\t:\006length\022\r\n\005value\030\002 \002(\t\"Z\n"
      "\tInfoField\022\014\n\004name\030\001 \002(\t\022\021\n\004type\030\002 \002(\t:\003"
      "int\022\034\n\024vcf_field_class_type\030\003 \003(\t\022\016\n\006len"
      "gth\030\004 \001(\t\"H\n\nChromosome\022\014\n\004name\030\001 \002(\t\022\016\n"
      "\006length\030\002 \002(\003\022\034\n\024tiledb_column_offset\030\003 "
      "\002(\003\"N\n\nVidMapping\022\036\n\ninfofields\030\001 \003(\0132\n."
      "InfoField\022 \n\013chromosomes\030\002 \003(\0132\013.Chromos"
      "omeB-\n\024com.intel.genomicsdbB\025GenomicsDBV"
      "idMapProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomicsdb_vid_mapping.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_genomicsdb_5fvid_5fmapping_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> Length::_default_name_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Length::kNameFieldNumber;
const int Length::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Length::Length()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fvid_5fmapping_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Length)
}
Length::Length(const Length& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&Length::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&Length::_default_name_.get(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:Length)
}

void Length::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&Length::_default_name_.get());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Length::~Length() {
  // @@protoc_insertion_point(destructor:Length)
  SharedDtor();
}

void Length::SharedDtor() {
  name_.DestroyNoArena(&Length::_default_name_.get());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Length::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Length::descriptor() {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fvid_5fmapping_2eproto::file_level_metadata[0].descriptor;
}

const Length& Length::default_instance() {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::InitDefaults();
  return *internal_default_instance();
}

Length* Length::New(::google::protobuf::Arena* arena) const {
  Length* n = new Length;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Length::Clear() {
// @@protoc_insertion_point(message_clear_start:Length)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&Length::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&Length::_default_name_.get());
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Length::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Length)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "length"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Length.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Length.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Length)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Length)
  return false;
#undef DO_
}

void Length::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Length)
  // required string name = 1 [default = "length"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Length.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Length.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Length)
}

::google::protobuf::uint8* Length::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Length)
  // required string name = 1 [default = "length"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Length.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Length.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Length)
  return target;
}

size_t Length::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Length)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1 [default = "length"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t Length::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Length)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1 [default = "length"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Length::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Length)
  GOOGLE_DCHECK_NE(&from, this);
  const Length* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Length>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Length)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Length)
    MergeFrom(*source);
  }
}

void Length::MergeFrom(const Length& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Length)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&Length::_default_name_.get(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void Length::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Length)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Length::CopyFrom(const Length& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Length)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Length::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Length::Swap(Length* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Length::InternalSwap(Length* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Length::GetMetadata() const {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fvid_5fmapping_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Length

// required string name = 1 [default = "length"];
bool Length::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Length::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Length::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Length::clear_name() {
  name_.ClearToDefaultNoArena(&Length::_default_name_.get());
  clear_has_name();
}
const ::std::string& Length::name() const {
  // @@protoc_insertion_point(field_get:Length.name)
  return name_.GetNoArena();
}
void Length::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&Length::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:Length.name)
}
#if LANG_CXX11
void Length::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &Length::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Length.name)
}
#endif
void Length::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&Length::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Length.name)
}
void Length::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&Length::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Length.name)
}
::std::string* Length::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Length.name)
  return name_.MutableNoArena(&Length::_default_name_.get());
}
::std::string* Length::release_name() {
  // @@protoc_insertion_point(field_release:Length.name)
  clear_has_name();
  return name_.ReleaseNoArena(&Length::_default_name_.get());
}
void Length::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&Length::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:Length.name)
}

// required string value = 2;
bool Length::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Length::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Length::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Length::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Length::value() const {
  // @@protoc_insertion_point(field_get:Length.value)
  return value_.GetNoArena();
}
void Length::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Length.value)
}
#if LANG_CXX11
void Length::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Length.value)
}
#endif
void Length::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Length.value)
}
void Length::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Length.value)
}
::std::string* Length::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:Length.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Length::release_value() {
  // @@protoc_insertion_point(field_release:Length.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Length::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Length.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> InfoField::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoField::kNameFieldNumber;
const int InfoField::kTypeFieldNumber;
const int InfoField::kVcfFieldClassTypeFieldNumber;
const int InfoField::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoField::InfoField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fvid_5fmapping_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfoField)
}
InfoField::InfoField(const InfoField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vcf_field_class_type_(from.vcf_field_class_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&InfoField::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&InfoField::_default_type_.get(), from.type_);
  }
  length_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_length()) {
    length_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.length_);
  }
  // @@protoc_insertion_point(copy_constructor:InfoField)
}

void InfoField::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&InfoField::_default_type_.get());
  length_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InfoField::~InfoField() {
  // @@protoc_insertion_point(destructor:InfoField)
  SharedDtor();
}

void InfoField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&InfoField::_default_type_.get());
  length_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoField::descriptor() {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fvid_5fmapping_2eproto::file_level_metadata[1].descriptor;
}

const InfoField& InfoField::default_instance() {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoField* InfoField::New(::google::protobuf::Arena* arena) const {
  InfoField* n = new InfoField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoField::Clear() {
// @@protoc_insertion_point(message_clear_start:InfoField)
  vcf_field_class_type_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&InfoField::_default_type_.get()));
      (*type_.UnsafeRawStringPointer())->assign(*&InfoField::_default_type_.get());
    }
    if (has_length()) {
      GOOGLE_DCHECK(!length_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*length_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InfoField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfoField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoField.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 2 [default = "int"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoField.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string vcf_field_class_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vcf_field_class_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vcf_field_class_type(this->vcf_field_class_type_size() - 1).data(),
            this->vcf_field_class_type(this->vcf_field_class_type_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoField.vcf_field_class_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string length = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_length()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->length().data(), this->length().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoField.length");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InfoField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfoField)
  return false;
#undef DO_
}

void InfoField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfoField)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2 [default = "int"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string vcf_field_class_type = 3;
  for (int i = 0, n = this->vcf_field_class_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vcf_field_class_type(i).data(), this->vcf_field_class_type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.vcf_field_class_type");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vcf_field_class_type(i), output);
  }

  // optional string length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->length().data(), this->length().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.length");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InfoField)
}

::google::protobuf::uint8* InfoField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InfoField)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2 [default = "int"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string vcf_field_class_type = 3;
  for (int i = 0, n = this->vcf_field_class_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vcf_field_class_type(i).data(), this->vcf_field_class_type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.vcf_field_class_type");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->vcf_field_class_type(i), target);
  }

  // optional string length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->length().data(), this->length().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.length");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfoField)
  return target;
}

size_t InfoField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InfoField)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required string type = 2 [default = "int"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
size_t InfoField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InfoField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string type = 2 [default = "int"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string vcf_field_class_type = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vcf_field_class_type_size());
  for (int i = 0, n = this->vcf_field_class_type_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vcf_field_class_type(i));
  }

  // optional string length = 4;
  if (has_length()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InfoField)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InfoField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InfoField)
    MergeFrom(*source);
  }
}

void InfoField::MergeFrom(const InfoField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InfoField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vcf_field_class_type_.MergeFrom(from.vcf_field_class_type_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&InfoField::_default_type_.get(), from.type_);
    }
    if (from.has_length()) {
      set_has_length();
      length_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.length_);
    }
  }
}

void InfoField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InfoField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoField::CopyFrom(const InfoField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InfoField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InfoField::Swap(InfoField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoField::InternalSwap(InfoField* other) {
  vcf_field_class_type_.UnsafeArenaSwap(&other->vcf_field_class_type_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  length_.Swap(&other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoField::GetMetadata() const {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fvid_5fmapping_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoField

// required string name = 1;
bool InfoField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfoField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InfoField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfoField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& InfoField::name() const {
  // @@protoc_insertion_point(field_get:InfoField.name)
  return name_.GetNoArena();
}
void InfoField::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InfoField.name)
}
#if LANG_CXX11
void InfoField::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InfoField.name)
}
#endif
void InfoField::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoField.name)
}
void InfoField::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoField.name)
}
::std::string* InfoField::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:InfoField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfoField::release_name() {
  // @@protoc_insertion_point(field_release:InfoField.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfoField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:InfoField.name)
}

// required string type = 2 [default = "int"];
bool InfoField::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InfoField::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void InfoField::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void InfoField::clear_type() {
  type_.ClearToDefaultNoArena(&InfoField::_default_type_.get());
  clear_has_type();
}
const ::std::string& InfoField::type() const {
  // @@protoc_insertion_point(field_get:InfoField.type)
  return type_.GetNoArena();
}
void InfoField::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&InfoField::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:InfoField.type)
}
#if LANG_CXX11
void InfoField::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &InfoField::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InfoField.type)
}
#endif
void InfoField::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&InfoField::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoField.type)
}
void InfoField::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&InfoField::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoField.type)
}
::std::string* InfoField::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:InfoField.type)
  return type_.MutableNoArena(&InfoField::_default_type_.get());
}
::std::string* InfoField::release_type() {
  // @@protoc_insertion_point(field_release:InfoField.type)
  clear_has_type();
  return type_.ReleaseNoArena(&InfoField::_default_type_.get());
}
void InfoField::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&InfoField::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:InfoField.type)
}

// repeated string vcf_field_class_type = 3;
int InfoField::vcf_field_class_type_size() const {
  return vcf_field_class_type_.size();
}
void InfoField::clear_vcf_field_class_type() {
  vcf_field_class_type_.Clear();
}
const ::std::string& InfoField::vcf_field_class_type(int index) const {
  // @@protoc_insertion_point(field_get:InfoField.vcf_field_class_type)
  return vcf_field_class_type_.Get(index);
}
::std::string* InfoField::mutable_vcf_field_class_type(int index) {
  // @@protoc_insertion_point(field_mutable:InfoField.vcf_field_class_type)
  return vcf_field_class_type_.Mutable(index);
}
void InfoField::set_vcf_field_class_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:InfoField.vcf_field_class_type)
  vcf_field_class_type_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void InfoField::set_vcf_field_class_type(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:InfoField.vcf_field_class_type)
  vcf_field_class_type_.Mutable(index)->assign(std::move(value));
}
#endif
void InfoField::set_vcf_field_class_type(int index, const char* value) {
  vcf_field_class_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:InfoField.vcf_field_class_type)
}
void InfoField::set_vcf_field_class_type(int index, const char* value, size_t size) {
  vcf_field_class_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:InfoField.vcf_field_class_type)
}
::std::string* InfoField::add_vcf_field_class_type() {
  // @@protoc_insertion_point(field_add_mutable:InfoField.vcf_field_class_type)
  return vcf_field_class_type_.Add();
}
void InfoField::add_vcf_field_class_type(const ::std::string& value) {
  vcf_field_class_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:InfoField.vcf_field_class_type)
}
#if LANG_CXX11
void InfoField::add_vcf_field_class_type(::std::string&& value) {
  vcf_field_class_type_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:InfoField.vcf_field_class_type)
}
#endif
void InfoField::add_vcf_field_class_type(const char* value) {
  vcf_field_class_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:InfoField.vcf_field_class_type)
}
void InfoField::add_vcf_field_class_type(const char* value, size_t size) {
  vcf_field_class_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:InfoField.vcf_field_class_type)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
InfoField::vcf_field_class_type() const {
  // @@protoc_insertion_point(field_list:InfoField.vcf_field_class_type)
  return vcf_field_class_type_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
InfoField::mutable_vcf_field_class_type() {
  // @@protoc_insertion_point(field_mutable_list:InfoField.vcf_field_class_type)
  return &vcf_field_class_type_;
}

// optional string length = 4;
bool InfoField::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InfoField::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
void InfoField::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void InfoField::clear_length() {
  length_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_length();
}
const ::std::string& InfoField::length() const {
  // @@protoc_insertion_point(field_get:InfoField.length)
  return length_.GetNoArena();
}
void InfoField::set_length(const ::std::string& value) {
  set_has_length();
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InfoField.length)
}
#if LANG_CXX11
void InfoField::set_length(::std::string&& value) {
  set_has_length();
  length_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InfoField.length)
}
#endif
void InfoField::set_length(const char* value) {
  set_has_length();
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoField.length)
}
void InfoField::set_length(const char* value, size_t size) {
  set_has_length();
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoField.length)
}
::std::string* InfoField::mutable_length() {
  set_has_length();
  // @@protoc_insertion_point(field_mutable:InfoField.length)
  return length_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfoField::release_length() {
  // @@protoc_insertion_point(field_release:InfoField.length)
  clear_has_length();
  return length_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfoField::set_allocated_length(::std::string* length) {
  if (length != NULL) {
    set_has_length();
  } else {
    clear_has_length();
  }
  length_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), length);
  // @@protoc_insertion_point(field_set_allocated:InfoField.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chromosome::kNameFieldNumber;
const int Chromosome::kLengthFieldNumber;
const int Chromosome::kTiledbColumnOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chromosome::Chromosome()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fvid_5fmapping_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chromosome)
}
Chromosome::Chromosome(const Chromosome& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&tiledb_column_offset_) -
    reinterpret_cast<char*>(&length_) + sizeof(tiledb_column_offset_));
  // @@protoc_insertion_point(copy_constructor:Chromosome)
}

void Chromosome::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, reinterpret_cast<char*>(&tiledb_column_offset_) -
    reinterpret_cast<char*>(&length_) + sizeof(tiledb_column_offset_));
}

Chromosome::~Chromosome() {
  // @@protoc_insertion_point(destructor:Chromosome)
  SharedDtor();
}

void Chromosome::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Chromosome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chromosome::descriptor() {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fvid_5fmapping_2eproto::file_level_metadata[2].descriptor;
}

const Chromosome& Chromosome::default_instance() {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chromosome* Chromosome::New(::google::protobuf::Arena* arena) const {
  Chromosome* n = new Chromosome;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chromosome::Clear() {
// @@protoc_insertion_point(message_clear_start:Chromosome)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&tiledb_column_offset_) -
      reinterpret_cast<char*>(&length_) + sizeof(tiledb_column_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chromosome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chromosome)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Chromosome.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 length = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 tiledb_column_offset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_tiledb_column_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tiledb_column_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chromosome)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chromosome)
  return false;
#undef DO_
}

void Chromosome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chromosome)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Chromosome.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  // required int64 tiledb_column_offset = 3;
  if (has_tiledb_column_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tiledb_column_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chromosome)
}

::google::protobuf::uint8* Chromosome::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Chromosome)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Chromosome.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  // required int64 tiledb_column_offset = 3;
  if (has_tiledb_column_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tiledb_column_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chromosome)
  return target;
}

size_t Chromosome::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Chromosome)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_length()) {
    // required int64 length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  if (has_tiledb_column_offset()) {
    // required int64 tiledb_column_offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tiledb_column_offset());
  }

  return total_size;
}
size_t Chromosome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chromosome)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());

    // required int64 tiledb_column_offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tiledb_column_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chromosome::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chromosome)
  GOOGLE_DCHECK_NE(&from, this);
  const Chromosome* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chromosome>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chromosome)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chromosome)
    MergeFrom(*source);
  }
}

void Chromosome::MergeFrom(const Chromosome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chromosome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_tiledb_column_offset()) {
      set_tiledb_column_offset(from.tiledb_column_offset());
    }
  }
}

void Chromosome::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chromosome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chromosome::CopyFrom(const Chromosome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chromosome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chromosome::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Chromosome::Swap(Chromosome* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chromosome::InternalSwap(Chromosome* other) {
  name_.Swap(&other->name_);
  std::swap(length_, other->length_);
  std::swap(tiledb_column_offset_, other->tiledb_column_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chromosome::GetMetadata() const {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fvid_5fmapping_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chromosome

// required string name = 1;
bool Chromosome::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chromosome::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Chromosome::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chromosome::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Chromosome::name() const {
  // @@protoc_insertion_point(field_get:Chromosome.name)
  return name_.GetNoArena();
}
void Chromosome::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chromosome.name)
}
#if LANG_CXX11
void Chromosome::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chromosome.name)
}
#endif
void Chromosome::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chromosome.name)
}
void Chromosome::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chromosome.name)
}
::std::string* Chromosome::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Chromosome.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chromosome::release_name() {
  // @@protoc_insertion_point(field_release:Chromosome.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chromosome::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Chromosome.name)
}

// required int64 length = 2;
bool Chromosome::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chromosome::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void Chromosome::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chromosome::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
  clear_has_length();
}
::google::protobuf::int64 Chromosome::length() const {
  // @@protoc_insertion_point(field_get:Chromosome.length)
  return length_;
}
void Chromosome::set_length(::google::protobuf::int64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:Chromosome.length)
}

// required int64 tiledb_column_offset = 3;
bool Chromosome::has_tiledb_column_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Chromosome::set_has_tiledb_column_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void Chromosome::clear_has_tiledb_column_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void Chromosome::clear_tiledb_column_offset() {
  tiledb_column_offset_ = GOOGLE_LONGLONG(0);
  clear_has_tiledb_column_offset();
}
::google::protobuf::int64 Chromosome::tiledb_column_offset() const {
  // @@protoc_insertion_point(field_get:Chromosome.tiledb_column_offset)
  return tiledb_column_offset_;
}
void Chromosome::set_tiledb_column_offset(::google::protobuf::int64 value) {
  set_has_tiledb_column_offset();
  tiledb_column_offset_ = value;
  // @@protoc_insertion_point(field_set:Chromosome.tiledb_column_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VidMapping::kInfofieldsFieldNumber;
const int VidMapping::kChromosomesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VidMapping::VidMapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genomicsdb_5fvid_5fmapping_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VidMapping)
}
VidMapping::VidMapping(const VidMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      infofields_(from.infofields_),
      chromosomes_(from.chromosomes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VidMapping)
}

void VidMapping::SharedCtor() {
  _cached_size_ = 0;
}

VidMapping::~VidMapping() {
  // @@protoc_insertion_point(destructor:VidMapping)
  SharedDtor();
}

void VidMapping::SharedDtor() {
}

void VidMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VidMapping::descriptor() {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fvid_5fmapping_2eproto::file_level_metadata[3].descriptor;
}

const VidMapping& VidMapping::default_instance() {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::InitDefaults();
  return *internal_default_instance();
}

VidMapping* VidMapping::New(::google::protobuf::Arena* arena) const {
  VidMapping* n = new VidMapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VidMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:VidMapping)
  infofields_.Clear();
  chromosomes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VidMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VidMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .InfoField infofields = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_infofields()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Chromosome chromosomes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chromosomes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VidMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VidMapping)
  return false;
#undef DO_
}

void VidMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VidMapping)
  // repeated .InfoField infofields = 1;
  for (unsigned int i = 0, n = this->infofields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infofields(i), output);
  }

  // repeated .Chromosome chromosomes = 2;
  for (unsigned int i = 0, n = this->chromosomes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chromosomes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VidMapping)
}

::google::protobuf::uint8* VidMapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VidMapping)
  // repeated .InfoField infofields = 1;
  for (unsigned int i = 0, n = this->infofields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infofields(i), false, target);
  }

  // repeated .Chromosome chromosomes = 2;
  for (unsigned int i = 0, n = this->chromosomes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->chromosomes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VidMapping)
  return target;
}

size_t VidMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VidMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .InfoField infofields = 1;
  {
    unsigned int count = this->infofields_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infofields(i));
    }
  }

  // repeated .Chromosome chromosomes = 2;
  {
    unsigned int count = this->chromosomes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chromosomes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VidMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VidMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const VidMapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VidMapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VidMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VidMapping)
    MergeFrom(*source);
  }
}

void VidMapping::MergeFrom(const VidMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VidMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  infofields_.MergeFrom(from.infofields_);
  chromosomes_.MergeFrom(from.chromosomes_);
}

void VidMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VidMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VidMapping::CopyFrom(const VidMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VidMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VidMapping::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->infofields())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chromosomes())) return false;
  return true;
}

void VidMapping::Swap(VidMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VidMapping::InternalSwap(VidMapping* other) {
  infofields_.UnsafeArenaSwap(&other->infofields_);
  chromosomes_.UnsafeArenaSwap(&other->chromosomes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VidMapping::GetMetadata() const {
  protobuf_genomicsdb_5fvid_5fmapping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomicsdb_5fvid_5fmapping_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VidMapping

// repeated .InfoField infofields = 1;
int VidMapping::infofields_size() const {
  return infofields_.size();
}
void VidMapping::clear_infofields() {
  infofields_.Clear();
}
const ::InfoField& VidMapping::infofields(int index) const {
  // @@protoc_insertion_point(field_get:VidMapping.infofields)
  return infofields_.Get(index);
}
::InfoField* VidMapping::mutable_infofields(int index) {
  // @@protoc_insertion_point(field_mutable:VidMapping.infofields)
  return infofields_.Mutable(index);
}
::InfoField* VidMapping::add_infofields() {
  // @@protoc_insertion_point(field_add:VidMapping.infofields)
  return infofields_.Add();
}
::google::protobuf::RepeatedPtrField< ::InfoField >*
VidMapping::mutable_infofields() {
  // @@protoc_insertion_point(field_mutable_list:VidMapping.infofields)
  return &infofields_;
}
const ::google::protobuf::RepeatedPtrField< ::InfoField >&
VidMapping::infofields() const {
  // @@protoc_insertion_point(field_list:VidMapping.infofields)
  return infofields_;
}

// repeated .Chromosome chromosomes = 2;
int VidMapping::chromosomes_size() const {
  return chromosomes_.size();
}
void VidMapping::clear_chromosomes() {
  chromosomes_.Clear();
}
const ::Chromosome& VidMapping::chromosomes(int index) const {
  // @@protoc_insertion_point(field_get:VidMapping.chromosomes)
  return chromosomes_.Get(index);
}
::Chromosome* VidMapping::mutable_chromosomes(int index) {
  // @@protoc_insertion_point(field_mutable:VidMapping.chromosomes)
  return chromosomes_.Mutable(index);
}
::Chromosome* VidMapping::add_chromosomes() {
  // @@protoc_insertion_point(field_add:VidMapping.chromosomes)
  return chromosomes_.Add();
}
::google::protobuf::RepeatedPtrField< ::Chromosome >*
VidMapping::mutable_chromosomes() {
  // @@protoc_insertion_point(field_mutable_list:VidMapping.chromosomes)
  return &chromosomes_;
}
const ::google::protobuf::RepeatedPtrField< ::Chromosome >&
VidMapping::chromosomes() const {
  // @@protoc_insertion_point(field_list:VidMapping.chromosomes)
  return chromosomes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
