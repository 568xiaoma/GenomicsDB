// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_import_config.proto

#ifndef PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED
#define PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class ImportConfiguration;
class ImportConfigurationDefaultTypeInternal;
extern ImportConfigurationDefaultTypeInternal _ImportConfiguration_default_instance_;
class Partition;
class PartitionDefaultTypeInternal;
extern PartitionDefaultTypeInternal _Partition_default_instance_;
class TileDBConfig;
class TileDBConfigDefaultTypeInternal;
extern TileDBConfigDefaultTypeInternal _TileDBConfig_default_instance_;

namespace protobuf_genomicsdb_5fimport_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_genomicsdb_5fimport_5fconfig_2eproto

// ===================================================================

class TileDBConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TileDBConfig) */ {
 public:
  TileDBConfig();
  virtual ~TileDBConfig();

  TileDBConfig(const TileDBConfig& from);

  inline TileDBConfig& operator=(const TileDBConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileDBConfig& default_instance();

  static inline const TileDBConfig* internal_default_instance() {
    return reinterpret_cast<const TileDBConfig*>(
               &_TileDBConfig_default_instance_);
  }

  void Swap(TileDBConfig* other);

  // implements Message ----------------------------------------------

  inline TileDBConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  TileDBConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TileDBConfig& from);
  void MergeFrom(const TileDBConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TileDBConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tiledb_workspace = 1;
  bool has_tiledb_workspace() const;
  void clear_tiledb_workspace();
  static const int kTiledbWorkspaceFieldNumber = 1;
  const ::std::string& tiledb_workspace() const;
  void set_tiledb_workspace(const ::std::string& value);
  #if LANG_CXX11
  void set_tiledb_workspace(::std::string&& value);
  #endif
  void set_tiledb_workspace(const char* value);
  void set_tiledb_workspace(const char* value, size_t size);
  ::std::string* mutable_tiledb_workspace();
  ::std::string* release_tiledb_workspace();
  void set_allocated_tiledb_workspace(::std::string* tiledb_workspace);

  // optional string tiledb_array_name = 2;
  bool has_tiledb_array_name() const;
  void clear_tiledb_array_name();
  static const int kTiledbArrayNameFieldNumber = 2;
  const ::std::string& tiledb_array_name() const;
  void set_tiledb_array_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tiledb_array_name(::std::string&& value);
  #endif
  void set_tiledb_array_name(const char* value);
  void set_tiledb_array_name(const char* value, size_t size);
  ::std::string* mutable_tiledb_array_name();
  ::std::string* release_tiledb_array_name();
  void set_allocated_tiledb_array_name(::std::string* tiledb_array_name);

  // optional bool compress_tiledb_array = 3 [default = true];
  bool has_compress_tiledb_array() const;
  void clear_compress_tiledb_array();
  static const int kCompressTiledbArrayFieldNumber = 3;
  bool compress_tiledb_array() const;
  void set_compress_tiledb_array(bool value);

  // optional int64 num_cells_per_tile = 4 [default = 1000];
  bool has_num_cells_per_tile() const;
  void clear_num_cells_per_tile();
  static const int kNumCellsPerTileFieldNumber = 4;
  ::google::protobuf::int64 num_cells_per_tile() const;
  void set_num_cells_per_tile(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TileDBConfig)
 private:
  void set_has_tiledb_workspace();
  void clear_has_tiledb_workspace();
  void set_has_tiledb_array_name();
  void clear_has_tiledb_array_name();
  void set_has_compress_tiledb_array();
  void clear_has_compress_tiledb_array();
  void set_has_num_cells_per_tile();
  void clear_has_num_cells_per_tile();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tiledb_workspace_;
  ::google::protobuf::internal::ArenaStringPtr tiledb_array_name_;
  bool compress_tiledb_array_;
  ::google::protobuf::int64 num_cells_per_tile_;
  friend struct  protobuf_genomicsdb_5fimport_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Partition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Partition) */ {
 public:
  Partition();
  virtual ~Partition();

  Partition(const Partition& from);

  inline Partition& operator=(const Partition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Partition& default_instance();

  static inline const Partition* internal_default_instance() {
    return reinterpret_cast<const Partition*>(
               &_Partition_default_instance_);
  }

  void Swap(Partition* other);

  // implements Message ----------------------------------------------

  inline Partition* New() const PROTOBUF_FINAL { return New(NULL); }

  Partition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Partition& from);
  void MergeFrom(const Partition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Partition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vcf_file_name = 3;
  bool has_vcf_file_name() const;
  void clear_vcf_file_name();
  static const int kVcfFileNameFieldNumber = 3;
  const ::std::string& vcf_file_name() const;
  void set_vcf_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_vcf_file_name(::std::string&& value);
  #endif
  void set_vcf_file_name(const char* value);
  void set_vcf_file_name(const char* value, size_t size);
  ::std::string* mutable_vcf_file_name();
  ::std::string* release_vcf_file_name();
  void set_allocated_vcf_file_name(::std::string* vcf_file_name);

  // optional .TileDBConfig tiledb_config = 2;
  bool has_tiledb_config() const;
  void clear_tiledb_config();
  static const int kTiledbConfigFieldNumber = 2;
  const ::TileDBConfig& tiledb_config() const;
  ::TileDBConfig* mutable_tiledb_config();
  ::TileDBConfig* release_tiledb_config();
  void set_allocated_tiledb_config(::TileDBConfig* tiledb_config);

  // required int64 begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int64 begin() const;
  void set_begin(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Partition)
 private:
  void set_has_begin();
  void clear_has_begin();
  void set_has_tiledb_config();
  void clear_has_tiledb_config();
  void set_has_vcf_file_name();
  void clear_has_vcf_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vcf_file_name_;
  ::TileDBConfig* tiledb_config_;
  ::google::protobuf::int64 begin_;
  friend struct  protobuf_genomicsdb_5fimport_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImportConfiguration) */ {
 public:
  ImportConfiguration();
  virtual ~ImportConfiguration();

  ImportConfiguration(const ImportConfiguration& from);

  inline ImportConfiguration& operator=(const ImportConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportConfiguration& default_instance();

  static inline const ImportConfiguration* internal_default_instance() {
    return reinterpret_cast<const ImportConfiguration*>(
               &_ImportConfiguration_default_instance_);
  }

  void Swap(ImportConfiguration* other);

  // implements Message ----------------------------------------------

  inline ImportConfiguration* New() const PROTOBUF_FINAL { return New(NULL); }

  ImportConfiguration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImportConfiguration& from);
  void MergeFrom(const ImportConfiguration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImportConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Partition column_partitions = 4;
  int column_partitions_size() const;
  void clear_column_partitions();
  static const int kColumnPartitionsFieldNumber = 4;
  const ::Partition& column_partitions(int index) const;
  ::Partition* mutable_column_partitions(int index);
  ::Partition* add_column_partitions();
  ::google::protobuf::RepeatedPtrField< ::Partition >*
      mutable_column_partitions();
  const ::google::protobuf::RepeatedPtrField< ::Partition >&
      column_partitions() const;

  // optional string vid_mapping_file = 5;
  bool has_vid_mapping_file() const;
  void clear_vid_mapping_file();
  static const int kVidMappingFileFieldNumber = 5;
  const ::std::string& vid_mapping_file() const;
  void set_vid_mapping_file(const ::std::string& value);
  #if LANG_CXX11
  void set_vid_mapping_file(::std::string&& value);
  #endif
  void set_vid_mapping_file(const char* value);
  void set_vid_mapping_file(const char* value, size_t size);
  ::std::string* mutable_vid_mapping_file();
  ::std::string* release_vid_mapping_file();
  void set_allocated_vid_mapping_file(::std::string* vid_mapping_file);

  // optional string callset_mapping_file = 6;
  bool has_callset_mapping_file() const;
  void clear_callset_mapping_file();
  static const int kCallsetMappingFileFieldNumber = 6;
  const ::std::string& callset_mapping_file() const;
  void set_callset_mapping_file(const ::std::string& value);
  #if LANG_CXX11
  void set_callset_mapping_file(::std::string&& value);
  #endif
  void set_callset_mapping_file(const char* value);
  void set_callset_mapping_file(const char* value, size_t size);
  ::std::string* mutable_callset_mapping_file();
  ::std::string* release_callset_mapping_file();
  void set_allocated_callset_mapping_file(::std::string* callset_mapping_file);

  // optional .TileDBConfig tiledb_config = 15;
  bool has_tiledb_config() const;
  void clear_tiledb_config();
  static const int kTiledbConfigFieldNumber = 15;
  const ::TileDBConfig& tiledb_config() const;
  ::TileDBConfig* mutable_tiledb_config();
  ::TileDBConfig* release_tiledb_config();
  void set_allocated_tiledb_config(::TileDBConfig* tiledb_config);

  // required bool row_based_partitioning = 1 [default = false];
  bool has_row_based_partitioning() const;
  void clear_row_based_partitioning();
  static const int kRowBasedPartitioningFieldNumber = 1;
  bool row_based_partitioning() const;
  void set_row_based_partitioning(bool value);

  // optional bool produce_combined_vcf = 2 [default = false];
  bool has_produce_combined_vcf() const;
  void clear_produce_combined_vcf();
  static const int kProduceCombinedVcfFieldNumber = 2;
  bool produce_combined_vcf() const;
  void set_produce_combined_vcf(bool value);

  // optional bool delete_and_create_tiledb_array = 10 [default = false];
  bool has_delete_and_create_tiledb_array() const;
  void clear_delete_and_create_tiledb_array();
  static const int kDeleteAndCreateTiledbArrayFieldNumber = 10;
  bool delete_and_create_tiledb_array() const;
  void set_delete_and_create_tiledb_array(bool value);

  // optional bool discard_vcf_index = 13 [default = true];
  bool has_discard_vcf_index() const;
  void clear_discard_vcf_index();
  static const int kDiscardVcfIndexFieldNumber = 13;
  bool discard_vcf_index() const;
  void set_discard_vcf_index(bool value);

  // optional int64 size_per_column_partition = 7 [default = 3000];
  bool has_size_per_column_partition() const;
  void clear_size_per_column_partition();
  static const int kSizePerColumnPartitionFieldNumber = 7;
  ::google::protobuf::int64 size_per_column_partition() const;
  void set_size_per_column_partition(::google::protobuf::int64 value);

  // optional bool produce_tiledb_array = 3 [default = true];
  bool has_produce_tiledb_array() const;
  void clear_produce_tiledb_array();
  static const int kProduceTiledbArrayFieldNumber = 3;
  bool produce_tiledb_array() const;
  void set_produce_tiledb_array(bool value);

  // optional bool treat_deletions_as_intervals = 8 [default = true];
  bool has_treat_deletions_as_intervals() const;
  void clear_treat_deletions_as_intervals();
  static const int kTreatDeletionsAsIntervalsFieldNumber = 8;
  bool treat_deletions_as_intervals() const;
  void set_treat_deletions_as_intervals(bool value);

  // optional bool do_ping_pong_buffering = 11 [default = true];
  bool has_do_ping_pong_buffering() const;
  void clear_do_ping_pong_buffering();
  static const int kDoPingPongBufferingFieldNumber = 11;
  bool do_ping_pong_buffering() const;
  void set_do_ping_pong_buffering(bool value);

  // optional bool offload_vcf_output_processing = 12 [default = true];
  bool has_offload_vcf_output_processing() const;
  void clear_offload_vcf_output_processing();
  static const int kOffloadVcfOutputProcessingFieldNumber = 12;
  bool offload_vcf_output_processing() const;
  void set_offload_vcf_output_processing(bool value);

  // optional int32 num_parallel_vcf_files = 9 [default = 1];
  bool has_num_parallel_vcf_files() const;
  void clear_num_parallel_vcf_files();
  static const int kNumParallelVcfFilesFieldNumber = 9;
  ::google::protobuf::int32 num_parallel_vcf_files() const;
  void set_num_parallel_vcf_files(::google::protobuf::int32 value);

  // optional int64 segment_size = 14 [default = 10485760];
  bool has_segment_size() const;
  void clear_segment_size();
  static const int kSegmentSizeFieldNumber = 14;
  ::google::protobuf::int64 segment_size() const;
  void set_segment_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ImportConfiguration)
 private:
  void set_has_row_based_partitioning();
  void clear_has_row_based_partitioning();
  void set_has_produce_combined_vcf();
  void clear_has_produce_combined_vcf();
  void set_has_produce_tiledb_array();
  void clear_has_produce_tiledb_array();
  void set_has_vid_mapping_file();
  void clear_has_vid_mapping_file();
  void set_has_callset_mapping_file();
  void clear_has_callset_mapping_file();
  void set_has_size_per_column_partition();
  void clear_has_size_per_column_partition();
  void set_has_treat_deletions_as_intervals();
  void clear_has_treat_deletions_as_intervals();
  void set_has_num_parallel_vcf_files();
  void clear_has_num_parallel_vcf_files();
  void set_has_delete_and_create_tiledb_array();
  void clear_has_delete_and_create_tiledb_array();
  void set_has_do_ping_pong_buffering();
  void clear_has_do_ping_pong_buffering();
  void set_has_offload_vcf_output_processing();
  void clear_has_offload_vcf_output_processing();
  void set_has_discard_vcf_index();
  void clear_has_discard_vcf_index();
  void set_has_segment_size();
  void clear_has_segment_size();
  void set_has_tiledb_config();
  void clear_has_tiledb_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Partition > column_partitions_;
  ::google::protobuf::internal::ArenaStringPtr vid_mapping_file_;
  ::google::protobuf::internal::ArenaStringPtr callset_mapping_file_;
  ::TileDBConfig* tiledb_config_;
  bool row_based_partitioning_;
  bool produce_combined_vcf_;
  bool delete_and_create_tiledb_array_;
  bool discard_vcf_index_;
  ::google::protobuf::int64 size_per_column_partition_;
  bool produce_tiledb_array_;
  bool treat_deletions_as_intervals_;
  bool do_ping_pong_buffering_;
  bool offload_vcf_output_processing_;
  ::google::protobuf::int32 num_parallel_vcf_files_;
  ::google::protobuf::int64 segment_size_;
  friend struct  protobuf_genomicsdb_5fimport_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TileDBConfig

// optional string tiledb_workspace = 1;
inline bool TileDBConfig::has_tiledb_workspace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileDBConfig::set_has_tiledb_workspace() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileDBConfig::clear_has_tiledb_workspace() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileDBConfig::clear_tiledb_workspace() {
  tiledb_workspace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tiledb_workspace();
}
inline const ::std::string& TileDBConfig::tiledb_workspace() const {
  // @@protoc_insertion_point(field_get:TileDBConfig.tiledb_workspace)
  return tiledb_workspace_.GetNoArena();
}
inline void TileDBConfig::set_tiledb_workspace(const ::std::string& value) {
  set_has_tiledb_workspace();
  tiledb_workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TileDBConfig.tiledb_workspace)
}
#if LANG_CXX11
inline void TileDBConfig::set_tiledb_workspace(::std::string&& value) {
  set_has_tiledb_workspace();
  tiledb_workspace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TileDBConfig.tiledb_workspace)
}
#endif
inline void TileDBConfig::set_tiledb_workspace(const char* value) {
  set_has_tiledb_workspace();
  tiledb_workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TileDBConfig.tiledb_workspace)
}
inline void TileDBConfig::set_tiledb_workspace(const char* value, size_t size) {
  set_has_tiledb_workspace();
  tiledb_workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TileDBConfig.tiledb_workspace)
}
inline ::std::string* TileDBConfig::mutable_tiledb_workspace() {
  set_has_tiledb_workspace();
  // @@protoc_insertion_point(field_mutable:TileDBConfig.tiledb_workspace)
  return tiledb_workspace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TileDBConfig::release_tiledb_workspace() {
  // @@protoc_insertion_point(field_release:TileDBConfig.tiledb_workspace)
  clear_has_tiledb_workspace();
  return tiledb_workspace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileDBConfig::set_allocated_tiledb_workspace(::std::string* tiledb_workspace) {
  if (tiledb_workspace != NULL) {
    set_has_tiledb_workspace();
  } else {
    clear_has_tiledb_workspace();
  }
  tiledb_workspace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tiledb_workspace);
  // @@protoc_insertion_point(field_set_allocated:TileDBConfig.tiledb_workspace)
}

// optional string tiledb_array_name = 2;
inline bool TileDBConfig::has_tiledb_array_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileDBConfig::set_has_tiledb_array_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileDBConfig::clear_has_tiledb_array_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileDBConfig::clear_tiledb_array_name() {
  tiledb_array_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tiledb_array_name();
}
inline const ::std::string& TileDBConfig::tiledb_array_name() const {
  // @@protoc_insertion_point(field_get:TileDBConfig.tiledb_array_name)
  return tiledb_array_name_.GetNoArena();
}
inline void TileDBConfig::set_tiledb_array_name(const ::std::string& value) {
  set_has_tiledb_array_name();
  tiledb_array_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TileDBConfig.tiledb_array_name)
}
#if LANG_CXX11
inline void TileDBConfig::set_tiledb_array_name(::std::string&& value) {
  set_has_tiledb_array_name();
  tiledb_array_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TileDBConfig.tiledb_array_name)
}
#endif
inline void TileDBConfig::set_tiledb_array_name(const char* value) {
  set_has_tiledb_array_name();
  tiledb_array_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TileDBConfig.tiledb_array_name)
}
inline void TileDBConfig::set_tiledb_array_name(const char* value, size_t size) {
  set_has_tiledb_array_name();
  tiledb_array_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TileDBConfig.tiledb_array_name)
}
inline ::std::string* TileDBConfig::mutable_tiledb_array_name() {
  set_has_tiledb_array_name();
  // @@protoc_insertion_point(field_mutable:TileDBConfig.tiledb_array_name)
  return tiledb_array_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TileDBConfig::release_tiledb_array_name() {
  // @@protoc_insertion_point(field_release:TileDBConfig.tiledb_array_name)
  clear_has_tiledb_array_name();
  return tiledb_array_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileDBConfig::set_allocated_tiledb_array_name(::std::string* tiledb_array_name) {
  if (tiledb_array_name != NULL) {
    set_has_tiledb_array_name();
  } else {
    clear_has_tiledb_array_name();
  }
  tiledb_array_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tiledb_array_name);
  // @@protoc_insertion_point(field_set_allocated:TileDBConfig.tiledb_array_name)
}

// optional bool compress_tiledb_array = 3 [default = true];
inline bool TileDBConfig::has_compress_tiledb_array() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TileDBConfig::set_has_compress_tiledb_array() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TileDBConfig::clear_has_compress_tiledb_array() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TileDBConfig::clear_compress_tiledb_array() {
  compress_tiledb_array_ = true;
  clear_has_compress_tiledb_array();
}
inline bool TileDBConfig::compress_tiledb_array() const {
  // @@protoc_insertion_point(field_get:TileDBConfig.compress_tiledb_array)
  return compress_tiledb_array_;
}
inline void TileDBConfig::set_compress_tiledb_array(bool value) {
  set_has_compress_tiledb_array();
  compress_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:TileDBConfig.compress_tiledb_array)
}

// optional int64 num_cells_per_tile = 4 [default = 1000];
inline bool TileDBConfig::has_num_cells_per_tile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TileDBConfig::set_has_num_cells_per_tile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TileDBConfig::clear_has_num_cells_per_tile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TileDBConfig::clear_num_cells_per_tile() {
  num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  clear_has_num_cells_per_tile();
}
inline ::google::protobuf::int64 TileDBConfig::num_cells_per_tile() const {
  // @@protoc_insertion_point(field_get:TileDBConfig.num_cells_per_tile)
  return num_cells_per_tile_;
}
inline void TileDBConfig::set_num_cells_per_tile(::google::protobuf::int64 value) {
  set_has_num_cells_per_tile();
  num_cells_per_tile_ = value;
  // @@protoc_insertion_point(field_set:TileDBConfig.num_cells_per_tile)
}

// -------------------------------------------------------------------

// Partition

// required int64 begin = 1;
inline bool Partition::has_begin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Partition::set_has_begin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Partition::clear_has_begin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Partition::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::int64 Partition::begin() const {
  // @@protoc_insertion_point(field_get:Partition.begin)
  return begin_;
}
inline void Partition::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:Partition.begin)
}

// optional .TileDBConfig tiledb_config = 2;
inline bool Partition::has_tiledb_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Partition::set_has_tiledb_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Partition::clear_has_tiledb_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Partition::clear_tiledb_config() {
  if (tiledb_config_ != NULL) tiledb_config_->::TileDBConfig::Clear();
  clear_has_tiledb_config();
}
inline const ::TileDBConfig& Partition::tiledb_config() const {
  // @@protoc_insertion_point(field_get:Partition.tiledb_config)
  return tiledb_config_ != NULL ? *tiledb_config_
                         : *::TileDBConfig::internal_default_instance();
}
inline ::TileDBConfig* Partition::mutable_tiledb_config() {
  set_has_tiledb_config();
  if (tiledb_config_ == NULL) {
    tiledb_config_ = new ::TileDBConfig;
  }
  // @@protoc_insertion_point(field_mutable:Partition.tiledb_config)
  return tiledb_config_;
}
inline ::TileDBConfig* Partition::release_tiledb_config() {
  // @@protoc_insertion_point(field_release:Partition.tiledb_config)
  clear_has_tiledb_config();
  ::TileDBConfig* temp = tiledb_config_;
  tiledb_config_ = NULL;
  return temp;
}
inline void Partition::set_allocated_tiledb_config(::TileDBConfig* tiledb_config) {
  delete tiledb_config_;
  tiledb_config_ = tiledb_config;
  if (tiledb_config) {
    set_has_tiledb_config();
  } else {
    clear_has_tiledb_config();
  }
  // @@protoc_insertion_point(field_set_allocated:Partition.tiledb_config)
}

// optional string vcf_file_name = 3;
inline bool Partition::has_vcf_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Partition::set_has_vcf_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Partition::clear_has_vcf_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Partition::clear_vcf_file_name() {
  vcf_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vcf_file_name();
}
inline const ::std::string& Partition::vcf_file_name() const {
  // @@protoc_insertion_point(field_get:Partition.vcf_file_name)
  return vcf_file_name_.GetNoArena();
}
inline void Partition::set_vcf_file_name(const ::std::string& value) {
  set_has_vcf_file_name();
  vcf_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Partition.vcf_file_name)
}
#if LANG_CXX11
inline void Partition::set_vcf_file_name(::std::string&& value) {
  set_has_vcf_file_name();
  vcf_file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Partition.vcf_file_name)
}
#endif
inline void Partition::set_vcf_file_name(const char* value) {
  set_has_vcf_file_name();
  vcf_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Partition.vcf_file_name)
}
inline void Partition::set_vcf_file_name(const char* value, size_t size) {
  set_has_vcf_file_name();
  vcf_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Partition.vcf_file_name)
}
inline ::std::string* Partition::mutable_vcf_file_name() {
  set_has_vcf_file_name();
  // @@protoc_insertion_point(field_mutable:Partition.vcf_file_name)
  return vcf_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Partition::release_vcf_file_name() {
  // @@protoc_insertion_point(field_release:Partition.vcf_file_name)
  clear_has_vcf_file_name();
  return vcf_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_allocated_vcf_file_name(::std::string* vcf_file_name) {
  if (vcf_file_name != NULL) {
    set_has_vcf_file_name();
  } else {
    clear_has_vcf_file_name();
  }
  vcf_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vcf_file_name);
  // @@protoc_insertion_point(field_set_allocated:Partition.vcf_file_name)
}

// -------------------------------------------------------------------

// ImportConfiguration

// required bool row_based_partitioning = 1 [default = false];
inline bool ImportConfiguration::has_row_based_partitioning() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImportConfiguration::set_has_row_based_partitioning() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImportConfiguration::clear_has_row_based_partitioning() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImportConfiguration::clear_row_based_partitioning() {
  row_based_partitioning_ = false;
  clear_has_row_based_partitioning();
}
inline bool ImportConfiguration::row_based_partitioning() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.row_based_partitioning)
  return row_based_partitioning_;
}
inline void ImportConfiguration::set_row_based_partitioning(bool value) {
  set_has_row_based_partitioning();
  row_based_partitioning_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.row_based_partitioning)
}

// optional bool produce_combined_vcf = 2 [default = false];
inline bool ImportConfiguration::has_produce_combined_vcf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImportConfiguration::set_has_produce_combined_vcf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImportConfiguration::clear_has_produce_combined_vcf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImportConfiguration::clear_produce_combined_vcf() {
  produce_combined_vcf_ = false;
  clear_has_produce_combined_vcf();
}
inline bool ImportConfiguration::produce_combined_vcf() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.produce_combined_vcf)
  return produce_combined_vcf_;
}
inline void ImportConfiguration::set_produce_combined_vcf(bool value) {
  set_has_produce_combined_vcf();
  produce_combined_vcf_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.produce_combined_vcf)
}

// optional bool produce_tiledb_array = 3 [default = true];
inline bool ImportConfiguration::has_produce_tiledb_array() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImportConfiguration::set_has_produce_tiledb_array() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImportConfiguration::clear_has_produce_tiledb_array() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImportConfiguration::clear_produce_tiledb_array() {
  produce_tiledb_array_ = true;
  clear_has_produce_tiledb_array();
}
inline bool ImportConfiguration::produce_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.produce_tiledb_array)
  return produce_tiledb_array_;
}
inline void ImportConfiguration::set_produce_tiledb_array(bool value) {
  set_has_produce_tiledb_array();
  produce_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.produce_tiledb_array)
}

// repeated .Partition column_partitions = 4;
inline int ImportConfiguration::column_partitions_size() const {
  return column_partitions_.size();
}
inline void ImportConfiguration::clear_column_partitions() {
  column_partitions_.Clear();
}
inline const ::Partition& ImportConfiguration::column_partitions(int index) const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.column_partitions)
  return column_partitions_.Get(index);
}
inline ::Partition* ImportConfiguration::mutable_column_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.column_partitions)
  return column_partitions_.Mutable(index);
}
inline ::Partition* ImportConfiguration::add_column_partitions() {
  // @@protoc_insertion_point(field_add:ImportConfiguration.column_partitions)
  return column_partitions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Partition >*
ImportConfiguration::mutable_column_partitions() {
  // @@protoc_insertion_point(field_mutable_list:ImportConfiguration.column_partitions)
  return &column_partitions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Partition >&
ImportConfiguration::column_partitions() const {
  // @@protoc_insertion_point(field_list:ImportConfiguration.column_partitions)
  return column_partitions_;
}

// optional string vid_mapping_file = 5;
inline bool ImportConfiguration::has_vid_mapping_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportConfiguration::set_has_vid_mapping_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportConfiguration::clear_has_vid_mapping_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportConfiguration::clear_vid_mapping_file() {
  vid_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid_mapping_file();
}
inline const ::std::string& ImportConfiguration::vid_mapping_file() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.vid_mapping_file)
  return vid_mapping_file_.GetNoArena();
}
inline void ImportConfiguration::set_vid_mapping_file(const ::std::string& value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImportConfiguration.vid_mapping_file)
}
#if LANG_CXX11
inline void ImportConfiguration::set_vid_mapping_file(::std::string&& value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImportConfiguration.vid_mapping_file)
}
#endif
inline void ImportConfiguration::set_vid_mapping_file(const char* value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImportConfiguration.vid_mapping_file)
}
inline void ImportConfiguration::set_vid_mapping_file(const char* value, size_t size) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImportConfiguration.vid_mapping_file)
}
inline ::std::string* ImportConfiguration::mutable_vid_mapping_file() {
  set_has_vid_mapping_file();
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.vid_mapping_file)
  return vid_mapping_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportConfiguration::release_vid_mapping_file() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.vid_mapping_file)
  clear_has_vid_mapping_file();
  return vid_mapping_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportConfiguration::set_allocated_vid_mapping_file(::std::string* vid_mapping_file) {
  if (vid_mapping_file != NULL) {
    set_has_vid_mapping_file();
  } else {
    clear_has_vid_mapping_file();
  }
  vid_mapping_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid_mapping_file);
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.vid_mapping_file)
}

// optional string callset_mapping_file = 6;
inline bool ImportConfiguration::has_callset_mapping_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportConfiguration::set_has_callset_mapping_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportConfiguration::clear_has_callset_mapping_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportConfiguration::clear_callset_mapping_file() {
  callset_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callset_mapping_file();
}
inline const ::std::string& ImportConfiguration::callset_mapping_file() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.callset_mapping_file)
  return callset_mapping_file_.GetNoArena();
}
inline void ImportConfiguration::set_callset_mapping_file(const ::std::string& value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImportConfiguration.callset_mapping_file)
}
#if LANG_CXX11
inline void ImportConfiguration::set_callset_mapping_file(::std::string&& value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImportConfiguration.callset_mapping_file)
}
#endif
inline void ImportConfiguration::set_callset_mapping_file(const char* value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImportConfiguration.callset_mapping_file)
}
inline void ImportConfiguration::set_callset_mapping_file(const char* value, size_t size) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImportConfiguration.callset_mapping_file)
}
inline ::std::string* ImportConfiguration::mutable_callset_mapping_file() {
  set_has_callset_mapping_file();
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.callset_mapping_file)
  return callset_mapping_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportConfiguration::release_callset_mapping_file() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.callset_mapping_file)
  clear_has_callset_mapping_file();
  return callset_mapping_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportConfiguration::set_allocated_callset_mapping_file(::std::string* callset_mapping_file) {
  if (callset_mapping_file != NULL) {
    set_has_callset_mapping_file();
  } else {
    clear_has_callset_mapping_file();
  }
  callset_mapping_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callset_mapping_file);
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.callset_mapping_file)
}

// optional int64 size_per_column_partition = 7 [default = 3000];
inline bool ImportConfiguration::has_size_per_column_partition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImportConfiguration::set_has_size_per_column_partition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImportConfiguration::clear_has_size_per_column_partition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImportConfiguration::clear_size_per_column_partition() {
  size_per_column_partition_ = GOOGLE_LONGLONG(3000);
  clear_has_size_per_column_partition();
}
inline ::google::protobuf::int64 ImportConfiguration::size_per_column_partition() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.size_per_column_partition)
  return size_per_column_partition_;
}
inline void ImportConfiguration::set_size_per_column_partition(::google::protobuf::int64 value) {
  set_has_size_per_column_partition();
  size_per_column_partition_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.size_per_column_partition)
}

// optional bool treat_deletions_as_intervals = 8 [default = true];
inline bool ImportConfiguration::has_treat_deletions_as_intervals() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImportConfiguration::set_has_treat_deletions_as_intervals() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImportConfiguration::clear_has_treat_deletions_as_intervals() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImportConfiguration::clear_treat_deletions_as_intervals() {
  treat_deletions_as_intervals_ = true;
  clear_has_treat_deletions_as_intervals();
}
inline bool ImportConfiguration::treat_deletions_as_intervals() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.treat_deletions_as_intervals)
  return treat_deletions_as_intervals_;
}
inline void ImportConfiguration::set_treat_deletions_as_intervals(bool value) {
  set_has_treat_deletions_as_intervals();
  treat_deletions_as_intervals_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.treat_deletions_as_intervals)
}

// optional int32 num_parallel_vcf_files = 9 [default = 1];
inline bool ImportConfiguration::has_num_parallel_vcf_files() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImportConfiguration::set_has_num_parallel_vcf_files() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImportConfiguration::clear_has_num_parallel_vcf_files() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImportConfiguration::clear_num_parallel_vcf_files() {
  num_parallel_vcf_files_ = 1;
  clear_has_num_parallel_vcf_files();
}
inline ::google::protobuf::int32 ImportConfiguration::num_parallel_vcf_files() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.num_parallel_vcf_files)
  return num_parallel_vcf_files_;
}
inline void ImportConfiguration::set_num_parallel_vcf_files(::google::protobuf::int32 value) {
  set_has_num_parallel_vcf_files();
  num_parallel_vcf_files_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.num_parallel_vcf_files)
}

// optional bool delete_and_create_tiledb_array = 10 [default = false];
inline bool ImportConfiguration::has_delete_and_create_tiledb_array() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImportConfiguration::set_has_delete_and_create_tiledb_array() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImportConfiguration::clear_has_delete_and_create_tiledb_array() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImportConfiguration::clear_delete_and_create_tiledb_array() {
  delete_and_create_tiledb_array_ = false;
  clear_has_delete_and_create_tiledb_array();
}
inline bool ImportConfiguration::delete_and_create_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.delete_and_create_tiledb_array)
  return delete_and_create_tiledb_array_;
}
inline void ImportConfiguration::set_delete_and_create_tiledb_array(bool value) {
  set_has_delete_and_create_tiledb_array();
  delete_and_create_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.delete_and_create_tiledb_array)
}

// optional bool do_ping_pong_buffering = 11 [default = true];
inline bool ImportConfiguration::has_do_ping_pong_buffering() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImportConfiguration::set_has_do_ping_pong_buffering() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImportConfiguration::clear_has_do_ping_pong_buffering() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImportConfiguration::clear_do_ping_pong_buffering() {
  do_ping_pong_buffering_ = true;
  clear_has_do_ping_pong_buffering();
}
inline bool ImportConfiguration::do_ping_pong_buffering() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.do_ping_pong_buffering)
  return do_ping_pong_buffering_;
}
inline void ImportConfiguration::set_do_ping_pong_buffering(bool value) {
  set_has_do_ping_pong_buffering();
  do_ping_pong_buffering_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.do_ping_pong_buffering)
}

// optional bool offload_vcf_output_processing = 12 [default = true];
inline bool ImportConfiguration::has_offload_vcf_output_processing() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImportConfiguration::set_has_offload_vcf_output_processing() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImportConfiguration::clear_has_offload_vcf_output_processing() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImportConfiguration::clear_offload_vcf_output_processing() {
  offload_vcf_output_processing_ = true;
  clear_has_offload_vcf_output_processing();
}
inline bool ImportConfiguration::offload_vcf_output_processing() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.offload_vcf_output_processing)
  return offload_vcf_output_processing_;
}
inline void ImportConfiguration::set_offload_vcf_output_processing(bool value) {
  set_has_offload_vcf_output_processing();
  offload_vcf_output_processing_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.offload_vcf_output_processing)
}

// optional bool discard_vcf_index = 13 [default = true];
inline bool ImportConfiguration::has_discard_vcf_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImportConfiguration::set_has_discard_vcf_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImportConfiguration::clear_has_discard_vcf_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImportConfiguration::clear_discard_vcf_index() {
  discard_vcf_index_ = true;
  clear_has_discard_vcf_index();
}
inline bool ImportConfiguration::discard_vcf_index() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.discard_vcf_index)
  return discard_vcf_index_;
}
inline void ImportConfiguration::set_discard_vcf_index(bool value) {
  set_has_discard_vcf_index();
  discard_vcf_index_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.discard_vcf_index)
}

// optional int64 segment_size = 14 [default = 10485760];
inline bool ImportConfiguration::has_segment_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ImportConfiguration::set_has_segment_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ImportConfiguration::clear_has_segment_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ImportConfiguration::clear_segment_size() {
  segment_size_ = GOOGLE_LONGLONG(10485760);
  clear_has_segment_size();
}
inline ::google::protobuf::int64 ImportConfiguration::segment_size() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.segment_size)
  return segment_size_;
}
inline void ImportConfiguration::set_segment_size(::google::protobuf::int64 value) {
  set_has_segment_size();
  segment_size_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.segment_size)
}

// optional .TileDBConfig tiledb_config = 15;
inline bool ImportConfiguration::has_tiledb_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImportConfiguration::set_has_tiledb_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImportConfiguration::clear_has_tiledb_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImportConfiguration::clear_tiledb_config() {
  if (tiledb_config_ != NULL) tiledb_config_->::TileDBConfig::Clear();
  clear_has_tiledb_config();
}
inline const ::TileDBConfig& ImportConfiguration::tiledb_config() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.tiledb_config)
  return tiledb_config_ != NULL ? *tiledb_config_
                         : *::TileDBConfig::internal_default_instance();
}
inline ::TileDBConfig* ImportConfiguration::mutable_tiledb_config() {
  set_has_tiledb_config();
  if (tiledb_config_ == NULL) {
    tiledb_config_ = new ::TileDBConfig;
  }
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.tiledb_config)
  return tiledb_config_;
}
inline ::TileDBConfig* ImportConfiguration::release_tiledb_config() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.tiledb_config)
  clear_has_tiledb_config();
  ::TileDBConfig* temp = tiledb_config_;
  tiledb_config_ = NULL;
  return temp;
}
inline void ImportConfiguration::set_allocated_tiledb_config(::TileDBConfig* tiledb_config) {
  delete tiledb_config_;
  tiledb_config_ = tiledb_config;
  if (tiledb_config) {
    set_has_tiledb_config();
  } else {
    clear_has_tiledb_config();
  }
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.tiledb_config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED
