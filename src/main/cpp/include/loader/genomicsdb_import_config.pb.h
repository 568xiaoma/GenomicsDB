// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_import_config.proto

#ifndef PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED
#define PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace intel {
namespace genomicsdb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto();
void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto();

class Partition;
class ImportConfiguration;

// ===================================================================

class Partition : public ::google::protobuf::Message {
 public:
  Partition();
  virtual ~Partition();

  Partition(const Partition& from);

  inline Partition& operator=(const Partition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Partition& default_instance();

  void Swap(Partition* other);

  // implements Message ----------------------------------------------

  Partition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Partition& from);
  void MergeFrom(const Partition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 begin = 1;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 1;
  inline ::google::protobuf::int64 begin() const;
  inline void set_begin(::google::protobuf::int64 value);

  // optional string tiledb_workspace = 2;
  inline bool has_tiledb_workspace() const;
  inline void clear_tiledb_workspace();
  static const int kTiledbWorkspaceFieldNumber = 2;
  inline const ::std::string& tiledb_workspace() const;
  inline void set_tiledb_workspace(const ::std::string& value);
  inline void set_tiledb_workspace(const char* value);
  inline void set_tiledb_workspace(const char* value, size_t size);
  inline ::std::string* mutable_tiledb_workspace();
  inline ::std::string* release_tiledb_workspace();
  inline void set_allocated_tiledb_workspace(::std::string* tiledb_workspace);

  // optional string tiledb_array_name = 3;
  inline bool has_tiledb_array_name() const;
  inline void clear_tiledb_array_name();
  static const int kTiledbArrayNameFieldNumber = 3;
  inline const ::std::string& tiledb_array_name() const;
  inline void set_tiledb_array_name(const ::std::string& value);
  inline void set_tiledb_array_name(const char* value);
  inline void set_tiledb_array_name(const char* value, size_t size);
  inline ::std::string* mutable_tiledb_array_name();
  inline ::std::string* release_tiledb_array_name();
  inline void set_allocated_tiledb_array_name(::std::string* tiledb_array_name);

  // optional string vcf_file_name = 4;
  inline bool has_vcf_file_name() const;
  inline void clear_vcf_file_name();
  static const int kVcfFileNameFieldNumber = 4;
  inline const ::std::string& vcf_file_name() const;
  inline void set_vcf_file_name(const ::std::string& value);
  inline void set_vcf_file_name(const char* value);
  inline void set_vcf_file_name(const char* value, size_t size);
  inline ::std::string* mutable_vcf_file_name();
  inline ::std::string* release_vcf_file_name();
  inline void set_allocated_vcf_file_name(::std::string* vcf_file_name);

  // @@protoc_insertion_point(class_scope:com.intel.genomicsdb.Partition)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_tiledb_workspace();
  inline void clear_has_tiledb_workspace();
  inline void set_has_tiledb_array_name();
  inline void clear_has_tiledb_array_name();
  inline void set_has_vcf_file_name();
  inline void clear_has_vcf_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 begin_;
  ::std::string* tiledb_workspace_;
  ::std::string* tiledb_array_name_;
  ::std::string* vcf_file_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Partition* default_instance_;
};
// -------------------------------------------------------------------

class ImportConfiguration : public ::google::protobuf::Message {
 public:
  ImportConfiguration();
  virtual ~ImportConfiguration();

  ImportConfiguration(const ImportConfiguration& from);

  inline ImportConfiguration& operator=(const ImportConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportConfiguration& default_instance();

  void Swap(ImportConfiguration* other);

  // implements Message ----------------------------------------------

  ImportConfiguration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportConfiguration& from);
  void MergeFrom(const ImportConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tiledb_workspace = 1;
  inline bool has_tiledb_workspace() const;
  inline void clear_tiledb_workspace();
  static const int kTiledbWorkspaceFieldNumber = 1;
  inline const ::std::string& tiledb_workspace() const;
  inline void set_tiledb_workspace(const ::std::string& value);
  inline void set_tiledb_workspace(const char* value);
  inline void set_tiledb_workspace(const char* value, size_t size);
  inline ::std::string* mutable_tiledb_workspace();
  inline ::std::string* release_tiledb_workspace();
  inline void set_allocated_tiledb_workspace(::std::string* tiledb_workspace);

  // required bool row_based_partitioning = 2 [default = false];
  inline bool has_row_based_partitioning() const;
  inline void clear_row_based_partitioning();
  static const int kRowBasedPartitioningFieldNumber = 2;
  inline bool row_based_partitioning() const;
  inline void set_row_based_partitioning(bool value);

  // optional bool produce_combined_vcf = 3 [default = false];
  inline bool has_produce_combined_vcf() const;
  inline void clear_produce_combined_vcf();
  static const int kProduceCombinedVcfFieldNumber = 3;
  inline bool produce_combined_vcf() const;
  inline void set_produce_combined_vcf(bool value);

  // optional bool produce_tiledb_array = 4 [default = true];
  inline bool has_produce_tiledb_array() const;
  inline void clear_produce_tiledb_array();
  static const int kProduceTiledbArrayFieldNumber = 4;
  inline bool produce_tiledb_array() const;
  inline void set_produce_tiledb_array(bool value);

  // repeated .com.intel.genomicsdb.Partition partitions = 5;
  inline int partitions_size() const;
  inline void clear_partitions();
  static const int kPartitionsFieldNumber = 5;
  inline const ::com::intel::genomicsdb::Partition& partitions(int index) const;
  inline ::com::intel::genomicsdb::Partition* mutable_partitions(int index);
  inline ::com::intel::genomicsdb::Partition* add_partitions();
  inline const ::google::protobuf::RepeatedPtrField< ::com::intel::genomicsdb::Partition >&
      partitions() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::intel::genomicsdb::Partition >*
      mutable_partitions();

  // optional string vid_mapping_file = 6;
  inline bool has_vid_mapping_file() const;
  inline void clear_vid_mapping_file();
  static const int kVidMappingFileFieldNumber = 6;
  inline const ::std::string& vid_mapping_file() const;
  inline void set_vid_mapping_file(const ::std::string& value);
  inline void set_vid_mapping_file(const char* value);
  inline void set_vid_mapping_file(const char* value, size_t size);
  inline ::std::string* mutable_vid_mapping_file();
  inline ::std::string* release_vid_mapping_file();
  inline void set_allocated_vid_mapping_file(::std::string* vid_mapping_file);

  // optional string callset_mapping_file = 7;
  inline bool has_callset_mapping_file() const;
  inline void clear_callset_mapping_file();
  static const int kCallsetMappingFileFieldNumber = 7;
  inline const ::std::string& callset_mapping_file() const;
  inline void set_callset_mapping_file(const ::std::string& value);
  inline void set_callset_mapping_file(const char* value);
  inline void set_callset_mapping_file(const char* value, size_t size);
  inline ::std::string* mutable_callset_mapping_file();
  inline ::std::string* release_callset_mapping_file();
  inline void set_allocated_callset_mapping_file(::std::string* callset_mapping_file);

  // optional int64 size_per_column_partition = 8 [default = 3000];
  inline bool has_size_per_column_partition() const;
  inline void clear_size_per_column_partition();
  static const int kSizePerColumnPartitionFieldNumber = 8;
  inline ::google::protobuf::int64 size_per_column_partition() const;
  inline void set_size_per_column_partition(::google::protobuf::int64 value);

  // optional bool treat_deletions_as_intervals = 9 [default = true];
  inline bool has_treat_deletions_as_intervals() const;
  inline void clear_treat_deletions_as_intervals();
  static const int kTreatDeletionsAsIntervalsFieldNumber = 9;
  inline bool treat_deletions_as_intervals() const;
  inline void set_treat_deletions_as_intervals(bool value);

  // optional int32 num_parallel_vcf_files = 10 [default = 1];
  inline bool has_num_parallel_vcf_files() const;
  inline void clear_num_parallel_vcf_files();
  static const int kNumParallelVcfFilesFieldNumber = 10;
  inline ::google::protobuf::int32 num_parallel_vcf_files() const;
  inline void set_num_parallel_vcf_files(::google::protobuf::int32 value);

  // optional bool delete_and_create_tiledb_array = 11 [default = false];
  inline bool has_delete_and_create_tiledb_array() const;
  inline void clear_delete_and_create_tiledb_array();
  static const int kDeleteAndCreateTiledbArrayFieldNumber = 11;
  inline bool delete_and_create_tiledb_array() const;
  inline void set_delete_and_create_tiledb_array(bool value);

  // optional bool do_ping_pong_buffering = 12 [default = true];
  inline bool has_do_ping_pong_buffering() const;
  inline void clear_do_ping_pong_buffering();
  static const int kDoPingPongBufferingFieldNumber = 12;
  inline bool do_ping_pong_buffering() const;
  inline void set_do_ping_pong_buffering(bool value);

  // optional bool offload_vcf_output_processing = 13 [default = true];
  inline bool has_offload_vcf_output_processing() const;
  inline void clear_offload_vcf_output_processing();
  static const int kOffloadVcfOutputProcessingFieldNumber = 13;
  inline bool offload_vcf_output_processing() const;
  inline void set_offload_vcf_output_processing(bool value);

  // optional bool discard_vcf_index = 14 [default = true];
  inline bool has_discard_vcf_index() const;
  inline void clear_discard_vcf_index();
  static const int kDiscardVcfIndexFieldNumber = 14;
  inline bool discard_vcf_index() const;
  inline void set_discard_vcf_index(bool value);

  // optional bool compress_tiledb_array = 15 [default = true];
  inline bool has_compress_tiledb_array() const;
  inline void clear_compress_tiledb_array();
  static const int kCompressTiledbArrayFieldNumber = 15;
  inline bool compress_tiledb_array() const;
  inline void set_compress_tiledb_array(bool value);

  // optional int64 segment_size = 16 [default = 10485760];
  inline bool has_segment_size() const;
  inline void clear_segment_size();
  static const int kSegmentSizeFieldNumber = 16;
  inline ::google::protobuf::int64 segment_size() const;
  inline void set_segment_size(::google::protobuf::int64 value);

  // optional int64 num_cells_per_tile = 17 [default = 1000];
  inline bool has_num_cells_per_tile() const;
  inline void clear_num_cells_per_tile();
  static const int kNumCellsPerTileFieldNumber = 17;
  inline ::google::protobuf::int64 num_cells_per_tile() const;
  inline void set_num_cells_per_tile(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.intel.genomicsdb.ImportConfiguration)
 private:
  inline void set_has_tiledb_workspace();
  inline void clear_has_tiledb_workspace();
  inline void set_has_row_based_partitioning();
  inline void clear_has_row_based_partitioning();
  inline void set_has_produce_combined_vcf();
  inline void clear_has_produce_combined_vcf();
  inline void set_has_produce_tiledb_array();
  inline void clear_has_produce_tiledb_array();
  inline void set_has_vid_mapping_file();
  inline void clear_has_vid_mapping_file();
  inline void set_has_callset_mapping_file();
  inline void clear_has_callset_mapping_file();
  inline void set_has_size_per_column_partition();
  inline void clear_has_size_per_column_partition();
  inline void set_has_treat_deletions_as_intervals();
  inline void clear_has_treat_deletions_as_intervals();
  inline void set_has_num_parallel_vcf_files();
  inline void clear_has_num_parallel_vcf_files();
  inline void set_has_delete_and_create_tiledb_array();
  inline void clear_has_delete_and_create_tiledb_array();
  inline void set_has_do_ping_pong_buffering();
  inline void clear_has_do_ping_pong_buffering();
  inline void set_has_offload_vcf_output_processing();
  inline void clear_has_offload_vcf_output_processing();
  inline void set_has_discard_vcf_index();
  inline void clear_has_discard_vcf_index();
  inline void set_has_compress_tiledb_array();
  inline void clear_has_compress_tiledb_array();
  inline void set_has_segment_size();
  inline void clear_has_segment_size();
  inline void set_has_num_cells_per_tile();
  inline void clear_has_num_cells_per_tile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tiledb_workspace_;
  ::google::protobuf::RepeatedPtrField< ::com::intel::genomicsdb::Partition > partitions_;
  bool row_based_partitioning_;
  bool produce_combined_vcf_;
  bool produce_tiledb_array_;
  bool treat_deletions_as_intervals_;
  ::google::protobuf::int32 num_parallel_vcf_files_;
  ::std::string* vid_mapping_file_;
  ::std::string* callset_mapping_file_;
  ::google::protobuf::int64 size_per_column_partition_;
  bool delete_and_create_tiledb_array_;
  bool do_ping_pong_buffering_;
  bool offload_vcf_output_processing_;
  bool discard_vcf_index_;
  bool compress_tiledb_array_;
  ::google::protobuf::int64 segment_size_;
  ::google::protobuf::int64 num_cells_per_tile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ImportConfiguration* default_instance_;
};
// ===================================================================


// ===================================================================

// Partition

// required int64 begin = 1;
inline bool Partition::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Partition::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Partition::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Partition::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::int64 Partition::begin() const {
  return begin_;
}
inline void Partition::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
}

// optional string tiledb_workspace = 2;
inline bool Partition::has_tiledb_workspace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Partition::set_has_tiledb_workspace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Partition::clear_has_tiledb_workspace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Partition::clear_tiledb_workspace() {
  if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_->clear();
  }
  clear_has_tiledb_workspace();
}
inline const ::std::string& Partition::tiledb_workspace() const {
  return *tiledb_workspace_;
}
inline void Partition::set_tiledb_workspace(const ::std::string& value) {
  set_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_ = new ::std::string;
  }
  tiledb_workspace_->assign(value);
}
inline void Partition::set_tiledb_workspace(const char* value) {
  set_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_ = new ::std::string;
  }
  tiledb_workspace_->assign(value);
}
inline void Partition::set_tiledb_workspace(const char* value, size_t size) {
  set_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_ = new ::std::string;
  }
  tiledb_workspace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Partition::mutable_tiledb_workspace() {
  set_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_ = new ::std::string;
  }
  return tiledb_workspace_;
}
inline ::std::string* Partition::release_tiledb_workspace() {
  clear_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiledb_workspace_;
    tiledb_workspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Partition::set_allocated_tiledb_workspace(::std::string* tiledb_workspace) {
  if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
    delete tiledb_workspace_;
  }
  if (tiledb_workspace) {
    set_has_tiledb_workspace();
    tiledb_workspace_ = tiledb_workspace;
  } else {
    clear_has_tiledb_workspace();
    tiledb_workspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tiledb_array_name = 3;
inline bool Partition::has_tiledb_array_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Partition::set_has_tiledb_array_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Partition::clear_has_tiledb_array_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Partition::clear_tiledb_array_name() {
  if (tiledb_array_name_ != &::google::protobuf::internal::kEmptyString) {
    tiledb_array_name_->clear();
  }
  clear_has_tiledb_array_name();
}
inline const ::std::string& Partition::tiledb_array_name() const {
  return *tiledb_array_name_;
}
inline void Partition::set_tiledb_array_name(const ::std::string& value) {
  set_has_tiledb_array_name();
  if (tiledb_array_name_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_array_name_ = new ::std::string;
  }
  tiledb_array_name_->assign(value);
}
inline void Partition::set_tiledb_array_name(const char* value) {
  set_has_tiledb_array_name();
  if (tiledb_array_name_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_array_name_ = new ::std::string;
  }
  tiledb_array_name_->assign(value);
}
inline void Partition::set_tiledb_array_name(const char* value, size_t size) {
  set_has_tiledb_array_name();
  if (tiledb_array_name_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_array_name_ = new ::std::string;
  }
  tiledb_array_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Partition::mutable_tiledb_array_name() {
  set_has_tiledb_array_name();
  if (tiledb_array_name_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_array_name_ = new ::std::string;
  }
  return tiledb_array_name_;
}
inline ::std::string* Partition::release_tiledb_array_name() {
  clear_has_tiledb_array_name();
  if (tiledb_array_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiledb_array_name_;
    tiledb_array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Partition::set_allocated_tiledb_array_name(::std::string* tiledb_array_name) {
  if (tiledb_array_name_ != &::google::protobuf::internal::kEmptyString) {
    delete tiledb_array_name_;
  }
  if (tiledb_array_name) {
    set_has_tiledb_array_name();
    tiledb_array_name_ = tiledb_array_name;
  } else {
    clear_has_tiledb_array_name();
    tiledb_array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string vcf_file_name = 4;
inline bool Partition::has_vcf_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Partition::set_has_vcf_file_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Partition::clear_has_vcf_file_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Partition::clear_vcf_file_name() {
  if (vcf_file_name_ != &::google::protobuf::internal::kEmptyString) {
    vcf_file_name_->clear();
  }
  clear_has_vcf_file_name();
}
inline const ::std::string& Partition::vcf_file_name() const {
  return *vcf_file_name_;
}
inline void Partition::set_vcf_file_name(const ::std::string& value) {
  set_has_vcf_file_name();
  if (vcf_file_name_ == &::google::protobuf::internal::kEmptyString) {
    vcf_file_name_ = new ::std::string;
  }
  vcf_file_name_->assign(value);
}
inline void Partition::set_vcf_file_name(const char* value) {
  set_has_vcf_file_name();
  if (vcf_file_name_ == &::google::protobuf::internal::kEmptyString) {
    vcf_file_name_ = new ::std::string;
  }
  vcf_file_name_->assign(value);
}
inline void Partition::set_vcf_file_name(const char* value, size_t size) {
  set_has_vcf_file_name();
  if (vcf_file_name_ == &::google::protobuf::internal::kEmptyString) {
    vcf_file_name_ = new ::std::string;
  }
  vcf_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Partition::mutable_vcf_file_name() {
  set_has_vcf_file_name();
  if (vcf_file_name_ == &::google::protobuf::internal::kEmptyString) {
    vcf_file_name_ = new ::std::string;
  }
  return vcf_file_name_;
}
inline ::std::string* Partition::release_vcf_file_name() {
  clear_has_vcf_file_name();
  if (vcf_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vcf_file_name_;
    vcf_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Partition::set_allocated_vcf_file_name(::std::string* vcf_file_name) {
  if (vcf_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete vcf_file_name_;
  }
  if (vcf_file_name) {
    set_has_vcf_file_name();
    vcf_file_name_ = vcf_file_name;
  } else {
    clear_has_vcf_file_name();
    vcf_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ImportConfiguration

// required string tiledb_workspace = 1;
inline bool ImportConfiguration::has_tiledb_workspace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportConfiguration::set_has_tiledb_workspace() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportConfiguration::clear_has_tiledb_workspace() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportConfiguration::clear_tiledb_workspace() {
  if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_->clear();
  }
  clear_has_tiledb_workspace();
}
inline const ::std::string& ImportConfiguration::tiledb_workspace() const {
  return *tiledb_workspace_;
}
inline void ImportConfiguration::set_tiledb_workspace(const ::std::string& value) {
  set_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_ = new ::std::string;
  }
  tiledb_workspace_->assign(value);
}
inline void ImportConfiguration::set_tiledb_workspace(const char* value) {
  set_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_ = new ::std::string;
  }
  tiledb_workspace_->assign(value);
}
inline void ImportConfiguration::set_tiledb_workspace(const char* value, size_t size) {
  set_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_ = new ::std::string;
  }
  tiledb_workspace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportConfiguration::mutable_tiledb_workspace() {
  set_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    tiledb_workspace_ = new ::std::string;
  }
  return tiledb_workspace_;
}
inline ::std::string* ImportConfiguration::release_tiledb_workspace() {
  clear_has_tiledb_workspace();
  if (tiledb_workspace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiledb_workspace_;
    tiledb_workspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImportConfiguration::set_allocated_tiledb_workspace(::std::string* tiledb_workspace) {
  if (tiledb_workspace_ != &::google::protobuf::internal::kEmptyString) {
    delete tiledb_workspace_;
  }
  if (tiledb_workspace) {
    set_has_tiledb_workspace();
    tiledb_workspace_ = tiledb_workspace;
  } else {
    clear_has_tiledb_workspace();
    tiledb_workspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool row_based_partitioning = 2 [default = false];
inline bool ImportConfiguration::has_row_based_partitioning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportConfiguration::set_has_row_based_partitioning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportConfiguration::clear_has_row_based_partitioning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportConfiguration::clear_row_based_partitioning() {
  row_based_partitioning_ = false;
  clear_has_row_based_partitioning();
}
inline bool ImportConfiguration::row_based_partitioning() const {
  return row_based_partitioning_;
}
inline void ImportConfiguration::set_row_based_partitioning(bool value) {
  set_has_row_based_partitioning();
  row_based_partitioning_ = value;
}

// optional bool produce_combined_vcf = 3 [default = false];
inline bool ImportConfiguration::has_produce_combined_vcf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImportConfiguration::set_has_produce_combined_vcf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImportConfiguration::clear_has_produce_combined_vcf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImportConfiguration::clear_produce_combined_vcf() {
  produce_combined_vcf_ = false;
  clear_has_produce_combined_vcf();
}
inline bool ImportConfiguration::produce_combined_vcf() const {
  return produce_combined_vcf_;
}
inline void ImportConfiguration::set_produce_combined_vcf(bool value) {
  set_has_produce_combined_vcf();
  produce_combined_vcf_ = value;
}

// optional bool produce_tiledb_array = 4 [default = true];
inline bool ImportConfiguration::has_produce_tiledb_array() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImportConfiguration::set_has_produce_tiledb_array() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImportConfiguration::clear_has_produce_tiledb_array() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImportConfiguration::clear_produce_tiledb_array() {
  produce_tiledb_array_ = true;
  clear_has_produce_tiledb_array();
}
inline bool ImportConfiguration::produce_tiledb_array() const {
  return produce_tiledb_array_;
}
inline void ImportConfiguration::set_produce_tiledb_array(bool value) {
  set_has_produce_tiledb_array();
  produce_tiledb_array_ = value;
}

// repeated .com.intel.genomicsdb.Partition partitions = 5;
inline int ImportConfiguration::partitions_size() const {
  return partitions_.size();
}
inline void ImportConfiguration::clear_partitions() {
  partitions_.Clear();
}
inline const ::com::intel::genomicsdb::Partition& ImportConfiguration::partitions(int index) const {
  return partitions_.Get(index);
}
inline ::com::intel::genomicsdb::Partition* ImportConfiguration::mutable_partitions(int index) {
  return partitions_.Mutable(index);
}
inline ::com::intel::genomicsdb::Partition* ImportConfiguration::add_partitions() {
  return partitions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::intel::genomicsdb::Partition >&
ImportConfiguration::partitions() const {
  return partitions_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::intel::genomicsdb::Partition >*
ImportConfiguration::mutable_partitions() {
  return &partitions_;
}

// optional string vid_mapping_file = 6;
inline bool ImportConfiguration::has_vid_mapping_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImportConfiguration::set_has_vid_mapping_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImportConfiguration::clear_has_vid_mapping_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImportConfiguration::clear_vid_mapping_file() {
  if (vid_mapping_file_ != &::google::protobuf::internal::kEmptyString) {
    vid_mapping_file_->clear();
  }
  clear_has_vid_mapping_file();
}
inline const ::std::string& ImportConfiguration::vid_mapping_file() const {
  return *vid_mapping_file_;
}
inline void ImportConfiguration::set_vid_mapping_file(const ::std::string& value) {
  set_has_vid_mapping_file();
  if (vid_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    vid_mapping_file_ = new ::std::string;
  }
  vid_mapping_file_->assign(value);
}
inline void ImportConfiguration::set_vid_mapping_file(const char* value) {
  set_has_vid_mapping_file();
  if (vid_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    vid_mapping_file_ = new ::std::string;
  }
  vid_mapping_file_->assign(value);
}
inline void ImportConfiguration::set_vid_mapping_file(const char* value, size_t size) {
  set_has_vid_mapping_file();
  if (vid_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    vid_mapping_file_ = new ::std::string;
  }
  vid_mapping_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportConfiguration::mutable_vid_mapping_file() {
  set_has_vid_mapping_file();
  if (vid_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    vid_mapping_file_ = new ::std::string;
  }
  return vid_mapping_file_;
}
inline ::std::string* ImportConfiguration::release_vid_mapping_file() {
  clear_has_vid_mapping_file();
  if (vid_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vid_mapping_file_;
    vid_mapping_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImportConfiguration::set_allocated_vid_mapping_file(::std::string* vid_mapping_file) {
  if (vid_mapping_file_ != &::google::protobuf::internal::kEmptyString) {
    delete vid_mapping_file_;
  }
  if (vid_mapping_file) {
    set_has_vid_mapping_file();
    vid_mapping_file_ = vid_mapping_file;
  } else {
    clear_has_vid_mapping_file();
    vid_mapping_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string callset_mapping_file = 7;
inline bool ImportConfiguration::has_callset_mapping_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImportConfiguration::set_has_callset_mapping_file() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImportConfiguration::clear_has_callset_mapping_file() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImportConfiguration::clear_callset_mapping_file() {
  if (callset_mapping_file_ != &::google::protobuf::internal::kEmptyString) {
    callset_mapping_file_->clear();
  }
  clear_has_callset_mapping_file();
}
inline const ::std::string& ImportConfiguration::callset_mapping_file() const {
  return *callset_mapping_file_;
}
inline void ImportConfiguration::set_callset_mapping_file(const ::std::string& value) {
  set_has_callset_mapping_file();
  if (callset_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    callset_mapping_file_ = new ::std::string;
  }
  callset_mapping_file_->assign(value);
}
inline void ImportConfiguration::set_callset_mapping_file(const char* value) {
  set_has_callset_mapping_file();
  if (callset_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    callset_mapping_file_ = new ::std::string;
  }
  callset_mapping_file_->assign(value);
}
inline void ImportConfiguration::set_callset_mapping_file(const char* value, size_t size) {
  set_has_callset_mapping_file();
  if (callset_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    callset_mapping_file_ = new ::std::string;
  }
  callset_mapping_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportConfiguration::mutable_callset_mapping_file() {
  set_has_callset_mapping_file();
  if (callset_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    callset_mapping_file_ = new ::std::string;
  }
  return callset_mapping_file_;
}
inline ::std::string* ImportConfiguration::release_callset_mapping_file() {
  clear_has_callset_mapping_file();
  if (callset_mapping_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = callset_mapping_file_;
    callset_mapping_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImportConfiguration::set_allocated_callset_mapping_file(::std::string* callset_mapping_file) {
  if (callset_mapping_file_ != &::google::protobuf::internal::kEmptyString) {
    delete callset_mapping_file_;
  }
  if (callset_mapping_file) {
    set_has_callset_mapping_file();
    callset_mapping_file_ = callset_mapping_file;
  } else {
    clear_has_callset_mapping_file();
    callset_mapping_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 size_per_column_partition = 8 [default = 3000];
inline bool ImportConfiguration::has_size_per_column_partition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImportConfiguration::set_has_size_per_column_partition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImportConfiguration::clear_has_size_per_column_partition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImportConfiguration::clear_size_per_column_partition() {
  size_per_column_partition_ = GOOGLE_LONGLONG(3000);
  clear_has_size_per_column_partition();
}
inline ::google::protobuf::int64 ImportConfiguration::size_per_column_partition() const {
  return size_per_column_partition_;
}
inline void ImportConfiguration::set_size_per_column_partition(::google::protobuf::int64 value) {
  set_has_size_per_column_partition();
  size_per_column_partition_ = value;
}

// optional bool treat_deletions_as_intervals = 9 [default = true];
inline bool ImportConfiguration::has_treat_deletions_as_intervals() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImportConfiguration::set_has_treat_deletions_as_intervals() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImportConfiguration::clear_has_treat_deletions_as_intervals() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImportConfiguration::clear_treat_deletions_as_intervals() {
  treat_deletions_as_intervals_ = true;
  clear_has_treat_deletions_as_intervals();
}
inline bool ImportConfiguration::treat_deletions_as_intervals() const {
  return treat_deletions_as_intervals_;
}
inline void ImportConfiguration::set_treat_deletions_as_intervals(bool value) {
  set_has_treat_deletions_as_intervals();
  treat_deletions_as_intervals_ = value;
}

// optional int32 num_parallel_vcf_files = 10 [default = 1];
inline bool ImportConfiguration::has_num_parallel_vcf_files() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImportConfiguration::set_has_num_parallel_vcf_files() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImportConfiguration::clear_has_num_parallel_vcf_files() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImportConfiguration::clear_num_parallel_vcf_files() {
  num_parallel_vcf_files_ = 1;
  clear_has_num_parallel_vcf_files();
}
inline ::google::protobuf::int32 ImportConfiguration::num_parallel_vcf_files() const {
  return num_parallel_vcf_files_;
}
inline void ImportConfiguration::set_num_parallel_vcf_files(::google::protobuf::int32 value) {
  set_has_num_parallel_vcf_files();
  num_parallel_vcf_files_ = value;
}

// optional bool delete_and_create_tiledb_array = 11 [default = false];
inline bool ImportConfiguration::has_delete_and_create_tiledb_array() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImportConfiguration::set_has_delete_and_create_tiledb_array() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImportConfiguration::clear_has_delete_and_create_tiledb_array() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImportConfiguration::clear_delete_and_create_tiledb_array() {
  delete_and_create_tiledb_array_ = false;
  clear_has_delete_and_create_tiledb_array();
}
inline bool ImportConfiguration::delete_and_create_tiledb_array() const {
  return delete_and_create_tiledb_array_;
}
inline void ImportConfiguration::set_delete_and_create_tiledb_array(bool value) {
  set_has_delete_and_create_tiledb_array();
  delete_and_create_tiledb_array_ = value;
}

// optional bool do_ping_pong_buffering = 12 [default = true];
inline bool ImportConfiguration::has_do_ping_pong_buffering() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImportConfiguration::set_has_do_ping_pong_buffering() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImportConfiguration::clear_has_do_ping_pong_buffering() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImportConfiguration::clear_do_ping_pong_buffering() {
  do_ping_pong_buffering_ = true;
  clear_has_do_ping_pong_buffering();
}
inline bool ImportConfiguration::do_ping_pong_buffering() const {
  return do_ping_pong_buffering_;
}
inline void ImportConfiguration::set_do_ping_pong_buffering(bool value) {
  set_has_do_ping_pong_buffering();
  do_ping_pong_buffering_ = value;
}

// optional bool offload_vcf_output_processing = 13 [default = true];
inline bool ImportConfiguration::has_offload_vcf_output_processing() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImportConfiguration::set_has_offload_vcf_output_processing() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImportConfiguration::clear_has_offload_vcf_output_processing() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImportConfiguration::clear_offload_vcf_output_processing() {
  offload_vcf_output_processing_ = true;
  clear_has_offload_vcf_output_processing();
}
inline bool ImportConfiguration::offload_vcf_output_processing() const {
  return offload_vcf_output_processing_;
}
inline void ImportConfiguration::set_offload_vcf_output_processing(bool value) {
  set_has_offload_vcf_output_processing();
  offload_vcf_output_processing_ = value;
}

// optional bool discard_vcf_index = 14 [default = true];
inline bool ImportConfiguration::has_discard_vcf_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ImportConfiguration::set_has_discard_vcf_index() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ImportConfiguration::clear_has_discard_vcf_index() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ImportConfiguration::clear_discard_vcf_index() {
  discard_vcf_index_ = true;
  clear_has_discard_vcf_index();
}
inline bool ImportConfiguration::discard_vcf_index() const {
  return discard_vcf_index_;
}
inline void ImportConfiguration::set_discard_vcf_index(bool value) {
  set_has_discard_vcf_index();
  discard_vcf_index_ = value;
}

// optional bool compress_tiledb_array = 15 [default = true];
inline bool ImportConfiguration::has_compress_tiledb_array() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ImportConfiguration::set_has_compress_tiledb_array() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ImportConfiguration::clear_has_compress_tiledb_array() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ImportConfiguration::clear_compress_tiledb_array() {
  compress_tiledb_array_ = true;
  clear_has_compress_tiledb_array();
}
inline bool ImportConfiguration::compress_tiledb_array() const {
  return compress_tiledb_array_;
}
inline void ImportConfiguration::set_compress_tiledb_array(bool value) {
  set_has_compress_tiledb_array();
  compress_tiledb_array_ = value;
}

// optional int64 segment_size = 16 [default = 10485760];
inline bool ImportConfiguration::has_segment_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ImportConfiguration::set_has_segment_size() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ImportConfiguration::clear_has_segment_size() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ImportConfiguration::clear_segment_size() {
  segment_size_ = GOOGLE_LONGLONG(10485760);
  clear_has_segment_size();
}
inline ::google::protobuf::int64 ImportConfiguration::segment_size() const {
  return segment_size_;
}
inline void ImportConfiguration::set_segment_size(::google::protobuf::int64 value) {
  set_has_segment_size();
  segment_size_ = value;
}

// optional int64 num_cells_per_tile = 17 [default = 1000];
inline bool ImportConfiguration::has_num_cells_per_tile() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ImportConfiguration::set_has_num_cells_per_tile() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ImportConfiguration::clear_has_num_cells_per_tile() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ImportConfiguration::clear_num_cells_per_tile() {
  num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  clear_has_num_cells_per_tile();
}
inline ::google::protobuf::int64 ImportConfiguration::num_cells_per_tile() const {
  return num_cells_per_tile_;
}
inline void ImportConfiguration::set_num_cells_per_tile(::google::protobuf::int64 value) {
  set_has_num_cells_per_tile();
  num_cells_per_tile_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace genomicsdb
}  // namespace intel
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED
