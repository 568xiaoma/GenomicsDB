// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_callsets_mapping.proto

#ifndef PROTOBUF_genomicsdb_5fcallsets_5fmapping_2eproto__INCLUDED
#define PROTOBUF_genomicsdb_5fcallsets_5fmapping_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CallsetMap;
class CallsetMapDefaultTypeInternal;
extern CallsetMapDefaultTypeInternal _CallsetMap_default_instance_;
class SampleIDToTileDBIDMap;
class SampleIDToTileDBIDMapDefaultTypeInternal;
extern SampleIDToTileDBIDMapDefaultTypeInternal _SampleIDToTileDBIDMap_default_instance_;

namespace protobuf_genomicsdb_5fcallsets_5fmapping_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_genomicsdb_5fcallsets_5fmapping_2eproto

// ===================================================================

class SampleIDToTileDBIDMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SampleIDToTileDBIDMap) */ {
 public:
  SampleIDToTileDBIDMap();
  virtual ~SampleIDToTileDBIDMap();

  SampleIDToTileDBIDMap(const SampleIDToTileDBIDMap& from);

  inline SampleIDToTileDBIDMap& operator=(const SampleIDToTileDBIDMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleIDToTileDBIDMap& default_instance();

  static inline const SampleIDToTileDBIDMap* internal_default_instance() {
    return reinterpret_cast<const SampleIDToTileDBIDMap*>(
               &_SampleIDToTileDBIDMap_default_instance_);
  }

  void Swap(SampleIDToTileDBIDMap* other);

  // implements Message ----------------------------------------------

  inline SampleIDToTileDBIDMap* New() const PROTOBUF_FINAL { return New(NULL); }

  SampleIDToTileDBIDMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SampleIDToTileDBIDMap& from);
  void MergeFrom(const SampleIDToTileDBIDMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SampleIDToTileDBIDMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sample_name = 1;
  bool has_sample_name() const;
  void clear_sample_name();
  static const int kSampleNameFieldNumber = 1;
  const ::std::string& sample_name() const;
  void set_sample_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sample_name(::std::string&& value);
  #endif
  void set_sample_name(const char* value);
  void set_sample_name(const char* value, size_t size);
  ::std::string* mutable_sample_name();
  ::std::string* release_sample_name();
  void set_allocated_sample_name(::std::string* sample_name);

  // optional string stream_name = 4;
  bool has_stream_name() const;
  void clear_stream_name();
  static const int kStreamNameFieldNumber = 4;
  const ::std::string& stream_name() const;
  void set_stream_name(const ::std::string& value);
  #if LANG_CXX11
  void set_stream_name(::std::string&& value);
  #endif
  void set_stream_name(const char* value);
  void set_stream_name(const char* value, size_t size);
  ::std::string* mutable_stream_name();
  ::std::string* release_stream_name();
  void set_allocated_stream_name(::std::string* stream_name);

  // required int64 tiledb_row_index = 2;
  bool has_tiledb_row_index() const;
  void clear_tiledb_row_index();
  static const int kTiledbRowIndexFieldNumber = 2;
  ::google::protobuf::int64 tiledb_row_index() const;
  void set_tiledb_row_index(::google::protobuf::int64 value);

  // required int32 sample_vcf_index = 3;
  bool has_sample_vcf_index() const;
  void clear_sample_vcf_index();
  static const int kSampleVcfIndexFieldNumber = 3;
  ::google::protobuf::int32 sample_vcf_index() const;
  void set_sample_vcf_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SampleIDToTileDBIDMap)
 private:
  void set_has_sample_name();
  void clear_has_sample_name();
  void set_has_tiledb_row_index();
  void clear_has_tiledb_row_index();
  void set_has_sample_vcf_index();
  void clear_has_sample_vcf_index();
  void set_has_stream_name();
  void clear_has_stream_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sample_name_;
  ::google::protobuf::internal::ArenaStringPtr stream_name_;
  ::google::protobuf::int64 tiledb_row_index_;
  ::google::protobuf::int32 sample_vcf_index_;
  friend struct  protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CallsetMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CallsetMap) */ {
 public:
  CallsetMap();
  virtual ~CallsetMap();

  CallsetMap(const CallsetMap& from);

  inline CallsetMap& operator=(const CallsetMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallsetMap& default_instance();

  static inline const CallsetMap* internal_default_instance() {
    return reinterpret_cast<const CallsetMap*>(
               &_CallsetMap_default_instance_);
  }

  void Swap(CallsetMap* other);

  // implements Message ----------------------------------------------

  inline CallsetMap* New() const PROTOBUF_FINAL { return New(NULL); }

  CallsetMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CallsetMap& from);
  void MergeFrom(const CallsetMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CallsetMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SampleIDToTileDBIDMap callset_map = 1;
  int callset_map_size() const;
  void clear_callset_map();
  static const int kCallsetMapFieldNumber = 1;
  const ::SampleIDToTileDBIDMap& callset_map(int index) const;
  ::SampleIDToTileDBIDMap* mutable_callset_map(int index);
  ::SampleIDToTileDBIDMap* add_callset_map();
  ::google::protobuf::RepeatedPtrField< ::SampleIDToTileDBIDMap >*
      mutable_callset_map();
  const ::google::protobuf::RepeatedPtrField< ::SampleIDToTileDBIDMap >&
      callset_map() const;

  // @@protoc_insertion_point(class_scope:CallsetMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SampleIDToTileDBIDMap > callset_map_;
  friend struct  protobuf_genomicsdb_5fcallsets_5fmapping_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleIDToTileDBIDMap

// required string sample_name = 1;
inline bool SampleIDToTileDBIDMap::has_sample_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleIDToTileDBIDMap::set_has_sample_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleIDToTileDBIDMap::clear_has_sample_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleIDToTileDBIDMap::clear_sample_name() {
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sample_name();
}
inline const ::std::string& SampleIDToTileDBIDMap::sample_name() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.sample_name)
  return sample_name_.GetNoArena();
}
inline void SampleIDToTileDBIDMap::set_sample_name(const ::std::string& value) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.sample_name)
}
#if LANG_CXX11
inline void SampleIDToTileDBIDMap::set_sample_name(::std::string&& value) {
  set_has_sample_name();
  sample_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SampleIDToTileDBIDMap.sample_name)
}
#endif
inline void SampleIDToTileDBIDMap::set_sample_name(const char* value) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SampleIDToTileDBIDMap.sample_name)
}
inline void SampleIDToTileDBIDMap::set_sample_name(const char* value, size_t size) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SampleIDToTileDBIDMap.sample_name)
}
inline ::std::string* SampleIDToTileDBIDMap::mutable_sample_name() {
  set_has_sample_name();
  // @@protoc_insertion_point(field_mutable:SampleIDToTileDBIDMap.sample_name)
  return sample_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SampleIDToTileDBIDMap::release_sample_name() {
  // @@protoc_insertion_point(field_release:SampleIDToTileDBIDMap.sample_name)
  clear_has_sample_name();
  return sample_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleIDToTileDBIDMap::set_allocated_sample_name(::std::string* sample_name) {
  if (sample_name != NULL) {
    set_has_sample_name();
  } else {
    clear_has_sample_name();
  }
  sample_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample_name);
  // @@protoc_insertion_point(field_set_allocated:SampleIDToTileDBIDMap.sample_name)
}

// required int64 tiledb_row_index = 2;
inline bool SampleIDToTileDBIDMap::has_tiledb_row_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SampleIDToTileDBIDMap::set_has_tiledb_row_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SampleIDToTileDBIDMap::clear_has_tiledb_row_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SampleIDToTileDBIDMap::clear_tiledb_row_index() {
  tiledb_row_index_ = GOOGLE_LONGLONG(0);
  clear_has_tiledb_row_index();
}
inline ::google::protobuf::int64 SampleIDToTileDBIDMap::tiledb_row_index() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.tiledb_row_index)
  return tiledb_row_index_;
}
inline void SampleIDToTileDBIDMap::set_tiledb_row_index(::google::protobuf::int64 value) {
  set_has_tiledb_row_index();
  tiledb_row_index_ = value;
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.tiledb_row_index)
}

// required int32 sample_vcf_index = 3;
inline bool SampleIDToTileDBIDMap::has_sample_vcf_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SampleIDToTileDBIDMap::set_has_sample_vcf_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SampleIDToTileDBIDMap::clear_has_sample_vcf_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SampleIDToTileDBIDMap::clear_sample_vcf_index() {
  sample_vcf_index_ = 0;
  clear_has_sample_vcf_index();
}
inline ::google::protobuf::int32 SampleIDToTileDBIDMap::sample_vcf_index() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.sample_vcf_index)
  return sample_vcf_index_;
}
inline void SampleIDToTileDBIDMap::set_sample_vcf_index(::google::protobuf::int32 value) {
  set_has_sample_vcf_index();
  sample_vcf_index_ = value;
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.sample_vcf_index)
}

// optional string stream_name = 4;
inline bool SampleIDToTileDBIDMap::has_stream_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleIDToTileDBIDMap::set_has_stream_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleIDToTileDBIDMap::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleIDToTileDBIDMap::clear_stream_name() {
  stream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_name();
}
inline const ::std::string& SampleIDToTileDBIDMap::stream_name() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.stream_name)
  return stream_name_.GetNoArena();
}
inline void SampleIDToTileDBIDMap::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.stream_name)
}
#if LANG_CXX11
inline void SampleIDToTileDBIDMap::set_stream_name(::std::string&& value) {
  set_has_stream_name();
  stream_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SampleIDToTileDBIDMap.stream_name)
}
#endif
inline void SampleIDToTileDBIDMap::set_stream_name(const char* value) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SampleIDToTileDBIDMap.stream_name)
}
inline void SampleIDToTileDBIDMap::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SampleIDToTileDBIDMap.stream_name)
}
inline ::std::string* SampleIDToTileDBIDMap::mutable_stream_name() {
  set_has_stream_name();
  // @@protoc_insertion_point(field_mutable:SampleIDToTileDBIDMap.stream_name)
  return stream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SampleIDToTileDBIDMap::release_stream_name() {
  // @@protoc_insertion_point(field_release:SampleIDToTileDBIDMap.stream_name)
  clear_has_stream_name();
  return stream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleIDToTileDBIDMap::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name != NULL) {
    set_has_stream_name();
  } else {
    clear_has_stream_name();
  }
  stream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_name);
  // @@protoc_insertion_point(field_set_allocated:SampleIDToTileDBIDMap.stream_name)
}

// -------------------------------------------------------------------

// CallsetMap

// repeated .SampleIDToTileDBIDMap callset_map = 1;
inline int CallsetMap::callset_map_size() const {
  return callset_map_.size();
}
inline void CallsetMap::clear_callset_map() {
  callset_map_.Clear();
}
inline const ::SampleIDToTileDBIDMap& CallsetMap::callset_map(int index) const {
  // @@protoc_insertion_point(field_get:CallsetMap.callset_map)
  return callset_map_.Get(index);
}
inline ::SampleIDToTileDBIDMap* CallsetMap::mutable_callset_map(int index) {
  // @@protoc_insertion_point(field_mutable:CallsetMap.callset_map)
  return callset_map_.Mutable(index);
}
inline ::SampleIDToTileDBIDMap* CallsetMap::add_callset_map() {
  // @@protoc_insertion_point(field_add:CallsetMap.callset_map)
  return callset_map_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SampleIDToTileDBIDMap >*
CallsetMap::mutable_callset_map() {
  // @@protoc_insertion_point(field_mutable_list:CallsetMap.callset_map)
  return &callset_map_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SampleIDToTileDBIDMap >&
CallsetMap::callset_map() const {
  // @@protoc_insertion_point(field_list:CallsetMap.callset_map)
  return callset_map_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_genomicsdb_5fcallsets_5fmapping_2eproto__INCLUDED
