// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_import_config.proto

package com.intel.genomicsdb;

public final class GenomicsDBImportConfiguration {
  private GenomicsDBImportConfiguration() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class TileDBConfig extends
      com.google.protobuf.GeneratedMessage {
    // Use TileDBConfig.newBuilder() to construct.
    private TileDBConfig() {
      initFields();
    }
    private TileDBConfig(boolean noInit) {}
    
    private static final TileDBConfig defaultInstance;
    public static TileDBConfig getDefaultInstance() {
      return defaultInstance;
    }
    
    public TileDBConfig getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.intel.genomicsdb.GenomicsDBImportConfiguration.internal_static_TileDBConfig_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.intel.genomicsdb.GenomicsDBImportConfiguration.internal_static_TileDBConfig_fieldAccessorTable;
    }
    
    // optional string tiledb_workspace = 1;
    public static final int TILEDB_WORKSPACE_FIELD_NUMBER = 1;
    private boolean hasTiledbWorkspace;
    private java.lang.String tiledbWorkspace_ = "";
    public boolean hasTiledbWorkspace() { return hasTiledbWorkspace; }
    public java.lang.String getTiledbWorkspace() { return tiledbWorkspace_; }
    
    // optional string tiledb_array_name = 2;
    public static final int TILEDB_ARRAY_NAME_FIELD_NUMBER = 2;
    private boolean hasTiledbArrayName;
    private java.lang.String tiledbArrayName_ = "";
    public boolean hasTiledbArrayName() { return hasTiledbArrayName; }
    public java.lang.String getTiledbArrayName() { return tiledbArrayName_; }
    
    // optional bool compress_tiledb_array = 3 [default = true];
    public static final int COMPRESS_TILEDB_ARRAY_FIELD_NUMBER = 3;
    private boolean hasCompressTiledbArray;
    private boolean compressTiledbArray_ = true;
    public boolean hasCompressTiledbArray() { return hasCompressTiledbArray; }
    public boolean getCompressTiledbArray() { return compressTiledbArray_; }
    
    // optional int64 num_cells_per_tile = 4 [default = 1000];
    public static final int NUM_CELLS_PER_TILE_FIELD_NUMBER = 4;
    private boolean hasNumCellsPerTile;
    private long numCellsPerTile_ = 1000L;
    public boolean hasNumCellsPerTile() { return hasNumCellsPerTile; }
    public long getNumCellsPerTile() { return numCellsPerTile_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTiledbWorkspace()) {
        output.writeString(1, getTiledbWorkspace());
      }
      if (hasTiledbArrayName()) {
        output.writeString(2, getTiledbArrayName());
      }
      if (hasCompressTiledbArray()) {
        output.writeBool(3, getCompressTiledbArray());
      }
      if (hasNumCellsPerTile()) {
        output.writeInt64(4, getNumCellsPerTile());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTiledbWorkspace()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTiledbWorkspace());
      }
      if (hasTiledbArrayName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getTiledbArrayName());
      }
      if (hasCompressTiledbArray()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getCompressTiledbArray());
      }
      if (hasNumCellsPerTile()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, getNumCellsPerTile());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig result;
      
      // Construct using com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig();
        return builder;
      }
      
      protected com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDescriptor();
      }
      
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig getDefaultInstanceForType() {
        return com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig) {
          return mergeFrom((com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig other) {
        if (other == com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDefaultInstance()) return this;
        if (other.hasTiledbWorkspace()) {
          setTiledbWorkspace(other.getTiledbWorkspace());
        }
        if (other.hasTiledbArrayName()) {
          setTiledbArrayName(other.getTiledbArrayName());
        }
        if (other.hasCompressTiledbArray()) {
          setCompressTiledbArray(other.getCompressTiledbArray());
        }
        if (other.hasNumCellsPerTile()) {
          setNumCellsPerTile(other.getNumCellsPerTile());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setTiledbWorkspace(input.readString());
              break;
            }
            case 18: {
              setTiledbArrayName(input.readString());
              break;
            }
            case 24: {
              setCompressTiledbArray(input.readBool());
              break;
            }
            case 32: {
              setNumCellsPerTile(input.readInt64());
              break;
            }
          }
        }
      }
      
      
      // optional string tiledb_workspace = 1;
      public boolean hasTiledbWorkspace() {
        return result.hasTiledbWorkspace();
      }
      public java.lang.String getTiledbWorkspace() {
        return result.getTiledbWorkspace();
      }
      public Builder setTiledbWorkspace(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTiledbWorkspace = true;
        result.tiledbWorkspace_ = value;
        return this;
      }
      public Builder clearTiledbWorkspace() {
        result.hasTiledbWorkspace = false;
        result.tiledbWorkspace_ = getDefaultInstance().getTiledbWorkspace();
        return this;
      }
      
      // optional string tiledb_array_name = 2;
      public boolean hasTiledbArrayName() {
        return result.hasTiledbArrayName();
      }
      public java.lang.String getTiledbArrayName() {
        return result.getTiledbArrayName();
      }
      public Builder setTiledbArrayName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTiledbArrayName = true;
        result.tiledbArrayName_ = value;
        return this;
      }
      public Builder clearTiledbArrayName() {
        result.hasTiledbArrayName = false;
        result.tiledbArrayName_ = getDefaultInstance().getTiledbArrayName();
        return this;
      }
      
      // optional bool compress_tiledb_array = 3 [default = true];
      public boolean hasCompressTiledbArray() {
        return result.hasCompressTiledbArray();
      }
      public boolean getCompressTiledbArray() {
        return result.getCompressTiledbArray();
      }
      public Builder setCompressTiledbArray(boolean value) {
        result.hasCompressTiledbArray = true;
        result.compressTiledbArray_ = value;
        return this;
      }
      public Builder clearCompressTiledbArray() {
        result.hasCompressTiledbArray = false;
        result.compressTiledbArray_ = true;
        return this;
      }
      
      // optional int64 num_cells_per_tile = 4 [default = 1000];
      public boolean hasNumCellsPerTile() {
        return result.hasNumCellsPerTile();
      }
      public long getNumCellsPerTile() {
        return result.getNumCellsPerTile();
      }
      public Builder setNumCellsPerTile(long value) {
        result.hasNumCellsPerTile = true;
        result.numCellsPerTile_ = value;
        return this;
      }
      public Builder clearNumCellsPerTile() {
        result.hasNumCellsPerTile = false;
        result.numCellsPerTile_ = 1000L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:TileDBConfig)
    }
    
    static {
      defaultInstance = new TileDBConfig(true);
      com.intel.genomicsdb.GenomicsDBImportConfiguration.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:TileDBConfig)
  }
  
  public static final class Partition extends
      com.google.protobuf.GeneratedMessage {
    // Use Partition.newBuilder() to construct.
    private Partition() {
      initFields();
    }
    private Partition(boolean noInit) {}
    
    private static final Partition defaultInstance;
    public static Partition getDefaultInstance() {
      return defaultInstance;
    }
    
    public Partition getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.intel.genomicsdb.GenomicsDBImportConfiguration.internal_static_Partition_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.intel.genomicsdb.GenomicsDBImportConfiguration.internal_static_Partition_fieldAccessorTable;
    }
    
    // required int64 begin = 1;
    public static final int BEGIN_FIELD_NUMBER = 1;
    private boolean hasBegin;
    private long begin_ = 0L;
    public boolean hasBegin() { return hasBegin; }
    public long getBegin() { return begin_; }
    
    // optional .TileDBConfig tiledb_config = 2;
    public static final int TILEDB_CONFIG_FIELD_NUMBER = 2;
    private boolean hasTiledbConfig;
    private com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig tiledbConfig_;
    public boolean hasTiledbConfig() { return hasTiledbConfig; }
    public com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig getTiledbConfig() { return tiledbConfig_; }
    
    // optional string vcf_file_name = 3;
    public static final int VCF_FILE_NAME_FIELD_NUMBER = 3;
    private boolean hasVcfFileName;
    private java.lang.String vcfFileName_ = "";
    public boolean hasVcfFileName() { return hasVcfFileName; }
    public java.lang.String getVcfFileName() { return vcfFileName_; }
    
    private void initFields() {
      tiledbConfig_ = com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasBegin) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasBegin()) {
        output.writeInt64(1, getBegin());
      }
      if (hasTiledbConfig()) {
        output.writeMessage(2, getTiledbConfig());
      }
      if (hasVcfFileName()) {
        output.writeString(3, getVcfFileName());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasBegin()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getBegin());
      }
      if (hasTiledbConfig()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTiledbConfig());
      }
      if (hasVcfFileName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getVcfFileName());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition result;
      
      // Construct using com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition();
        return builder;
      }
      
      protected com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.getDescriptor();
      }
      
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition getDefaultInstanceForType() {
        return com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition) {
          return mergeFrom((com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition other) {
        if (other == com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.getDefaultInstance()) return this;
        if (other.hasBegin()) {
          setBegin(other.getBegin());
        }
        if (other.hasTiledbConfig()) {
          mergeTiledbConfig(other.getTiledbConfig());
        }
        if (other.hasVcfFileName()) {
          setVcfFileName(other.getVcfFileName());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setBegin(input.readInt64());
              break;
            }
            case 18: {
              com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.Builder subBuilder = com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.newBuilder();
              if (hasTiledbConfig()) {
                subBuilder.mergeFrom(getTiledbConfig());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTiledbConfig(subBuilder.buildPartial());
              break;
            }
            case 26: {
              setVcfFileName(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required int64 begin = 1;
      public boolean hasBegin() {
        return result.hasBegin();
      }
      public long getBegin() {
        return result.getBegin();
      }
      public Builder setBegin(long value) {
        result.hasBegin = true;
        result.begin_ = value;
        return this;
      }
      public Builder clearBegin() {
        result.hasBegin = false;
        result.begin_ = 0L;
        return this;
      }
      
      // optional .TileDBConfig tiledb_config = 2;
      public boolean hasTiledbConfig() {
        return result.hasTiledbConfig();
      }
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig getTiledbConfig() {
        return result.getTiledbConfig();
      }
      public Builder setTiledbConfig(com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTiledbConfig = true;
        result.tiledbConfig_ = value;
        return this;
      }
      public Builder setTiledbConfig(com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.Builder builderForValue) {
        result.hasTiledbConfig = true;
        result.tiledbConfig_ = builderForValue.build();
        return this;
      }
      public Builder mergeTiledbConfig(com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig value) {
        if (result.hasTiledbConfig() &&
            result.tiledbConfig_ != com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDefaultInstance()) {
          result.tiledbConfig_ =
            com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.newBuilder(result.tiledbConfig_).mergeFrom(value).buildPartial();
        } else {
          result.tiledbConfig_ = value;
        }
        result.hasTiledbConfig = true;
        return this;
      }
      public Builder clearTiledbConfig() {
        result.hasTiledbConfig = false;
        result.tiledbConfig_ = com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDefaultInstance();
        return this;
      }
      
      // optional string vcf_file_name = 3;
      public boolean hasVcfFileName() {
        return result.hasVcfFileName();
      }
      public java.lang.String getVcfFileName() {
        return result.getVcfFileName();
      }
      public Builder setVcfFileName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasVcfFileName = true;
        result.vcfFileName_ = value;
        return this;
      }
      public Builder clearVcfFileName() {
        result.hasVcfFileName = false;
        result.vcfFileName_ = getDefaultInstance().getVcfFileName();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Partition)
    }
    
    static {
      defaultInstance = new Partition(true);
      com.intel.genomicsdb.GenomicsDBImportConfiguration.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Partition)
  }
  
  public static final class ImportConfiguration extends
      com.google.protobuf.GeneratedMessage {
    // Use ImportConfiguration.newBuilder() to construct.
    private ImportConfiguration() {
      initFields();
    }
    private ImportConfiguration(boolean noInit) {}
    
    private static final ImportConfiguration defaultInstance;
    public static ImportConfiguration getDefaultInstance() {
      return defaultInstance;
    }
    
    public ImportConfiguration getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.intel.genomicsdb.GenomicsDBImportConfiguration.internal_static_ImportConfiguration_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.intel.genomicsdb.GenomicsDBImportConfiguration.internal_static_ImportConfiguration_fieldAccessorTable;
    }
    
    // required bool row_based_partitioning = 1 [default = false];
    public static final int ROW_BASED_PARTITIONING_FIELD_NUMBER = 1;
    private boolean hasRowBasedPartitioning;
    private boolean rowBasedPartitioning_ = false;
    public boolean hasRowBasedPartitioning() { return hasRowBasedPartitioning; }
    public boolean getRowBasedPartitioning() { return rowBasedPartitioning_; }
    
    // optional bool produce_combined_vcf = 2 [default = false];
    public static final int PRODUCE_COMBINED_VCF_FIELD_NUMBER = 2;
    private boolean hasProduceCombinedVcf;
    private boolean produceCombinedVcf_ = false;
    public boolean hasProduceCombinedVcf() { return hasProduceCombinedVcf; }
    public boolean getProduceCombinedVcf() { return produceCombinedVcf_; }
    
    // optional bool produce_tiledb_array = 3 [default = true];
    public static final int PRODUCE_TILEDB_ARRAY_FIELD_NUMBER = 3;
    private boolean hasProduceTiledbArray;
    private boolean produceTiledbArray_ = true;
    public boolean hasProduceTiledbArray() { return hasProduceTiledbArray; }
    public boolean getProduceTiledbArray() { return produceTiledbArray_; }
    
    // repeated .Partition column_partitions = 4;
    public static final int COLUMN_PARTITIONS_FIELD_NUMBER = 4;
    private java.util.List<com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition> columnPartitions_ =
      java.util.Collections.emptyList();
    public java.util.List<com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition> getColumnPartitionsList() {
      return columnPartitions_;
    }
    public int getColumnPartitionsCount() { return columnPartitions_.size(); }
    public com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition getColumnPartitions(int index) {
      return columnPartitions_.get(index);
    }
    
    // optional string vid_mapping_file = 5;
    public static final int VID_MAPPING_FILE_FIELD_NUMBER = 5;
    private boolean hasVidMappingFile;
    private java.lang.String vidMappingFile_ = "";
    public boolean hasVidMappingFile() { return hasVidMappingFile; }
    public java.lang.String getVidMappingFile() { return vidMappingFile_; }
    
    // optional string callset_mapping_file = 6;
    public static final int CALLSET_MAPPING_FILE_FIELD_NUMBER = 6;
    private boolean hasCallsetMappingFile;
    private java.lang.String callsetMappingFile_ = "";
    public boolean hasCallsetMappingFile() { return hasCallsetMappingFile; }
    public java.lang.String getCallsetMappingFile() { return callsetMappingFile_; }
    
    // optional int64 size_per_column_partition = 7 [default = 3000];
    public static final int SIZE_PER_COLUMN_PARTITION_FIELD_NUMBER = 7;
    private boolean hasSizePerColumnPartition;
    private long sizePerColumnPartition_ = 3000L;
    public boolean hasSizePerColumnPartition() { return hasSizePerColumnPartition; }
    public long getSizePerColumnPartition() { return sizePerColumnPartition_; }
    
    // optional bool treat_deletions_as_intervals = 8 [default = true];
    public static final int TREAT_DELETIONS_AS_INTERVALS_FIELD_NUMBER = 8;
    private boolean hasTreatDeletionsAsIntervals;
    private boolean treatDeletionsAsIntervals_ = true;
    public boolean hasTreatDeletionsAsIntervals() { return hasTreatDeletionsAsIntervals; }
    public boolean getTreatDeletionsAsIntervals() { return treatDeletionsAsIntervals_; }
    
    // optional int32 num_parallel_vcf_files = 9 [default = 1];
    public static final int NUM_PARALLEL_VCF_FILES_FIELD_NUMBER = 9;
    private boolean hasNumParallelVcfFiles;
    private int numParallelVcfFiles_ = 1;
    public boolean hasNumParallelVcfFiles() { return hasNumParallelVcfFiles; }
    public int getNumParallelVcfFiles() { return numParallelVcfFiles_; }
    
    // optional bool delete_and_create_tiledb_array = 10 [default = false];
    public static final int DELETE_AND_CREATE_TILEDB_ARRAY_FIELD_NUMBER = 10;
    private boolean hasDeleteAndCreateTiledbArray;
    private boolean deleteAndCreateTiledbArray_ = false;
    public boolean hasDeleteAndCreateTiledbArray() { return hasDeleteAndCreateTiledbArray; }
    public boolean getDeleteAndCreateTiledbArray() { return deleteAndCreateTiledbArray_; }
    
    // optional bool do_ping_pong_buffering = 11 [default = true];
    public static final int DO_PING_PONG_BUFFERING_FIELD_NUMBER = 11;
    private boolean hasDoPingPongBuffering;
    private boolean doPingPongBuffering_ = true;
    public boolean hasDoPingPongBuffering() { return hasDoPingPongBuffering; }
    public boolean getDoPingPongBuffering() { return doPingPongBuffering_; }
    
    // optional bool offload_vcf_output_processing = 12 [default = true];
    public static final int OFFLOAD_VCF_OUTPUT_PROCESSING_FIELD_NUMBER = 12;
    private boolean hasOffloadVcfOutputProcessing;
    private boolean offloadVcfOutputProcessing_ = true;
    public boolean hasOffloadVcfOutputProcessing() { return hasOffloadVcfOutputProcessing; }
    public boolean getOffloadVcfOutputProcessing() { return offloadVcfOutputProcessing_; }
    
    // optional bool discard_vcf_index = 13 [default = true];
    public static final int DISCARD_VCF_INDEX_FIELD_NUMBER = 13;
    private boolean hasDiscardVcfIndex;
    private boolean discardVcfIndex_ = true;
    public boolean hasDiscardVcfIndex() { return hasDiscardVcfIndex; }
    public boolean getDiscardVcfIndex() { return discardVcfIndex_; }
    
    // optional int64 segment_size = 14 [default = 10485760];
    public static final int SEGMENT_SIZE_FIELD_NUMBER = 14;
    private boolean hasSegmentSize;
    private long segmentSize_ = 10485760L;
    public boolean hasSegmentSize() { return hasSegmentSize; }
    public long getSegmentSize() { return segmentSize_; }
    
    // optional .TileDBConfig tiledb_config = 15;
    public static final int TILEDB_CONFIG_FIELD_NUMBER = 15;
    private boolean hasTiledbConfig;
    private com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig tiledbConfig_;
    public boolean hasTiledbConfig() { return hasTiledbConfig; }
    public com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig getTiledbConfig() { return tiledbConfig_; }
    
    private void initFields() {
      tiledbConfig_ = com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasRowBasedPartitioning) return false;
      for (com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition element : getColumnPartitionsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasRowBasedPartitioning()) {
        output.writeBool(1, getRowBasedPartitioning());
      }
      if (hasProduceCombinedVcf()) {
        output.writeBool(2, getProduceCombinedVcf());
      }
      if (hasProduceTiledbArray()) {
        output.writeBool(3, getProduceTiledbArray());
      }
      for (com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition element : getColumnPartitionsList()) {
        output.writeMessage(4, element);
      }
      if (hasVidMappingFile()) {
        output.writeString(5, getVidMappingFile());
      }
      if (hasCallsetMappingFile()) {
        output.writeString(6, getCallsetMappingFile());
      }
      if (hasSizePerColumnPartition()) {
        output.writeInt64(7, getSizePerColumnPartition());
      }
      if (hasTreatDeletionsAsIntervals()) {
        output.writeBool(8, getTreatDeletionsAsIntervals());
      }
      if (hasNumParallelVcfFiles()) {
        output.writeInt32(9, getNumParallelVcfFiles());
      }
      if (hasDeleteAndCreateTiledbArray()) {
        output.writeBool(10, getDeleteAndCreateTiledbArray());
      }
      if (hasDoPingPongBuffering()) {
        output.writeBool(11, getDoPingPongBuffering());
      }
      if (hasOffloadVcfOutputProcessing()) {
        output.writeBool(12, getOffloadVcfOutputProcessing());
      }
      if (hasDiscardVcfIndex()) {
        output.writeBool(13, getDiscardVcfIndex());
      }
      if (hasSegmentSize()) {
        output.writeInt64(14, getSegmentSize());
      }
      if (hasTiledbConfig()) {
        output.writeMessage(15, getTiledbConfig());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasRowBasedPartitioning()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, getRowBasedPartitioning());
      }
      if (hasProduceCombinedVcf()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getProduceCombinedVcf());
      }
      if (hasProduceTiledbArray()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getProduceTiledbArray());
      }
      for (com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition element : getColumnPartitionsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, element);
      }
      if (hasVidMappingFile()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getVidMappingFile());
      }
      if (hasCallsetMappingFile()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getCallsetMappingFile());
      }
      if (hasSizePerColumnPartition()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, getSizePerColumnPartition());
      }
      if (hasTreatDeletionsAsIntervals()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, getTreatDeletionsAsIntervals());
      }
      if (hasNumParallelVcfFiles()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getNumParallelVcfFiles());
      }
      if (hasDeleteAndCreateTiledbArray()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, getDeleteAndCreateTiledbArray());
      }
      if (hasDoPingPongBuffering()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, getDoPingPongBuffering());
      }
      if (hasOffloadVcfOutputProcessing()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, getOffloadVcfOutputProcessing());
      }
      if (hasDiscardVcfIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, getDiscardVcfIndex());
      }
      if (hasSegmentSize()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, getSegmentSize());
      }
      if (hasTiledbConfig()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getTiledbConfig());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration result;
      
      // Construct using com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration();
        return builder;
      }
      
      protected com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration.getDescriptor();
      }
      
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration getDefaultInstanceForType() {
        return com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.columnPartitions_ != java.util.Collections.EMPTY_LIST) {
          result.columnPartitions_ =
            java.util.Collections.unmodifiableList(result.columnPartitions_);
        }
        com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration) {
          return mergeFrom((com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration other) {
        if (other == com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration.getDefaultInstance()) return this;
        if (other.hasRowBasedPartitioning()) {
          setRowBasedPartitioning(other.getRowBasedPartitioning());
        }
        if (other.hasProduceCombinedVcf()) {
          setProduceCombinedVcf(other.getProduceCombinedVcf());
        }
        if (other.hasProduceTiledbArray()) {
          setProduceTiledbArray(other.getProduceTiledbArray());
        }
        if (!other.columnPartitions_.isEmpty()) {
          if (result.columnPartitions_.isEmpty()) {
            result.columnPartitions_ = new java.util.ArrayList<com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition>();
          }
          result.columnPartitions_.addAll(other.columnPartitions_);
        }
        if (other.hasVidMappingFile()) {
          setVidMappingFile(other.getVidMappingFile());
        }
        if (other.hasCallsetMappingFile()) {
          setCallsetMappingFile(other.getCallsetMappingFile());
        }
        if (other.hasSizePerColumnPartition()) {
          setSizePerColumnPartition(other.getSizePerColumnPartition());
        }
        if (other.hasTreatDeletionsAsIntervals()) {
          setTreatDeletionsAsIntervals(other.getTreatDeletionsAsIntervals());
        }
        if (other.hasNumParallelVcfFiles()) {
          setNumParallelVcfFiles(other.getNumParallelVcfFiles());
        }
        if (other.hasDeleteAndCreateTiledbArray()) {
          setDeleteAndCreateTiledbArray(other.getDeleteAndCreateTiledbArray());
        }
        if (other.hasDoPingPongBuffering()) {
          setDoPingPongBuffering(other.getDoPingPongBuffering());
        }
        if (other.hasOffloadVcfOutputProcessing()) {
          setOffloadVcfOutputProcessing(other.getOffloadVcfOutputProcessing());
        }
        if (other.hasDiscardVcfIndex()) {
          setDiscardVcfIndex(other.getDiscardVcfIndex());
        }
        if (other.hasSegmentSize()) {
          setSegmentSize(other.getSegmentSize());
        }
        if (other.hasTiledbConfig()) {
          mergeTiledbConfig(other.getTiledbConfig());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setRowBasedPartitioning(input.readBool());
              break;
            }
            case 16: {
              setProduceCombinedVcf(input.readBool());
              break;
            }
            case 24: {
              setProduceTiledbArray(input.readBool());
              break;
            }
            case 34: {
              com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.Builder subBuilder = com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addColumnPartitions(subBuilder.buildPartial());
              break;
            }
            case 42: {
              setVidMappingFile(input.readString());
              break;
            }
            case 50: {
              setCallsetMappingFile(input.readString());
              break;
            }
            case 56: {
              setSizePerColumnPartition(input.readInt64());
              break;
            }
            case 64: {
              setTreatDeletionsAsIntervals(input.readBool());
              break;
            }
            case 72: {
              setNumParallelVcfFiles(input.readInt32());
              break;
            }
            case 80: {
              setDeleteAndCreateTiledbArray(input.readBool());
              break;
            }
            case 88: {
              setDoPingPongBuffering(input.readBool());
              break;
            }
            case 96: {
              setOffloadVcfOutputProcessing(input.readBool());
              break;
            }
            case 104: {
              setDiscardVcfIndex(input.readBool());
              break;
            }
            case 112: {
              setSegmentSize(input.readInt64());
              break;
            }
            case 122: {
              com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.Builder subBuilder = com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.newBuilder();
              if (hasTiledbConfig()) {
                subBuilder.mergeFrom(getTiledbConfig());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTiledbConfig(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required bool row_based_partitioning = 1 [default = false];
      public boolean hasRowBasedPartitioning() {
        return result.hasRowBasedPartitioning();
      }
      public boolean getRowBasedPartitioning() {
        return result.getRowBasedPartitioning();
      }
      public Builder setRowBasedPartitioning(boolean value) {
        result.hasRowBasedPartitioning = true;
        result.rowBasedPartitioning_ = value;
        return this;
      }
      public Builder clearRowBasedPartitioning() {
        result.hasRowBasedPartitioning = false;
        result.rowBasedPartitioning_ = false;
        return this;
      }
      
      // optional bool produce_combined_vcf = 2 [default = false];
      public boolean hasProduceCombinedVcf() {
        return result.hasProduceCombinedVcf();
      }
      public boolean getProduceCombinedVcf() {
        return result.getProduceCombinedVcf();
      }
      public Builder setProduceCombinedVcf(boolean value) {
        result.hasProduceCombinedVcf = true;
        result.produceCombinedVcf_ = value;
        return this;
      }
      public Builder clearProduceCombinedVcf() {
        result.hasProduceCombinedVcf = false;
        result.produceCombinedVcf_ = false;
        return this;
      }
      
      // optional bool produce_tiledb_array = 3 [default = true];
      public boolean hasProduceTiledbArray() {
        return result.hasProduceTiledbArray();
      }
      public boolean getProduceTiledbArray() {
        return result.getProduceTiledbArray();
      }
      public Builder setProduceTiledbArray(boolean value) {
        result.hasProduceTiledbArray = true;
        result.produceTiledbArray_ = value;
        return this;
      }
      public Builder clearProduceTiledbArray() {
        result.hasProduceTiledbArray = false;
        result.produceTiledbArray_ = true;
        return this;
      }
      
      // repeated .Partition column_partitions = 4;
      public java.util.List<com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition> getColumnPartitionsList() {
        return java.util.Collections.unmodifiableList(result.columnPartitions_);
      }
      public int getColumnPartitionsCount() {
        return result.getColumnPartitionsCount();
      }
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition getColumnPartitions(int index) {
        return result.getColumnPartitions(index);
      }
      public Builder setColumnPartitions(int index, com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.columnPartitions_.set(index, value);
        return this;
      }
      public Builder setColumnPartitions(int index, com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.Builder builderForValue) {
        result.columnPartitions_.set(index, builderForValue.build());
        return this;
      }
      public Builder addColumnPartitions(com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.columnPartitions_.isEmpty()) {
          result.columnPartitions_ = new java.util.ArrayList<com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition>();
        }
        result.columnPartitions_.add(value);
        return this;
      }
      public Builder addColumnPartitions(com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.Builder builderForValue) {
        if (result.columnPartitions_.isEmpty()) {
          result.columnPartitions_ = new java.util.ArrayList<com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition>();
        }
        result.columnPartitions_.add(builderForValue.build());
        return this;
      }
      public Builder addAllColumnPartitions(
          java.lang.Iterable<? extends com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition> values) {
        if (result.columnPartitions_.isEmpty()) {
          result.columnPartitions_ = new java.util.ArrayList<com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition>();
        }
        super.addAll(values, result.columnPartitions_);
        return this;
      }
      public Builder clearColumnPartitions() {
        result.columnPartitions_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string vid_mapping_file = 5;
      public boolean hasVidMappingFile() {
        return result.hasVidMappingFile();
      }
      public java.lang.String getVidMappingFile() {
        return result.getVidMappingFile();
      }
      public Builder setVidMappingFile(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasVidMappingFile = true;
        result.vidMappingFile_ = value;
        return this;
      }
      public Builder clearVidMappingFile() {
        result.hasVidMappingFile = false;
        result.vidMappingFile_ = getDefaultInstance().getVidMappingFile();
        return this;
      }
      
      // optional string callset_mapping_file = 6;
      public boolean hasCallsetMappingFile() {
        return result.hasCallsetMappingFile();
      }
      public java.lang.String getCallsetMappingFile() {
        return result.getCallsetMappingFile();
      }
      public Builder setCallsetMappingFile(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasCallsetMappingFile = true;
        result.callsetMappingFile_ = value;
        return this;
      }
      public Builder clearCallsetMappingFile() {
        result.hasCallsetMappingFile = false;
        result.callsetMappingFile_ = getDefaultInstance().getCallsetMappingFile();
        return this;
      }
      
      // optional int64 size_per_column_partition = 7 [default = 3000];
      public boolean hasSizePerColumnPartition() {
        return result.hasSizePerColumnPartition();
      }
      public long getSizePerColumnPartition() {
        return result.getSizePerColumnPartition();
      }
      public Builder setSizePerColumnPartition(long value) {
        result.hasSizePerColumnPartition = true;
        result.sizePerColumnPartition_ = value;
        return this;
      }
      public Builder clearSizePerColumnPartition() {
        result.hasSizePerColumnPartition = false;
        result.sizePerColumnPartition_ = 3000L;
        return this;
      }
      
      // optional bool treat_deletions_as_intervals = 8 [default = true];
      public boolean hasTreatDeletionsAsIntervals() {
        return result.hasTreatDeletionsAsIntervals();
      }
      public boolean getTreatDeletionsAsIntervals() {
        return result.getTreatDeletionsAsIntervals();
      }
      public Builder setTreatDeletionsAsIntervals(boolean value) {
        result.hasTreatDeletionsAsIntervals = true;
        result.treatDeletionsAsIntervals_ = value;
        return this;
      }
      public Builder clearTreatDeletionsAsIntervals() {
        result.hasTreatDeletionsAsIntervals = false;
        result.treatDeletionsAsIntervals_ = true;
        return this;
      }
      
      // optional int32 num_parallel_vcf_files = 9 [default = 1];
      public boolean hasNumParallelVcfFiles() {
        return result.hasNumParallelVcfFiles();
      }
      public int getNumParallelVcfFiles() {
        return result.getNumParallelVcfFiles();
      }
      public Builder setNumParallelVcfFiles(int value) {
        result.hasNumParallelVcfFiles = true;
        result.numParallelVcfFiles_ = value;
        return this;
      }
      public Builder clearNumParallelVcfFiles() {
        result.hasNumParallelVcfFiles = false;
        result.numParallelVcfFiles_ = 1;
        return this;
      }
      
      // optional bool delete_and_create_tiledb_array = 10 [default = false];
      public boolean hasDeleteAndCreateTiledbArray() {
        return result.hasDeleteAndCreateTiledbArray();
      }
      public boolean getDeleteAndCreateTiledbArray() {
        return result.getDeleteAndCreateTiledbArray();
      }
      public Builder setDeleteAndCreateTiledbArray(boolean value) {
        result.hasDeleteAndCreateTiledbArray = true;
        result.deleteAndCreateTiledbArray_ = value;
        return this;
      }
      public Builder clearDeleteAndCreateTiledbArray() {
        result.hasDeleteAndCreateTiledbArray = false;
        result.deleteAndCreateTiledbArray_ = false;
        return this;
      }
      
      // optional bool do_ping_pong_buffering = 11 [default = true];
      public boolean hasDoPingPongBuffering() {
        return result.hasDoPingPongBuffering();
      }
      public boolean getDoPingPongBuffering() {
        return result.getDoPingPongBuffering();
      }
      public Builder setDoPingPongBuffering(boolean value) {
        result.hasDoPingPongBuffering = true;
        result.doPingPongBuffering_ = value;
        return this;
      }
      public Builder clearDoPingPongBuffering() {
        result.hasDoPingPongBuffering = false;
        result.doPingPongBuffering_ = true;
        return this;
      }
      
      // optional bool offload_vcf_output_processing = 12 [default = true];
      public boolean hasOffloadVcfOutputProcessing() {
        return result.hasOffloadVcfOutputProcessing();
      }
      public boolean getOffloadVcfOutputProcessing() {
        return result.getOffloadVcfOutputProcessing();
      }
      public Builder setOffloadVcfOutputProcessing(boolean value) {
        result.hasOffloadVcfOutputProcessing = true;
        result.offloadVcfOutputProcessing_ = value;
        return this;
      }
      public Builder clearOffloadVcfOutputProcessing() {
        result.hasOffloadVcfOutputProcessing = false;
        result.offloadVcfOutputProcessing_ = true;
        return this;
      }
      
      // optional bool discard_vcf_index = 13 [default = true];
      public boolean hasDiscardVcfIndex() {
        return result.hasDiscardVcfIndex();
      }
      public boolean getDiscardVcfIndex() {
        return result.getDiscardVcfIndex();
      }
      public Builder setDiscardVcfIndex(boolean value) {
        result.hasDiscardVcfIndex = true;
        result.discardVcfIndex_ = value;
        return this;
      }
      public Builder clearDiscardVcfIndex() {
        result.hasDiscardVcfIndex = false;
        result.discardVcfIndex_ = true;
        return this;
      }
      
      // optional int64 segment_size = 14 [default = 10485760];
      public boolean hasSegmentSize() {
        return result.hasSegmentSize();
      }
      public long getSegmentSize() {
        return result.getSegmentSize();
      }
      public Builder setSegmentSize(long value) {
        result.hasSegmentSize = true;
        result.segmentSize_ = value;
        return this;
      }
      public Builder clearSegmentSize() {
        result.hasSegmentSize = false;
        result.segmentSize_ = 10485760L;
        return this;
      }
      
      // optional .TileDBConfig tiledb_config = 15;
      public boolean hasTiledbConfig() {
        return result.hasTiledbConfig();
      }
      public com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig getTiledbConfig() {
        return result.getTiledbConfig();
      }
      public Builder setTiledbConfig(com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTiledbConfig = true;
        result.tiledbConfig_ = value;
        return this;
      }
      public Builder setTiledbConfig(com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.Builder builderForValue) {
        result.hasTiledbConfig = true;
        result.tiledbConfig_ = builderForValue.build();
        return this;
      }
      public Builder mergeTiledbConfig(com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig value) {
        if (result.hasTiledbConfig() &&
            result.tiledbConfig_ != com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDefaultInstance()) {
          result.tiledbConfig_ =
            com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.newBuilder(result.tiledbConfig_).mergeFrom(value).buildPartial();
        } else {
          result.tiledbConfig_ = value;
        }
        result.hasTiledbConfig = true;
        return this;
      }
      public Builder clearTiledbConfig() {
        result.hasTiledbConfig = false;
        result.tiledbConfig_ = com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:ImportConfiguration)
    }
    
    static {
      defaultInstance = new ImportConfiguration(true);
      com.intel.genomicsdb.GenomicsDBImportConfiguration.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ImportConfiguration)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TileDBConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TileDBConfig_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Partition_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Partition_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ImportConfiguration_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ImportConfiguration_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\036genomicsdb_import_config.proto\"\212\001\n\014Til" +
      "eDBConfig\022\030\n\020tiledb_workspace\030\001 \001(\t\022\031\n\021t" +
      "iledb_array_name\030\002 \001(\t\022#\n\025compress_tiled" +
      "b_array\030\003 \001(\010:\004true\022 \n\022num_cells_per_til" +
      "e\030\004 \001(\003:\0041000\"W\n\tPartition\022\r\n\005begin\030\001 \002(" +
      "\003\022$\n\rtiledb_config\030\002 \001(\0132\r.TileDBConfig\022" +
      "\025\n\rvcf_file_name\030\003 \001(\t\"\305\004\n\023ImportConfigu" +
      "ration\022%\n\026row_based_partitioning\030\001 \002(\010:\005" +
      "false\022#\n\024produce_combined_vcf\030\002 \001(\010:\005fal" +
      "se\022\"\n\024produce_tiledb_array\030\003 \001(\010:\004true\022%",
      "\n\021column_partitions\030\004 \003(\0132\n.Partition\022\030\n" +
      "\020vid_mapping_file\030\005 \001(\t\022\034\n\024callset_mappi" +
      "ng_file\030\006 \001(\t\022\'\n\031size_per_column_partiti" +
      "on\030\007 \001(\003:\0043000\022*\n\034treat_deletions_as_int" +
      "ervals\030\010 \001(\010:\004true\022!\n\026num_parallel_vcf_f" +
      "iles\030\t \001(\005:\0011\022-\n\036delete_and_create_tiled" +
      "b_array\030\n \001(\010:\005false\022$\n\026do_ping_pong_buf" +
      "fering\030\013 \001(\010:\004true\022+\n\035offload_vcf_output" +
      "_processing\030\014 \001(\010:\004true\022\037\n\021discard_vcf_i" +
      "ndex\030\r \001(\010:\004true\022\036\n\014segment_size\030\016 \001(\003:\010",
      "10485760\022$\n\rtiledb_config\030\017 \001(\0132\r.TileDB" +
      "ConfigB5\n\024com.intel.genomicsdbB\035Genomics" +
      "DBImportConfiguration"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_TileDBConfig_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_TileDBConfig_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TileDBConfig_descriptor,
              new java.lang.String[] { "TiledbWorkspace", "TiledbArrayName", "CompressTiledbArray", "NumCellsPerTile", },
              com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.class,
              com.intel.genomicsdb.GenomicsDBImportConfiguration.TileDBConfig.Builder.class);
          internal_static_Partition_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_Partition_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Partition_descriptor,
              new java.lang.String[] { "Begin", "TiledbConfig", "VcfFileName", },
              com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.class,
              com.intel.genomicsdb.GenomicsDBImportConfiguration.Partition.Builder.class);
          internal_static_ImportConfiguration_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_ImportConfiguration_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ImportConfiguration_descriptor,
              new java.lang.String[] { "RowBasedPartitioning", "ProduceCombinedVcf", "ProduceTiledbArray", "ColumnPartitions", "VidMappingFile", "CallsetMappingFile", "SizePerColumnPartition", "TreatDeletionsAsIntervals", "NumParallelVcfFiles", "DeleteAndCreateTiledbArray", "DoPingPongBuffering", "OffloadVcfOutputProcessing", "DiscardVcfIndex", "SegmentSize", "TiledbConfig", },
              com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration.class,
              com.intel.genomicsdb.GenomicsDBImportConfiguration.ImportConfiguration.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
