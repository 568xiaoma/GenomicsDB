Compilation:
A recent version of gcc is needed.
source /opt/gcc-4.9.1/setup.sh
make

Debug mode
make DEBUG=1
Speed mode
make SPEED=1

Broadly, the steps to use TileDB are as follows:
a. Define the schema of the array: This includes attributes and attribute types 
of cells, number of dimensions of the array and dimension sizes.
b. Create a StorageManager object that manages the on-disk files associated 
with the array.
c. Create a Loader object that loads data from a CSV file to the TileDB format.
d. Create a QueryProcessor object that performs queries on the stored array.

Examples are in the directory example/src
example_array_schema.cc: Describes how to define an array schema
example_loader.cc: Describes how to load data from a sample CSV file into the 
TileDB array.
example_query_processor.cc: Provides some simple queries
gt_example_loader.cc: Loader program for genomic variants. Loads data from CSV 
file, that is produced from a VCF, into TileDB
./example/bin/gt_example_loader -w <directory> -A <array_name> -f <csv_file> -N 
<num_samples>
Note that an array with the same name should not already exist in the same 
directory tree when running the loader program.
Sample CSV files for testing are provided on c14 at 
/mnt/app_hdd/scratch/karthikg/VCFs/tiledb_csv/. Each file contains data from a 
single VCF sample. To reduce the size of data imported into TileDB, feel free 
to use only a few lines from the CSV files. The -N argument to the loader 
program should have value 1 for these files.
The files /mnt/app_hdd/scratch/karthikg/VCFs/tiledb_csv/tiledb_tests/*.csv 
contain data from multiple samples (2.csv contains data from 2 samples etc).  
Use the correct value for the -N argument while working with these files.  
Again, feel free to create smaller input CSV files.
gt_example_query_processor.cc: Computes the median for the PL vector for a 
given query location.
./example/bin/gt_example_query_processor -w <directory> -A <array> -p 
<position>
The output is the median vector of PL values
