.TH tiledb_load_csv 1 "27 June 2015" "Version 0.1" "TileDB programs"
 
.SH NAME
tiledb_load_csv - loads a collection of CSV files into an array

.SH SYNOPSIS
.B tiledb_load_csv 
.BI "-w " "directory " "-A " "array_name " "-p " "path" 
[
.BI "-m " "mode"
]

.SH DESCRIPTION
.B tiledb_load_csv
loads a collection of CSV files into an array. The user specifies in 
option \fB-p\fR the path to a single CSV file name, or to a directory 
containing a collection of CSV files (all of which will be loaded into
the array). Moreover, the user may indicate whether the cells in each file
are sorted along the cell order defined in the array schema or not. This
has a dramatic effect on performance; if the cells are already sorted, then
the costly sorting operation upon loading is avoided and, hence, the load
performance is substantially improved. Note that, for the case of multiple
sorted files, loading is essentially a \fImerge\fR operation (the cells
are sorted in each file, but not necessarily across files). On error, it prints
a message on stderr and returns an error code (see \fBEXIT STATUS\fR). 

The following conventions apply to the \fBSYNOPSIS\fR section:

.TS
tab (@);
c lx .
\fBbold text\fR @ type exactly as shown
\fIitalic text\fR @ replace with appropriate argument
.TE


\fBCSV file format\fR 

The CSV file is essentially a collection of (CSV) lines, where each line
represents an array cell. The general format of each line is of the form
(no spaces before and after each comma):

\fBc_1\fR , ... , \fBc_{dim_num}\fR , \fBa_1\fR , ... , \fBa_{attribute_num}\fR

where \fBc_1\fR , ... , \fBc_{dim_num}\fR are the \fBdim_num\fR
coordinates and \fBa_1\fR , ... , \fBa_{attribute_num}\fR are the 
\fBattribute_num\fR attributes.

If an attribute takes multiple values, but their number is \fIpredefined\fR in 
the array schema (e.g., \fBint:3\fR), then these values are simply included
next to each other and separated by comma. However, if the number of values 
is \fIvariable\fR (e.g, \fBint:var\fR), then the number of values must precede 
the actual attribute values (e.g., \fB3,0.1,0.2,0.3\fR for an attribute 
\fIattr1\fR whose type was defined as \fBfloat:var\fR means that this cell 
stores \fB3\fR values on attribute \fIattr1\fR, namely \fB0.1,0.2,0.3\fR
(more examples are provided below).

There is one exception of the above for the case of \fBstrings\fR (i.e., 
variable lengthed attributes defined as \fBchar:var\fR). These are simply given
in one CSV field (e.g., \fBabc\fR), since their number can be easily deduced
by the size of the string (the same is not true for numerics). If multiple
strings are to be included in a \fBvar:char\fR attribute, the user must
simply include an arbitray \fIseparator\fR. For instance, one may store
strings \fBabc\fR and \fBdefg\fR as \fBabc*defg\fR. It falls upon the 
"conslumer" of the data to recognize how to split the strings (TileDB simply 
stores a variable number of characters). Finally, note that,
if an attribute is defined, say, as \fBchar:3\fR (i.e., the number of
characters for this attribute per cell is known upon definition), then the
line must simply include \fBa,b,c\fR instead of \fBabc\fR (i.e., it is treated 
as in the case of the other types).

A \fBnull\fR attribute value is represented by character \fB*\fR. 

A \fBdeletion\fR of a cell in TileDB is represented by a CSV line that 
contains the coordinates of the cell to be deleted, and stores character
\fB$\fR in \fIall\fR the attribute fields.

\fBExample CSV lines\fR

Suppose that the array contains \fB2 dimensions\fR and \fB3 attributes\fR, whose
types are defined as \fBint:2,double:var,char:var,int64\fR (recall that the 
last type corresponds always to all coordinates collectively).
.TP
.B 1,3,10,11,2,0.1,0.2,paok 
\fB(1,3)\fR are the coordinates of the cell (of type \fBint64\fR). \fB(10,11)\fR
is the value on the \fIfirst\fR attribute (of type \fBint\fR). \fB(0.1,0.2)\fR 
is the value of the second attribute (of type \fBdouble\fR). Finally, \fBpaok\fR
is the value of the \fIthird\fR attribute (of type \fBchar\fR), and my favorite
soccer team in Greece :P.
.TP
.B 1,3,10,11,*,paok
Same as above, but now the second attribute value is null.
.TP
.B 1,3,$,$,$ 
Cell \fB(1,3)\fR is being deleted.
 
.SH OPTIONS
.TP
.BI "-w" " directory" "\fR, " \fB --workspace=\fIdirectory\fR  
The path to the workspace folder where the TileDB will be stored. The path
must exist, and the caller must have read and write permissions on it.

.TP
.BI "-A" " array_name" "\fR, " \fB --array-name=\fIarray_name\fR  
The name of the array where the data will be loaded. The array
must be already defined. 

.TP

.BI "-p" " path" "\fR, " \fB --path=\fIpath\fR  
The path to a CSV file or to a directory of CSV files. If it is
a file, then this single file will be loaded. If it is a directory,
\fBall\fR the files in the directory will be loaded.

.TP
.BI "-m" " mode" "\fR, " \fB --mode=\fImode\fR  
It can be either \fBsorted\fR or \fBunsorted\fR. This is also optional;
if it is omitted, the default is \fBunsorted\fR. This indicates whether the
cells in the CSV file(s) are sorted along the cell order defined in
the array schema. This choice will have a great effect on performance
(sorted cells are loaded substantially faster).

.SH EXAMPLES
.TP
\fBtiledb_load_csv\fR \\ 
    \fB-w \fRmy_workspace/ \\
    \fB-A \fRmy_array \\
    \fB-p \fRmy_array.bin

This loads into array \fImy_array\fR in workspace folder \fImy_workspace\fR the
data stored in the CSV file \fImy_array.bin\fR. It is assumed that the cells
are unsorted.

.TP
\fBtiledb_load_csv\fR \\ 
    \fB-w \fRmy_workspace/ \\
    \fB-A \fRmy_array \\
    \fB-p \fRmy_csv_files/

This is the same as the first example, but now all the files included in
directory \fImy_csv_files/\fR will be loaded into the array.

.TP
\fBtiledb_load_csv\fR \\ 
    \fB-w \fRmy_workspace/ \\
    \fB-A \fRmy_array \\
    \fB-p \fRmy_csv_files/ \\
    \fB-m \fRsorted

This is the same as the second example, but now the cells in each file
(but not necessarily across files) are sorted on the cell order defined
in the array schema.

.SH EXIT STATUS
.TP 
.B 0
Successful execution
.TP 
.B -1
Parser error
.TP 
.B -2
Undefined array
.TP 
.B -3
File operation failed
.TP 
.B -7
TileDB initialization failed
.TP 
.B -8
TileDB finalization failed
.TP 
.B -14
Failed to open array
.TP 
.B -15
Failed to close array

.SH SEE ALSO
.BR "tiledb_define_array" "(1), " "tiledb_export_csv" "(1) " \
"tiledb_generate_synthetic_data" "(1) "

.SH AUTHOR
Stavros Papadopoulos <http://people.csail.mit.edu/stavrosp>, Copyright (c) 2015
